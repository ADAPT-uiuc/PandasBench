{
  "max-mem-in-mb": 2129,
  "max-mem-in-mb2": 2856,
  "cells": [
    {
      "raw": "import numpy as np\n# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\n# ALEX: remove plotting\n# import matplotlib.pyplot as plt\n# import seaborn as sns \nimport warnings\nwarnings.filterwarnings(\"ignore\")",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 469160
    },
    {
      "raw": "train = pd.read_csv('./input/train.scaled.csv')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2887868286
    },
    {
      "raw": "train.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 476560795
    },
    {
      "raw": "train.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 367523
    },
    {
      "raw": "print(\"The average person kills {:.4f} players, 99% of people have {} kills or less, while the most kills ever recorded is {}.\".format(train['kills'].mean(),train['kills'].quantile(0.99), train['kills'].max()))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 13523606
    },
    {
      "raw": "data = train.copy()\ndata.loc[data['kills'] > data['kills'].quantile(0.99)] = '8+'\n# ALEX: remove plotting\n# plt.figure(figsize=(15,10))\n# sns.countplot(data['kills'].astype('str').sort_values())\n# plt.title(\"Kill Count\",fontsize=15)\n# plt.show()\n_ = data['kills'].astype('str').sort_values()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2021978681
    },
    {
      "raw": "data = train.copy()\ndata = data[data['kills']==0]\n# ALEX: remove plotting\n# plt.figure(figsize=(15,10))\n# plt.title(\"Damage Dealt by 0 killers\",fontsize=15)\n# sns.distplot(data['damageDealt'])\n# plt.show()\n_ = data['damageDealt']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 377296077
    },
    {
      "raw": "print(\"{} players ({:.4f}%) have won without a single kill!\".format(len(data[data['winPlacePerc']==1]), 100*len(data[data['winPlacePerc']==1])/len(train)))\n\ndata1 = train[train['damageDealt'] == 0].copy()\nprint(\"{} players ({:.4f}%) have won without dealing damage!\".format(len(data1[data1['winPlacePerc']==1]), 100*len(data1[data1['winPlacePerc']==1])/len(train)))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 92106396
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.jointplot(x=\"winPlacePerc\", y=\"kills\", data=train, height=10, ratio=3, color=\"r\")\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 182784
    },
    {
      "raw": "kills = train.copy()\n\nkills['killsCategories'] = pd.cut(kills['kills'], [-1, 0, 2, 5, 10, 60], labels=['0_kills','1-2_kills', '3-5_kills', '6-10_kills', '10+_kills'])\n\n# ALEX: remove plotting\n# plt.figure(figsize=(15,8))\n# sns.boxplot(x=\"killsCategories\", y=\"winPlacePerc\", data=kills)\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 116107175
    },
    {
      "raw": "print(\"The average person walks for {:.1f}m, 99% of people have walked {}m or less, while the marathoner champion walked for {}m.\".format(train['walkDistance'].mean(), train['walkDistance'].quantile(0.99), train['walkDistance'].max()))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 22975010
    },
    {
      "raw": "data = train.copy()\ndata = data[data['walkDistance'] < train['walkDistance'].quantile(0.99)]\n# ALEX: remove plotting\n# plt.figure(figsize=(15,10))\n# plt.title(\"Walking Distance Distribution\",fontsize=15)\n# sns.distplot(data['walkDistance'])\n# plt.show()\n_ = data['walkDistance']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 271121578
    },
    {
      "raw": "print(\"{} players ({:.4f}%) walked 0 meters. This means that they die before even taking a step or they are afk (more possible).\".format(len(data[data['walkDistance'] == 0]), 100*len(data1[data1['walkDistance']==0])/len(train)))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 19762517
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.jointplot(x=\"winPlacePerc\", y=\"walkDistance\",  data=train, height=10, ratio=3, color=\"lime\")\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 181533
    },
    {
      "raw": "print(\"The average person drives for {:.1f}m, 99% of people have drived {}m or less, while the formula 1 champion drived for {}m.\".format(train['rideDistance'].mean(), train['rideDistance'].quantile(0.99), train['rideDistance'].max()))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 19653141
    },
    {
      "raw": "data = train.copy()\ndata = data[data['rideDistance'] < train['rideDistance'].quantile(0.9)]\n# ALEX: remove plotting\n# plt.figure(figsize=(15,10))\n# plt.title(\"Ride Distance Distribution\",fontsize=15)\n# sns.distplot(data['rideDistance'])\n# plt.show()\n_ = data['rideDistance']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 262100891
    },
    {
      "raw": "print(\"{} players ({:.4f}%) drived for 0 meters. This means that they don't have a driving licence yet.\".format(len(data[data['rideDistance'] == 0]), 100*len(data1[data1['rideDistance']==0])/len(train)))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 150568378
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.jointplot(x=\"winPlacePerc\", y=\"rideDistance\", data=train, height=10, ratio=3, color=\"y\")\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 197659
    },
    {
      "raw": "# ALEX: remove plotting\n# f,ax1 = plt.subplots(figsize =(20,10))\n# sns.pointplot(x='vehicleDestroys',y='winPlacePerc',data=data,color='#606060',alpha=0.8)\n# plt.xlabel('Number of Vehicle Destroys',fontsize = 15,color='blue')\n# plt.ylabel('Win Percentage',fontsize = 15,color='blue')\n# plt.title('Vehicle Destroys/ Win Ratio',fontsize = 20,color='blue')\n# plt.grid()\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 174538
    },
    {
      "raw": "print(\"The average person swims for {:.1f}m, 99% of people have swimemd {}m or less, while the olympic champion swimmed for {}m.\".format(train['swimDistance'].mean(), train['swimDistance'].quantile(0.99), train['swimDistance'].max()))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 12970683
    },
    {
      "raw": "data = train.copy()\ndata = data[data['swimDistance'] < train['swimDistance'].quantile(0.95)]\n# ALEX: remove plotting\n# plt.figure(figsize=(15,10))\n# plt.title(\"Swim Distance Distribution\",fontsize=15)\n# sns.distplot(data['swimDistance'])\n# plt.show()\n_ = data['swimDistance']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 251151480
    },
    {
      "raw": "swim = train.copy()\n\nswim['swimDistance'] = pd.cut(swim['swimDistance'], [-1, 0, 5, 20, 5286], labels=['0m','1-5m', '6-20m', '20m+'])\n\n# ALEX: remove plotting\n# plt.figure(figsize=(15,8))\n# sns.boxplot(x=\"swimDistance\", y=\"winPlacePerc\", data=swim)\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 113786296
    },
    {
      "raw": "print(\"The average person uses {:.1f} heal items, 99% of people use {} or less, while the doctor used {}.\".format(train['heals'].mean(), train['heals'].quantile(0.99), train['heals'].max()))\nprint(\"The average person uses {:.1f} boost items, 99% of people use {} or less, while the doctor used {}.\".format(train['boosts'].mean(), train['boosts'].quantile(0.99), train['boosts'].max()))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 32337304
    },
    {
      "raw": "data = train.copy()\ndata = data[data['heals'] < data['heals'].quantile(0.99)]\ndata = data[data['boosts'] < data['boosts'].quantile(0.99)]\n\n# ALEX: remove plotting\n# f,ax1 = plt.subplots(figsize =(20,10))\n# sns.pointplot(x='heals',y='winPlacePerc',data=data,color='lime',alpha=0.8)\n# sns.pointplot(x='boosts',y='winPlacePerc',data=data,color='blue',alpha=0.8)\n# plt.text(4,0.6,'Heals',color='lime',fontsize = 17,style = 'italic')\n# plt.text(4,0.55,'Boosts',color='blue',fontsize = 17,style = 'italic')\n# plt.xlabel('Number of heal/boost items',fontsize = 15,color='blue')\n# plt.ylabel('Win Percentage',fontsize = 15,color='blue')\n# plt.title('Heals vs Boosts',fontsize = 20,color='blue')\n# plt.grid()\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 442749809
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.jointplot(x=\"winPlacePerc\", y=\"heals\", data=train, height=10, ratio=3, color=\"lime\")\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 188266
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.jointplot(x=\"winPlacePerc\", y=\"boosts\", data=train, height=10, ratio=3, color=\"blue\")\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 140392
    },
    {
      "raw": "solos = train[train['numGroups']>50]\nduos = train[(train['numGroups']>25) & (train['numGroups']<=50)]\nsquads = train[train['numGroups']<=25]\nprint(\"There are {} ({:.2f}%) solo games, {} ({:.2f}%) duo games and {} ({:.2f}%) squad games.\".format(len(solos), 100*len(solos)/len(train), len(duos), 100*len(duos)/len(train), len(squads), 100*len(squads)/len(train),))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 182722592
    },
    {
      "raw": "# ALEX: remove plotting\n# f,ax1 = plt.subplots(figsize =(20,10))\n# sns.pointplot(x='kills',y='winPlacePerc',data=solos,color='black',alpha=0.8)\n# sns.pointplot(x='kills',y='winPlacePerc',data=duos,color='#CC0000',alpha=0.8)\n# sns.pointplot(x='kills',y='winPlacePerc',data=squads,color='#3399FF',alpha=0.8)\n# plt.text(37,0.6,'Solos',color='black',fontsize = 17,style = 'italic')\n# plt.text(37,0.55,'Duos',color='#CC0000',fontsize = 17,style = 'italic')\n# plt.text(37,0.5,'Squads',color='#3399FF',fontsize = 17,style = 'italic')\n# plt.xlabel('Number of kills',fontsize = 15,color='blue')\n# plt.ylabel('Win Percentage',fontsize = 15,color='blue')\n# plt.title('Solo vs Duo vs Squad Kills',fontsize = 20,color='blue')\n# plt.grid()\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 230899
    },
    {
      "raw": "# ALEX: remove plotting\n# f,ax1 = plt.subplots(figsize =(20,10))\n# sns.pointplot(x='DBNOs',y='winPlacePerc',data=duos,color='#CC0000',alpha=0.8)\n# sns.pointplot(x='DBNOs',y='winPlacePerc',data=squads,color='#3399FF',alpha=0.8)\n# sns.pointplot(x='assists',y='winPlacePerc',data=duos,color='#FF6666',alpha=0.8)\n# sns.pointplot(x='assists',y='winPlacePerc',data=squads,color='#CCE5FF',alpha=0.8)\n# sns.pointplot(x='revives',y='winPlacePerc',data=duos,color='#660000',alpha=0.8)\n# sns.pointplot(x='revives',y='winPlacePerc',data=squads,color='#000066',alpha=0.8)\n# plt.text(14,0.5,'Duos - Assists',color='#FF6666',fontsize = 17,style = 'italic')\n# plt.text(14,0.45,'Duos - DBNOs',color='#CC0000',fontsize = 17,style = 'italic')\n# plt.text(14,0.4,'Duos - Revives',color='#660000',fontsize = 17,style = 'italic')\n# plt.text(14,0.35,'Squads - Assists',color='#CCE5FF',fontsize = 17,style = 'italic')\n# plt.text(14,0.3,'Squads - DBNOs',color='#3399FF',fontsize = 17,style = 'italic')\n# plt.text(14,0.25,'Squads - Revives',color='#000066',fontsize = 17,style = 'italic')\n# plt.xlabel('Number of DBNOs/Assits/Revives',fontsize = 15,color='blue')\n# plt.ylabel('Win Percentage',fontsize = 15,color='blue')\n# plt.title('Duo vs Squad DBNOs, Assists, and Revives',fontsize = 20,color='blue')\n# plt.grid()\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 213427
    },
    {
      "raw": "# ALEX: remove plotting\n# f,ax = plt.subplots(figsize=(15, 15))\n# sns.heatmap(train.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\n# plt.show()\n_ = train.corr()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1914492255
    },
    {
      "raw": "k = 5 #number of variables for heatmap\n# ALEX: remove plotting\n# f,ax = plt.subplots(figsize=(11, 11))\ncols = train.corr().nlargest(k, 'winPlacePerc')['winPlacePerc'].index\ncm = np.corrcoef(train[cols].values.T)\n# ALEX: remove plotting\n# sns.set(font_scale=1.25)\n# hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\n# plt.show()\n_ = cols.values\n_ = cols.values",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1948649676
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.set()\ncols = ['winPlacePerc', 'walkDistance', 'boosts', 'weaponsAcquired', 'damageDealt', 'killPlace']\n# sns.pairplot(train[cols], size = 2.5)\n# plt.show()\n_ = train[cols]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 13661871
    },
    {
      "raw": "train['playersJoined'] = train.groupby('matchId')['matchId'].transform('count')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 168548745
    },
    {
      "raw": "data = train.copy()\ndata = data[data['playersJoined']>49]\n# ALEX: remove plotting\n# plt.figure(figsize=(15,10))\n# sns.countplot(data['playersJoined'])\n# plt.title(\"Players Joined\",fontsize=15)\n# plt.show()\n_ = data['playersJoined']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 270838209
    },
    {
      "raw": "train['killsNorm'] = train['kills']*((100-train['playersJoined'])/100 + 1)\ntrain['damageDealtNorm'] = train['damageDealt']*((100-train['playersJoined'])/100 + 1)\ntrain[['playersJoined', 'kills', 'killsNorm', 'damageDealt', 'damageDealtNorm']][5:8]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 163131342
    },
    {
      "raw": "train['healsAndBoosts'] = train['heals']+train['boosts']\ntrain['totalDistance'] = train['walkDistance']+train['rideDistance']+train['swimDistance']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 9666434
    },
    {
      "raw": "train['boostsPerWalkDistance'] = train['boosts']/(train['walkDistance']+1) #The +1 is to avoid infinity, because there are entries where boosts>0 and walkDistance=0. Strange.\ntrain['boostsPerWalkDistance'].fillna(0, inplace=True)\ntrain['healsPerWalkDistance'] = train['heals']/(train['walkDistance']+1) #The +1 is to avoid infinity, because there are entries where heals>0 and walkDistance=0. Strange.\ntrain['healsPerWalkDistance'].fillna(0, inplace=True)\ntrain['healsAndBoostsPerWalkDistance'] = train['healsAndBoosts']/(train['walkDistance']+1) #The +1 is to avoid infinity.\ntrain['healsAndBoostsPerWalkDistance'].fillna(0, inplace=True)\ntrain[['walkDistance', 'boosts', 'boostsPerWalkDistance' ,'heals',  'healsPerWalkDistance', 'healsAndBoosts', 'healsAndBoostsPerWalkDistance']][40:45]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 222498267
    },
    {
      "raw": "train['killsPerWalkDistance'] = train['kills']/(train['walkDistance']+1) #The +1 is to avoid infinity, because there are entries where kills>0 and walkDistance=0. Strange.\ntrain['killsPerWalkDistance'].fillna(0, inplace=True)\ntrain[['kills', 'walkDistance', 'rideDistance', 'killsPerWalkDistance', 'winPlacePerc']].sort_values(by='killsPerWalkDistance').tail(10)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 192401842
    },
    {
      "raw": "train['team'] = [1 if i>50 else 2 if (i>25 & i<=50) else 4 for i in train['numGroups']]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 330139142
    },
    {
      "raw": "train.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 391055
    }
  ],
  "total-time-in-sec": 13.004105714,
  "max-disk-in-mb": 0
}