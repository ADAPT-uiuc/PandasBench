{
  "max-mem-in-mb": 153,
  "max-mem-in-mb2": 159,
  "cells": [
    {
      "raw": "# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\nimport re\n# ALEX: remove ML code\n# from nltk.stem import WordNetLemmatizer\n# from nltk.corpus import names, stopwords\nimport unicodedata\n# from sklearn.model_selection import train_test_split\n# from sklearn.feature_extraction.text import TfidfVectorizer\n# from sklearn.pipeline import Pipeline\n# from sklearn.metrics import classification_report\n# from sklearn.linear_model import LogisticRegression",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 450248
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 121493
    },
    {
      "raw": "tweet_train_df = pd.read_csv('./input/train.scaled.csv')\ntweet_test_df = pd.read_csv('./input/test.scaled.csv')\nId = tweet_test_df['id']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 168533027
    },
    {
      "raw": "tweet_train_df.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 532625
    },
    {
      "raw": "tweet_train_df.isna().sum()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 32061083
    },
    {
      "raw": "tweet_train_df.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 35985124
    },
    {
      "raw": "tweet_train_df.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 329017
    },
    {
      "raw": "def data_imputation(data):\n    data['keyword'].fillna(' ', inplace=True)\n    data['location'].fillna(' ', inplace=True)\n    return data",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 519783
    },
    {
      "raw": "tweet_train_df = data_imputation(tweet_train_df)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 9084946
    },
    {
      "raw": "tweet_test_df = data_imputation(tweet_test_df)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 4299521
    },
    {
      "raw": "tweet_train_df.isna().sum()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 31600083
    },
    {
      "raw": "tweet_train_df['text'] = tweet_train_df['text'] +' '+ tweet_train_df['location'] +' '+ tweet_train_df['keyword']\ntweet_test_df['text'] = tweet_test_df['text'] +' '+ tweet_test_df['location'] +' '+ tweet_test_df['keyword']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 78909920
    },
    {
      "raw": "target = tweet_train_df['target']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 491107
    },
    {
      "raw": "tweet_train_df.drop(['target', 'location', 'keyword', 'id'], axis=1, inplace=True)\ntweet_test_df.drop(['location', 'keyword', 'id'], axis=1, inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 5930594
    },
    {
      "raw": "# ALEX: remove ML code\n# lemmetizer = WordNetLemmatizer()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 192979
    },
    {
      "raw": "# ALEX: remove ML code\n# all_names = set(names.words())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 177159
    },
    {
      "raw": "# ALEX: remove ML code\n# stop_words = set(stopwords.words('english'))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 153579
    },
    {
      "raw": "# ALEX: remove ML code\n# tf_idf = TfidfVectorizer(min_df=0.1, max_df=0.7)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 150255
    },
    {
      "raw": "def cleaned_string(string):\n    # Removing all the digits\n    string = re.sub(r'\\d', '', string)\n    \n    # Removing accented data\n    string = unicodedata.normalize('NFKD', string).encode('ascii', 'ignore').decode('utf-8', 'ignore')\n    \n    # Removing Mentions\n    string = re.sub(r'@\\w+', ' ', string)\n    \n    # Removing links \n    string = re.sub(r'(https?:\\/\\/)?([\\da-zA-Z\\.-\\/\\#\\:]+)\\.([\\da-zA-Z\\.\\/\\:\\#]{0,9})([\\/\\w \\.-\\/\\:\\#]*)', ' ', string)\n    \n    # Removing all the digits special caharacters\n    string = re.sub(r'\\W', ' ', string)\n        \n    \n    # Removing double whitespaces\n    string = re.sub(r'\\s+', ' ', string, flags=re.I)\n    \n\n    \n    string = string.strip()\n    \n    #Removing all Single characters\n    string = re.sub(r'\\^[a-zA-Z]\\s+','' , string)\n    \n    \n    # Lemmetizing the string and removing stop words\n    string = string.split()\n# ALEX: remove ML code\n#     string = [lemmetizer.lemmatize(word) for word in string if word not in stop_words and word not in all_names]\n    string = ' '.join(string)\n    \n    # Lowercasing all data\n    string = string.lower()\n        \n    return string",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1330073
    },
    {
      "raw": "def clean_text(data):\n    for i in range(data.shape[0]):\n        for j in range(data.shape[1]):\n            data.iloc[i, j] = cleaned_string(data.iloc[i, j])\n    return data\n            \n            \n    ",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 648425
    },
    {
      "raw": "tweet_cleaned_test_df = clean_text(tweet_test_df)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3137543459
    },
    {
      "raw": "tweet_cleaned_test_df.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 272798
    },
    {
      "raw": "tweet_cleaned_test_df.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 276369
    },
    {
      "raw": "tweet_cleaned_train_df = clean_text(tweet_train_df)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 7287344489
    },
    {
      "raw": "tweet_train_df.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 369590
    },
    {
      "raw": "tweet_cleaned_train_df.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 241206
    },
    {
      "raw": "# ALEX: remove ML code\n# X_train, X_valid, y_train, y_valid = train_test_split(tweet_cleaned_train_df['text'], target,random_state = 0)\n_ = tweet_cleaned_train_df['text']\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 321937
    },
    {
      "raw": "# ALEX: remove ML code\n# catboost = LogisticRegression()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 101046
    },
    {
      "raw": "# ALEX: remove ML code\n# pipeline_sgd = Pipeline([\n#     ('tfidf',  TfidfVectorizer()),\n#     ('nb', catboost,)\n# ])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 108403
    },
    {
      "raw": "# ALEX: remove ML code\n# model = pipeline_sgd.fit(X_train, y_train)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 94711
    },
    {
      "raw": "# ALEX: remove ML code\n# y_predict = model.predict(X_valid)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 94965
    },
    {
      "raw": "# ALEX: remove ML code\n# print(classification_report(y_valid, y_predict))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 89864
    },
    {
      "raw": "# ALEX: remove ML code\n# y_pred_test = model.predict(tweet_cleaned_test_df['text'])\ny_pred_test = tweet_cleaned_test_df['text']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 241057
    },
    {
      "raw": "# Saving result on test set\n# ALEX: remove ML code\noutput = pd.DataFrame({'Id': Id,\n                       'target': y_pred_test})\n\noutput.to_csv(r'submission.csv', index=False)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 77198576
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 227791
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 168289
    }
  ],
  "total-time-in-sec": 10.876195591,
  "max-disk-in-mb": 0
}