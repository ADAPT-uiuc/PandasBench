{
  "max-mem-in-mb": 599,
  "max-mem-in-mb2": 1288,
  "cells": [
    {
      "raw": "import numpy as np\n# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\n\n# ALEX: remove plotting, ML code\n# import seaborn as sns\n# import matplotlib.pyplot as plt  \n\n# from timeit import default_timer as timer\n# from sklearn import preprocessing\n\n# !pip install ultimate\n# from ultimate.mlp import MLP \n\n# from keras.models import Sequential\n# from keras.layers import Dense\n# from keras.callbacks import ModelCheckpoint\n\n# import gc, sys\n# gc.enable()\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 426026
    },
    {
      "raw": "# ALEX: remove extra display code\n# def state(message,start = True, time = 0):\n#     if(start):\n#         print(f'Working on {message} ... ')\n#     else :\n#         print(f'Working on {message} took ({round(time , 3)}) Sec \\n')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 212187
    },
    {
      "raw": "INPUT_DIR = \"./input/\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 297596
    },
    {
      "raw": "def feature_engineering(is_train=True):\n    # When this function is used for the training data, load train_V2.csv :\n    if is_train: \n        print(\"processing train_V2.csv\")\n        df = pd.read_csv(INPUT_DIR + 'train_V2.scaled.csv')\n        \n        # Only take the samples with matches that have more than 1 player \n        # there are matches with no players or just one player ( those samples could affect our model badly) \n        df = df[df['maxPlace'] > 1]\n    \n    # When this function is used for the test data, load test_V2.csv :\n    else:\n        print(\"processing test_V2.csv\")\n        df = pd.read_csv(INPUT_DIR + 'test_V2.scaled.csv')\n        \n    # Make a new feature indecating the total distance a player cut :\n# ALEX: remove extra display code\n#     state('totalDistance')\n#     s = timer()\n    df['totalDistance'] = df['rideDistance'] + df[\"walkDistance\"] + df[\"swimDistance\"]\n# ALEX: remove extra display code\n#     e = timer()\n#     state('totalDistance', False, e - s)\n          \n\n# ALEX: remove extra display code\n#     state('rankPoints')\n#     s = timer()\n    # Process the 'rankPoints' feature by replacing any value of (-1) to be (0) :\n    df['rankPoints'] = np.where(df['rankPoints'] <= 0 ,0 , df['rankPoints'])\n# ALEX: remove extra display code\n#     e = timer()                                  \n#     state('rankPoints', False, e-s)\n    \n\n    target = 'winPlacePerc'\n    # Get a list of the features to be used\n    features = list(df.columns)\n    \n    # Remove some features from the features list :\n    features.remove(\"Id\")\n    features.remove(\"matchId\")\n    features.remove(\"groupId\")\n    features.remove(\"matchDuration\")\n    features.remove(\"matchType\")\n    \n    y = None\n    \n    # If we are processing the training data, process the target\n    # (group the data by the match and the group then take the mean of the target) \n    if is_train: \n        y = np.array(df.groupby(['matchId','groupId'])[target].agg('mean'), dtype=np.float64)\n        # Remove the target from the features list :\n        features.remove(target)\n    \n    # Make new features indicating the mean of the features ( grouped by match and group ) :\n    print(\"get group mean feature\")\n    agg = df.groupby(['matchId','groupId'])[features].agg('mean')\n    # Put the new features into a rank form ( max value will have the highest rank)\n    agg_rank = agg.groupby('matchId')[features].rank(pct=True).reset_index()\n    \n    \n    # If we are processing the training data let df_out = the grouped  'matchId' and 'groupId'\n    if is_train: df_out = agg.reset_index()[['matchId','groupId']]\n    # If we are processing the test data let df_out = 'matchId' and 'groupId' without grouping \n    else: df_out = df[['matchId','groupId']]\n    \n    # Merge agg and agg_rank (that we got before) with df_out :\n    df_out = df_out.merge(agg.reset_index(), suffixes=[\"\", \"\"], how='left', on=['matchId', 'groupId'])\n    df_out = df_out.merge(agg_rank, suffixes=[\"_mean\", \"_mean_rank\"], how='left', on=['matchId', 'groupId'])\n    \n    # Make new features indicating the max value of the features for each group ( grouped by match )\n    print(\"get group max feature\")\n    agg = df.groupby(['matchId','groupId'])[features].agg('max')\n    # Put the new features into a rank form ( max value will have the highest rank)\n    agg_rank = agg.groupby('matchId')[features].rank(pct=True).reset_index()\n    \n    # Merge the new (agg and agg_rank) with df_out :\n    df_out = df_out.merge(agg.reset_index(), suffixes=[\"\", \"\"], how='left', on=['matchId', 'groupId'])\n    df_out = df_out.merge(agg_rank, suffixes=[\"_max\", \"_max_rank\"], how='left', on=['matchId', 'groupId'])\n    \n    # Make new features indicating the minimum value of the features for each group ( grouped by match )\n    print(\"get group min feature\")\n    agg = df.groupby(['matchId','groupId'])[features].agg('min')\n    # Put the new features into a rank form ( max value will have the highest rank)\n    agg_rank = agg.groupby('matchId')[features].rank(pct=True).reset_index()\n    \n    # Merge the new (agg and agg_rank) with df_out :\n    df_out = df_out.merge(agg.reset_index(), suffixes=[\"\", \"\"], how='left', on=['matchId', 'groupId'])\n    df_out = df_out.merge(agg_rank, suffixes=[\"_min\", \"_min_rank\"], how='left', on=['matchId', 'groupId'])\n    \n    # Make new features indicating the number of players in each group ( grouped by match )\n    print(\"get group size feature\")\n    agg = df.groupby(['matchId','groupId']).size().reset_index(name='group_size')\n     \n    # Merge the group_size feature with df_out :\n    df_out = df_out.merge(agg, how='left', on=['matchId', 'groupId'])\n    \n    # Make new features indicating the mean value of each features for each match :\n    print(\"get match mean feature\")\n    agg = df.groupby(['matchId'])[features].agg('mean').reset_index()\n    \n    # Merge the new agg with df_out :\n    df_out = df_out.merge(agg, suffixes=[\"\", \"_match_mean\"], how='left', on=['matchId'])\n    \n    # Make new features indicating the number of groups in each match :\n    print(\"get match size feature\")\n    agg = df.groupby(['matchId']).size().reset_index(name='match_size')\n    \n    # Merge the match_size feature with df_out :\n    df_out = df_out.merge(agg, how='left', on=['matchId'])\n    \n    # Drop matchId and groupId\n    df_out.drop([\"matchId\", \"groupId\"], axis=1, inplace=True)\n    \n    # X is the output dataset (without the target) and y is the target :\n    X = np.array(df_out, dtype=np.float64)\n    \n    \n# ALEX: remove GC code\n#     del df, df_out, agg, agg_rank\n#     gc.collect()\n\n    return X, y\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 5051173
    },
    {
      "raw": "# ALEX: remove IPython commands\n# %%time\n# Process the training data :\nx_train, y = feature_engineering(True)\n# Scale the data to be in the range (-1 , 1)\n# ALEX: remove ML code\n# scaler = preprocessing.MinMaxScaler(feature_range=(-1, 1), copy=False).fit(x_train)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 5161943589
    },
    {
      "raw": "print(\"x_train\", x_train.shape, x_train.max(), x_train.min())\n# ALEX: remove ML code\n# scaler.transform(x_train)\nprint(\"x_train\", x_train.shape, x_train.max(), x_train.min())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 63765405
    },
    {
      "raw": "y = y * 2 - 1\nprint(\"y\", y.shape, y.max(), y.min())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1145854
    },
    {
      "raw": "# ALEX: remove IPython commands, ML code\n# %%time\n# # create NN_model\n# NN_model = Sequential()\n# NN_model.add(Dense(x_train.shape[1],  input_dim = x_train.shape[1], activation='relu'))\n# NN_model.add(Dense(136, activation='relu'))\n# NN_model.add(Dense(136, activation='relu'))\n# NN_model.add(Dense(136, activation='relu'))\n# NN_model.add(Dense(136, activation='relu'))\n\n# # output Layer\n# NN_model.add(Dense(1, activation='linear'))\n\n# # Compile the network :\n# NN_model.compile(loss='mean_absolute_error', optimizer='adam', metrics=['mean_absolute_error'])\n# NN_model.summary()\n_ = x_train.shape[1]\n_ = x_train.shape[1]\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 330041
    },
    {
      "raw": "# ALEX: remove ML code\n# checkpoint_name = 'Weights-{epoch:03d}--{val_loss:.5f}.hdf5' \n# checkpoint = ModelCheckpoint(checkpoint_name, monitor='val_loss', verbose = 1, save_best_only = True, mode ='auto')\n# callbacks_list = [checkpoint]\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 123726
    },
    {
      "raw": "# ALEX: remove IPython commands, ML code\n# %%time\n# NN_model.fit(x=x_train, y=y, batch_size=1000,\n#              epochs=30, verbose=1, callbacks=callbacks_list,\n#              validation_split=0.15, validation_data=None, shuffle=True,\n#              class_weight=None, sample_weight=None, initial_epoch=0,\n#              steps_per_epoch=None, validation_steps=None)\n# del x_train, y\n# gc.collect()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 135280
    },
    {
      "raw": "x_test, _ = feature_engineering(False)\n# ALEX: remove ML code\n# scaler.transform(x_test)\nprint(\"x_test\", x_test.shape, x_test.max(), x_test.min())\nnp.clip(x_test, out=x_test, a_min=-1, a_max=1)\nprint(\"x_test\", x_test.shape, x_test.max(), x_test.min())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1926915354
    },
    {
      "raw": "# ALEX: remove IPython commands, ML code\n# %%time\n# pred = NN_model.predict(x_test)\n# del x_test\n# gc.collect()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 204729
    },
    {
      "raw": "# ALEX: remove ML code\n# pred = pred.reshape(-1)\n# pred = (pred + 1) / 2",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 134331
    },
    {
      "raw": "df_test = pd.read_csv(INPUT_DIR + 'test_V2.scaled.csv')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 144211718
    },
    {
      "raw": "# ALEX: remove IPython commands, ML code\n# %%time\npred = [0 for _ in range(len(df_test))]\nprint(\"fix winPlacePerc\")\nfor i in range(len(df_test)):\n# ALEX: remove ML code\n#     winPlacePerc = pred[i]\n    winPlacePerc = 0.5\n    maxPlace = int(df_test.iloc[i]['maxPlace'])\n    if maxPlace == 0:\n        winPlacePerc = 0.0\n    elif maxPlace == 1:\n        winPlacePerc = 1.0\n    else:\n        gap = 1.0 / (maxPlace - 1)\n        winPlacePerc = round(winPlacePerc / gap) * gap\n    \n    if winPlacePerc < 0: winPlacePerc = 0.0\n    if winPlacePerc > 1: winPlacePerc = 1.0    \n    pred[i] = winPlacePerc",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 5092531052
    },
    {
      "raw": "df_test['winPlacePerc'] = pred",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 5967960
    },
    {
      "raw": "submission = df_test[['Id', 'winPlacePerc']]\nsubmission.to_csv('submission.csv', index=False)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 123643938
    }
  ],
  "total-time-in-sec": 12.527039959,
  "max-disk-in-mb": 0
}