{
  "max-mem-in-mb": 1988,
  "max-mem-in-mb2": 288,
  "cells": [
    {
      "raw": "# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\n# ALEX: remove plotting\n# import matplotlib.pyplot as plt\n# import seaborn as sns",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3412503438
    },
    {
      "raw": "df = pd.read_csv('./input/kc_house_data.scaled.csv')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3393973449
    },
    {
      "raw": "evaluate_lazy(df.isnull().sum())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 23526225
    },
    {
      "raw": "evaluate_lazy(df.describe().transpose())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 47357012
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(12,8))\n# sns.distplot(df['price'])\nevaluate_lazy(df['price'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2156380
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.countplot(df['bedrooms'])\nevaluate_lazy(df['bedrooms'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1589297
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(12,8))\n# sns.scatterplot(x='price',y='sqft_living',data=df)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 270173
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.boxplot(x='bedrooms',y='price',data=df)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 262000
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(12,8))\n# sns.scatterplot(x='price',y='long',data=df)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 286453
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(12,8))\n# sns.scatterplot(x='price',y='lat',data=df)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 290359
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(12,8))\n# sns.scatterplot(x='long',y='lat',data=df,hue='price')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 281146
    },
    {
      "raw": "df.sort_values('price',ascending=False).head(20)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1668020039
    },
    {
      "raw": "len(df)*(0.01)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 620436
    },
    {
      "raw": "non_top_1_perc = df.sort_values('price',ascending=False).iloc[216:]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1589703180
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(12,8))\n# sns.scatterplot(x='long',y='lat',\n#                 data=non_top_1_perc,hue='price',\n#                 palette='RdYlGn',edgecolor=None,alpha=0.2)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 357776
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.boxplot(x='waterfront',y='price',data=df)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 319530
    },
    {
      "raw": "df.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1347190
    },
    {
      "raw": "df.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 144145569
    },
    {
      "raw": "df = df.drop('id',axis=1)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2668056
    },
    {
      "raw": "df.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1221576
    },
    {
      "raw": "df['date'] = pd.to_datetime(df['date'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 7634411
    },
    {
      "raw": "df['month'] = df['date'].apply(lambda date:date.month)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 26538901
    },
    {
      "raw": "df['year'] = df['date'].apply(lambda date:date.year)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 553580943
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.boxplot(x='year',y='price',data=df)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 350627
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.boxplot(x='month',y='price',data=df)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 398386
    },
    {
      "raw": "# ALEX: remove plotting\n# df.groupby('month').mean()['price'].plot()\nevaluate_lazy(df.groupby('month').mean()['price'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 601984626
    },
    {
      "raw": "# ALEX: remove plotting\n# df.groupby('year').mean()['price'].plot()\nevaluate_lazy(df.groupby('year').mean()['price'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2736176428
    },
    {
      "raw": "df = df.drop('date',axis=1)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3418683
    },
    {
      "raw": "df.columns",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 638100
    },
    {
      "raw": "# https://i.pinimg.com/originals/4a/ab/31/4aab31ce95d5b8474fd2cc063f334178.jpg\n# May be worth considering to remove this or feature engineer categories from it\nevaluate_lazy(df['zipcode'].value_counts())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 211918735
    },
    {
      "raw": "df = df.drop('zipcode',axis=1)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3473387
    },
    {
      "raw": "df.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1670091
    },
    {
      "raw": "# could make sense due to scaling, higher should correlate to more value\nevaluate_lazy(df['yr_renovated'].value_counts())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 194374577
    },
    {
      "raw": "evaluate_lazy(df['sqft_basement'].value_counts())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 217382557
    },
    {
      "raw": "X = df.drop('price',axis=1)\ny = df['price']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 4445048
    },
    {
      "raw": "# ALEX: remove ML code\n# from sklearn.model_selection import train_test_split",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 265452
    },
    {
      "raw": "# ALEX: remove ML code\n# X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=101)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 244867
    },
    {
      "raw": "# ALEX: remove ML code\n# from sklearn.preprocessing import MinMaxScaler",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 242913
    },
    {
      "raw": "# ALEX: remove ML code\n# scaler = MinMaxScaler()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 253951
    },
    {
      "raw": "# ALEX: remove ML code\n# X_train= scaler.fit_transform(X_train)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 256409
    },
    {
      "raw": "# ALEX: remove ML code\n# X_test = scaler.transform(X_test)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 259546
    },
    {
      "raw": "# ALEX: remove ML code\n# X_train.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 277581
    },
    {
      "raw": "# ALEX: remove ML code\n# X_test.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 301113
    },
    {
      "raw": "# ALEX: remove ML code\n# from tensorflow.keras.models import Sequential\n# from tensorflow.keras.layers import Dense, Activation\n# from tensorflow.keras.optimizers import Adam",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 323242
    },
    {
      "raw": "# ALEX: remove ML code\n# model = Sequential()\n\n# model.add(Dense(19,activation='relu'))\n# model.add(Dense(19,activation='relu'))\n# model.add(Dense(19,activation='relu'))\n# model.add(Dense(19,activation='relu'))\n# model.add(Dense(1))\n\n# model.compile(optimizer='adam',loss='mse')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 359584
    },
    {
      "raw": "# ALEX: remove ML code\n# model.fit(x=X_train,y=y_train.values,\n#           validation_data=(X_test,y_test.values),\n#           batch_size=128,epochs=400)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 328664
    },
    {
      "raw": "# ALEX: remove ML code\n# losses = pd.DataFrame(model.history.history)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 374630
    },
    {
      "raw": "# ALEX: remove ML code\n# losses.plot()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 323302
    },
    {
      "raw": "# ALEX: remove ML code\n# from sklearn.metrics import mean_squared_error,mean_absolute_error,explained_variance_score",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 345140
    },
    {
      "raw": "# ALEX: remove ML code\n# X_test",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 329237
    },
    {
      "raw": "# ALEX: remove ML code\n# predictions = model.predict(X_test)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 339045
    },
    {
      "raw": "# ALEX: remove ML code\n# mean_absolute_error(y_test,predictions)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 324028
    },
    {
      "raw": "# ALEX: remove ML code\n# np.sqrt(mean_squared_error(y_test,predictions))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 326727
    },
    {
      "raw": "# ALEX: remove ML code\n# explained_variance_score(y_test,predictions)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 329096
    },
    {
      "raw": "evaluate_lazy(df['price'].mean())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 109813762
    },
    {
      "raw": "evaluate_lazy(df['price'].median())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 141360669
    },
    {
      "raw": "# Our predictions\n# ALEX: remove plotting\n# plt.scatter(y_test,predictions)\n\n# # Perfect predictions\n# plt.plot(y_test,y_test,'r')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 441985
    },
    {
      "raw": "single_house = df.drop('price',axis=1).iloc[0]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 5681845
    },
    {
      "raw": "# ALEX: remove ML code\n# single_house = scaler.transform(single_house.values.reshape(-1, 19))\nsingle_house.values.reshape(-1, 19)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 70531194
    },
    {
      "raw": "evaluate_lazy(single_house)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 513594
    },
    {
      "raw": "# ALEX: remove ML code\n# model.predict(single_house)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 300754
    },
    {
      "raw": "evaluate_lazy(df.iloc[0])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2901241
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 238212
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 235542
    }
  ],
  "total-time-in-sec": 15.192708109,
  "max-disk-in-mb": 0
}