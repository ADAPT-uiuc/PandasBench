{
  "max-mem-in-mb": 458,
  "max-mem-in-mb2": 712,
  "cells": [
    {
      "raw": "# Import the necessary libraries\nimport numpy as np\n# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\n# ALEX: remove plotting, GC code\n# import os\n# import time\n# import warnings\n# import gc\n# import os\n# from six.moves import urllib\n# import matplotlib\n# import matplotlib.pyplot as plt\n# import seaborn as sns\nimport datetime\n# ALEX: remove plotting, ML code\n# warnings.filterwarnings('ignore')\n# %matplotlib inline\n# plt.style.use('seaborn')\n# from scipy.stats import norm, skew\n# from sklearn.preprocessing import StandardScaler",
      "rewrite-ns": 563110,
      "overhead-ns": 563110,
      "exec-ns": 308532,
      "total-ns": 871642,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\nimport datetime\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# #Add All the Models Libraries\n\n# # Scalers\n# from sklearn.utils import shuffle\n# from sklearn.pipeline import Pipeline\n# from sklearn.pipeline import FeatureUnion\n\n# # Models\n\n# from sklearn.linear_model import Lasso\n# from sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error\n\n# from sklearn.model_selection import train_test_split #training and testing data split\n# from sklearn import metrics #accuracy measure\n# from sklearn.metrics import confusion_matrix #for confusion matrix\n# from scipy.stats import reciprocal, uniform\n\n# from sklearn.model_selection import StratifiedKFold\n\n# # Cross-validation\n# from sklearn.model_selection import KFold #for K-fold cross validation\n# from sklearn.model_selection import cross_val_score #score evaluation\n# from sklearn.model_selection import cross_val_predict #prediction\n# from sklearn.model_selection import cross_validate\n\n# # GridSearchCV\n# from sklearn.model_selection import GridSearchCV\n# from sklearn.model_selection import RandomizedSearchCV\n\n# #Common data processors\n# from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n# from sklearn import feature_selection\n# from sklearn import model_selection\n# from sklearn import metrics\n# from sklearn.base import BaseEstimator, TransformerMixin\n# from sklearn.utils import check_array\n# from scipy import sparse",
      "rewrite-ns": 19156,
      "overhead-ns": 19156,
      "exec-ns": 69530,
      "total-ns": 88686,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# to make this notebook's output stable across runs\nnp.random.seed(123)\n# ALEX: remove GC code, plotting\n# gc.collect()\n# # To plot pretty figures\n# %matplotlib inline\n# plt.rcParams['axes.labelsize'] = 14\n# plt.rcParams['xtick.labelsize'] = 12\n# plt.rcParams['ytick.labelsize'] = 12",
      "rewrite-ns": 358491,
      "overhead-ns": 358491,
      "exec-ns": 244096,
      "total-ns": 602587,
      "patts-hit": {},
      "rewritten": "np.random.seed(123)\n"
    },
    {
      "raw": "#Reduce the memory usage - Inspired by Panchajanya Banerjee\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() / 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() / 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))\n    return df",
      "rewrite-ns": 12911250,
      "overhead-ns": 12911250,
      "exec-ns": 1986924,
      "total-ns": 14898174,
      "patts-hit": {},
      "rewritten": "def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() / 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8\n                    ).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np\n                    .int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np\n                    .int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np\n                    .int64).max:\n                    df[col] = df[col].astype(np.int64)\n            elif c_min > np.finfo(np.float16).min and c_max < np.finfo(np.\n                float16).max:\n                df[col] = df[col].astype(np.float16)\n            elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.\n                float32).max:\n                df[col] = df[col].astype(np.float32)\n            else:\n                df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() / 1024 ** 2\n    if verbose:\n        print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.\n            format(end_mem, 100 * (start_mem - end_mem) / start_mem))\n    return df\n"
    },
    {
      "raw": "train = reduce_mem_usage(pd.read_csv('./input/train.scaled.csv',parse_dates=[\"first_active_month\"]))\ntest = reduce_mem_usage(pd.read_csv('./input/test.scaled.csv', parse_dates=[\"first_active_month\"]))",
      "rewrite-ns": 1075817,
      "overhead-ns": 1075817,
      "exec-ns": 17091973,
      "total-ns": 18167790,
      "patts-hit": {},
      "rewritten": "train = reduce_mem_usage(pd.read_csv('./input/train.scaled.csv',\n    parse_dates=['first_active_month']))\ntest = reduce_mem_usage(pd.read_csv('./input/test.scaled.csv', parse_dates=\n    ['first_active_month']))\n"
    },
    {
      "raw": "train.shape",
      "rewrite-ns": 52730,
      "overhead-ns": 52730,
      "exec-ns": 834748,
      "total-ns": 887478,
      "patts-hit": {},
      "rewritten": "train.shape\n"
    },
    {
      "raw": "train.info()",
      "rewrite-ns": 76578,
      "overhead-ns": 76578,
      "exec-ns": 4381649,
      "total-ns": 4458227,
      "patts-hit": {},
      "rewritten": "train.info()\n"
    },
    {
      "raw": "# Now extract the month, year, day, weekday\ntrain[\"month\"] = train[\"first_active_month\"].dt.month\ntrain[\"year\"] = train[\"first_active_month\"].dt.year\n# ALEX: make notebook run\n# train['week'] = train[\"first_active_month\"].dt.weekofyear\ntrain['week'] = train[\"first_active_month\"].dt.isocalendar().week\ntrain['dayofweek'] = train['first_active_month'].dt.dayofweek\n# ALEX: make notebook run\n# train['days'] = (datetime.date(2018, 2, 1) - train['first_active_month'].dt.date).dt.days\ntrain['days'] = pd.to_timedelta((datetime.date(2018, 2, 1) - train['first_active_month'].dt.date)).dt.days\n\ntest[\"month\"] = test[\"first_active_month\"].dt.month\ntest[\"year\"] = test[\"first_active_month\"].dt.year\n# ALEX: make notebook run\n# test['week'] = test[\"first_active_month\"].dt.weekofyear\ntest['week'] = test[\"first_active_month\"].dt.isocalendar().week\ntest['dayofweek'] = test['first_active_month'].dt.dayofweek\n# ALEX: make notebook run\n# test['days'] = (datetime.date(2018, 2, 1) - test['first_active_month'].dt.date).dt.days\ntest['days'] = pd.to_timedelta(datetime.date(2018, 2, 1) - test['first_active_month'].dt.date).dt.days",
      "rewrite-ns": 5434242,
      "overhead-ns": 5434242,
      "exec-ns": 34317505,
      "total-ns": 39751747,
      "patts-hit": {},
      "rewritten": "train['month'] = train['first_active_month'].dt.month\ntrain['year'] = train['first_active_month'].dt.year\ntrain['week'] = train['first_active_month'].dt.isocalendar().week\ntrain['dayofweek'] = train['first_active_month'].dt.dayofweek\ntrain['days'] = pd.to_timedelta(datetime.date(2018, 2, 1) - train[\n    'first_active_month'].dt.date).dt.days\ntest['month'] = test['first_active_month'].dt.month\ntest['year'] = test['first_active_month'].dt.year\ntest['week'] = test['first_active_month'].dt.isocalendar().week\ntest['dayofweek'] = test['first_active_month'].dt.dayofweek\ntest['days'] = pd.to_timedelta(datetime.date(2018, 2, 1) - test[\n    'first_active_month'].dt.date).dt.days\n"
    },
    {
      "raw": "# Taking Reference from Other Kernels\ndef aggregate_transaction_hist(trans, prefix):  \n        \n    agg_func = {\n        'purchase_date' : ['max','min'],\n        'month_diff' : ['mean'],\n        'weekend' : ['sum', 'mean'],\n        'authorized_flag': ['sum', 'mean'],\n        'category_1': ['sum','mean'],\n        'purchase_amount': ['sum', 'mean', 'max', 'min', 'std'],\n        'installments': ['sum', 'mean', 'max', 'min', 'std'],  \n        #'merchant_id': ['nunique'],\n        'month_lag': ['max','min','mean','var'],\n        'month_diff' : ['mean'],\n        'card_id' : ['size'],\n        'month': ['nunique'],\n        'hour': ['nunique'],\n        'weekofyear': ['nunique'],\n        'dayofweek': ['nunique'],\n        'year': ['nunique'],\n        'subsector_id': ['nunique'],\n        'merchant_category_id' : ['nunique'],\n        'Christmas_Day_2017':['mean'],\n        #'Mothers_Day_2017':['mean'],\n        'fathers_day_2017':['mean'],\n        'Children_day_2017':['mean'],\n        'Black_Friday_2017':['mean'],\n        'Valentine_day_2017':['mean'],\n        'Mothers_Day_2018':['mean']\n    }\n    \n    agg_trans = trans.groupby(['card_id']).agg(agg_func)\n    agg_trans.columns = [prefix + '_'.join(col).strip() \n                           for col in agg_trans.columns.values]\n    agg_trans.reset_index(inplace=True)\n    \n    df = (trans.groupby('card_id')\n          .size()\n          .reset_index(name='{}transactions_count'.format(prefix)))\n    \n    agg_trans = pd.merge(df, agg_trans, on='card_id', how='left')\n    \n    return agg_trans",
      "rewrite-ns": 6175395,
      "overhead-ns": 6175395,
      "exec-ns": 1318411,
      "total-ns": 7493806,
      "patts-hit": {},
      "rewritten": "def aggregate_transaction_hist(trans, prefix):\n    agg_func = {'purchase_date': ['max', 'min'], 'month_diff': ['mean'],\n        'weekend': ['sum', 'mean'], 'authorized_flag': ['sum', 'mean'],\n        'category_1': ['sum', 'mean'], 'purchase_amount': ['sum', 'mean',\n        'max', 'min', 'std'], 'installments': ['sum', 'mean', 'max', 'min',\n        'std'], 'month_lag': ['max', 'min', 'mean', 'var'], 'month_diff': [\n        'mean'], 'card_id': ['size'], 'month': ['nunique'], 'hour': [\n        'nunique'], 'weekofyear': ['nunique'], 'dayofweek': ['nunique'],\n        'year': ['nunique'], 'subsector_id': ['nunique'],\n        'merchant_category_id': ['nunique'], 'Christmas_Day_2017': ['mean'],\n        'fathers_day_2017': ['mean'], 'Children_day_2017': ['mean'],\n        'Black_Friday_2017': ['mean'], 'Valentine_day_2017': ['mean'],\n        'Mothers_Day_2018': ['mean']}\n    agg_trans = trans.groupby(['card_id']).agg(agg_func)\n    agg_trans.columns = [(prefix + '_'.join(col).strip()) for col in\n        agg_trans.columns.values]\n    agg_trans.reset_index(inplace=True)\n    df = trans.groupby('card_id').size().reset_index(name=\n        '{}transactions_count'.format(prefix))\n    agg_trans = pd.merge(df, agg_trans, on='card_id', how='left')\n    return agg_trans\n"
    },
    {
      "raw": "transactions = reduce_mem_usage(pd.read_csv('./input/historical_transactions.scaled.csv'))\ntransactions['authorized_flag'] = transactions['authorized_flag'].map({'Y': 1, 'N': 0})\ntransactions['category_1'] = transactions['category_1'].map({'Y': 1, 'N': 0})",
      "rewrite-ns": 1656056,
      "overhead-ns": 1656056,
      "exec-ns": 1759076832,
      "total-ns": 1760732888,
      "patts-hit": {},
      "rewritten": "transactions = reduce_mem_usage(pd.read_csv(\n    './input/historical_transactions.scaled.csv'))\ntransactions['authorized_flag'] = transactions['authorized_flag'].map({'Y':\n    1, 'N': 0})\ntransactions['category_1'] = transactions['category_1'].map({'Y': 1, 'N': 0})\n"
    },
    {
      "raw": "#Feature Engineering - Adding new features inspired by Chau's first kernel\ntransactions['purchase_date'] = pd.to_datetime(transactions['purchase_date'])\ntransactions['year'] = transactions['purchase_date'].dt.year\n# ALEX: make notebook run\n# transactions['weekofyear'] = transactions['purchase_date'].dt.weekofyear\ntransactions['weekofyear'] = transactions['purchase_date'].dt.isocalendar().week\ntransactions['month'] = transactions['purchase_date'].dt.month\ntransactions['dayofweek'] = transactions['purchase_date'].dt.dayofweek\ntransactions['weekend'] = (transactions.purchase_date.dt.weekday >=5).astype(int)\ntransactions['hour'] = transactions['purchase_date'].dt.hour \ntransactions['month_diff'] = ((datetime.datetime.today() - transactions['purchase_date']).dt.days)//30\ntransactions['month_diff'] += transactions['month_lag']\n\n#impute missing values - This is now excluded.\ntransactions['category_2'] = transactions['category_2'].fillna(1.0,inplace=True)\ntransactions['category_3'] = transactions['category_3'].fillna('A',inplace=True)\ntransactions['merchant_id'] = transactions['merchant_id'].fillna('M_ID_00a6ca8a8a',inplace=True)\n# ALEX: remove GC code\n# gc.collect()",
      "rewrite-ns": 6108654,
      "overhead-ns": 6108654,
      "exec-ns": 992023033,
      "total-ns": 998131687,
      "patts-hit": {},
      "rewritten": "transactions['purchase_date'] = pd.to_datetime(transactions['purchase_date'])\ntransactions['year'] = transactions['purchase_date'].dt.year\ntransactions['weekofyear'] = transactions['purchase_date'].dt.isocalendar(\n    ).week\ntransactions['month'] = transactions['purchase_date'].dt.month\ntransactions['dayofweek'] = transactions['purchase_date'].dt.dayofweek\ntransactions['weekend'] = (transactions.purchase_date.dt.weekday >= 5).astype(\n    int)\ntransactions['hour'] = transactions['purchase_date'].dt.hour\ntransactions['month_diff'] = (datetime.datetime.today() - transactions[\n    'purchase_date']).dt.days // 30\ntransactions['month_diff'] += transactions['month_lag']\ntransactions['category_2'] = transactions['category_2'].fillna(1.0, inplace\n    =True)\ntransactions['category_3'] = transactions['category_3'].fillna('A', inplace\n    =True)\ntransactions['merchant_id'] = transactions['merchant_id'].fillna(\n    'M_ID_00a6ca8a8a', inplace=True)\n"
    },
    {
      "raw": "# ALEX: make notebook run\n# agg_func = {\n#         'mean': ['mean'],\n#     }\n# for col in ['category_2','category_3']:\n#     transactions[col+'_mean'] = transactions['purchase_amount'].groupby(transactions[col]).agg(agg_func)\nfor col in ['category_2','category_3']:\n    transactions[col+'_mean'] = transactions['purchase_amount'].groupby(transactions[col]).agg('mean')",
      "rewrite-ns": 1268575,
      "overhead-ns": 1268575,
      "exec-ns": 117673988,
      "total-ns": 118942563,
      "patts-hit": {},
      "rewritten": "for col in ['category_2', 'category_3']:\n    transactions[col + '_mean'] = transactions['purchase_amount'].groupby(\n        transactions[col]).agg('mean')\n"
    },
    {
      "raw": "# New Features with Key Shopping times considered in the dataset. if the purchase has been made within 60 days, it is considered as an influence\n#Christmas : December 25 2017\ntransactions['Christmas_Day_2017'] = (pd.to_datetime('2017-12-25') - transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n#Mothers Day: May 14 2017\n#transactions['Mothers_Day_2017'] = (pd.to_datetime('2017-05-04') - transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n#fathers day: August 13 2017\ntransactions['fathers_day_2017'] = (pd.to_datetime('2017-08-13') - transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n#Childrens day: October 12 2017\ntransactions['Children_day_2017'] = (pd.to_datetime('2017-10-12') - transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n#Black Friday : 24th November 2017\ntransactions['Black_Friday_2017'] = (pd.to_datetime('2017-11-24') - transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n#Valentines Day\ntransactions['Valentine_day_2017'] = (pd.to_datetime('2017-06-12') - transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n\n#2018\n#Mothers Day: May 13 2018\ntransactions['Mothers_Day_2018'] = (pd.to_datetime('2018-05-13') - transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n\n# ALEX: remove GC code\n# gc.collect()",
      "rewrite-ns": 8207790,
      "overhead-ns": 8207790,
      "exec-ns": 1968201148,
      "total-ns": 1976408938,
      "patts-hit": {},
      "rewritten": "transactions['Christmas_Day_2017'] = (pd.to_datetime('2017-12-25') -\n    transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x <\n    100 else 0)\ntransactions['fathers_day_2017'] = (pd.to_datetime('2017-08-13') -\n    transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x <\n    100 else 0)\ntransactions['Children_day_2017'] = (pd.to_datetime('2017-10-12') -\n    transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x <\n    100 else 0)\ntransactions['Black_Friday_2017'] = (pd.to_datetime('2017-11-24') -\n    transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x <\n    100 else 0)\ntransactions['Valentine_day_2017'] = (pd.to_datetime('2017-06-12') -\n    transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x <\n    100 else 0)\ntransactions['Mothers_Day_2018'] = (pd.to_datetime('2018-05-13') -\n    transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x <\n    100 else 0)\n"
    },
    {
      "raw": "merge_trans = aggregate_transaction_hist(transactions, prefix='hist_')\ndel transactions\n# ALEX: remove GC code\n# gc.collect()\ntrain = pd.merge(train, merge_trans, on='card_id',how='left')\ntest = pd.merge(test, merge_trans, on='card_id',how='left')\ndel merge_trans\n# ALEX: remove GC code\n# gc.collect()",
      "rewrite-ns": 1579220,
      "overhead-ns": 1579220,
      "exec-ns": 1117058806,
      "total-ns": 1118638026,
      "patts-hit": {},
      "rewritten": "merge_trans = aggregate_transaction_hist(transactions, prefix='hist_')\ndel transactions\ntrain = pd.merge(train, merge_trans, on='card_id', how='left')\ntest = pd.merge(test, merge_trans, on='card_id', how='left')\ndel merge_trans\n"
    },
    {
      "raw": "train.head(2)",
      "rewrite-ns": 137812,
      "overhead-ns": 137812,
      "exec-ns": 24783566,
      "total-ns": 24921378,
      "patts-hit": {},
      "rewritten": "train.head(2)\n"
    },
    {
      "raw": "#Feature Engineering - Adding new features inspired by Chau's first kernel\ntrain['hist_purchase_date_max'] = pd.to_datetime(train['hist_purchase_date_max'])\ntrain['hist_purchase_date_min'] = pd.to_datetime(train['hist_purchase_date_min'])\ntrain['hist_purchase_date_diff'] = (train['hist_purchase_date_max'] - train['hist_purchase_date_min']).dt.days\ntrain['hist_purchase_date_average'] = train['hist_purchase_date_diff']/train['hist_card_id_size']\ntrain['hist_purchase_date_uptonow'] = (datetime.datetime.today() - train['hist_purchase_date_max']).dt.days\ntrain['hist_first_buy'] = (train['hist_purchase_date_min'] - train['first_active_month']).dt.days\nfor feature in ['hist_purchase_date_max','hist_purchase_date_min']:\n    train[feature] = train[feature].astype(np.int64) * 1e-9\n",
      "rewrite-ns": 4285792,
      "overhead-ns": 4285792,
      "exec-ns": 5826126,
      "total-ns": 10111918,
      "patts-hit": {},
      "rewritten": "train['hist_purchase_date_max'] = pd.to_datetime(train[\n    'hist_purchase_date_max'])\ntrain['hist_purchase_date_min'] = pd.to_datetime(train[\n    'hist_purchase_date_min'])\ntrain['hist_purchase_date_diff'] = (train['hist_purchase_date_max'] - train\n    ['hist_purchase_date_min']).dt.days\ntrain['hist_purchase_date_average'] = train['hist_purchase_date_diff'] / train[\n    'hist_card_id_size']\ntrain['hist_purchase_date_uptonow'] = (datetime.datetime.today() - train[\n    'hist_purchase_date_max']).dt.days\ntrain['hist_first_buy'] = (train['hist_purchase_date_min'] - train[\n    'first_active_month']).dt.days\nfor feature in ['hist_purchase_date_max', 'hist_purchase_date_min']:\n    train[feature] = train[feature].astype(np.int64) * 1e-09\n"
    },
    {
      "raw": "#Feature Engineering - Adding new features inspired by Chau's first kernel\ntest['hist_purchase_date_max'] = pd.to_datetime(test['hist_purchase_date_max'])\ntest['hist_purchase_date_min'] = pd.to_datetime(test['hist_purchase_date_min'])\ntest['hist_purchase_date_diff'] = (test['hist_purchase_date_max'] - test['hist_purchase_date_min']).dt.days\ntest['hist_purchase_date_average'] = test['hist_purchase_date_diff']/test['hist_card_id_size']\ntest['hist_purchase_date_uptonow'] = (datetime.datetime.today() - test['hist_purchase_date_max']).dt.days\ntest['hist_first_buy'] = (test['hist_purchase_date_min'] - test['first_active_month']).dt.days\nfor feature in ['hist_purchase_date_max','hist_purchase_date_min']:\n    test[feature] = test[feature].astype(np.int64) * 1e-9",
      "rewrite-ns": 4212053,
      "overhead-ns": 4212053,
      "exec-ns": 5194180,
      "total-ns": 9406233,
      "patts-hit": {},
      "rewritten": "test['hist_purchase_date_max'] = pd.to_datetime(test['hist_purchase_date_max'])\ntest['hist_purchase_date_min'] = pd.to_datetime(test['hist_purchase_date_min'])\ntest['hist_purchase_date_diff'] = (test['hist_purchase_date_max'] - test[\n    'hist_purchase_date_min']).dt.days\ntest['hist_purchase_date_average'] = test['hist_purchase_date_diff'] / test[\n    'hist_card_id_size']\ntest['hist_purchase_date_uptonow'] = (datetime.datetime.today() - test[\n    'hist_purchase_date_max']).dt.days\ntest['hist_first_buy'] = (test['hist_purchase_date_min'] - test[\n    'first_active_month']).dt.days\nfor feature in ['hist_purchase_date_max', 'hist_purchase_date_min']:\n    test[feature] = test[feature].astype(np.int64) * 1e-09\n"
    },
    {
      "raw": "# Taking Reference from Other Kernels\ndef aggregate_transaction_new(trans, prefix):  \n        \n    agg_func = {\n        'purchase_date' : ['max','min'],\n        'month_diff' : ['mean'],\n        'weekend' : ['sum', 'mean'],\n        'authorized_flag': ['sum'],\n        'category_1': ['sum','mean'],\n        'purchase_amount': ['sum', 'mean', 'max', 'min', 'std'],\n        'installments': ['sum', 'mean', 'max', 'min', 'std'],  \n        #'merchant_id': ['nunique'],\n        'month_lag': ['max','min','mean','var'],\n        'month_diff' : ['mean'],\n        'card_id' : ['size'],\n        'month': ['nunique'],\n        'hour': ['nunique'],\n        'weekofyear': ['nunique'],\n        'dayofweek': ['nunique'],\n        'year': ['nunique'],\n        'subsector_id': ['nunique'],\n        'merchant_category_id' : ['nunique'],\n        'Christmas_Day_2017':['mean'],\n        #'Mothers_Day_2017':['mean'],\n        'fathers_day_2017':['mean'],\n        'Children_day_2017':['mean'],\n        'Black_Friday_2017':['mean'],\n        'Valentine_Day_2017' : ['mean'],\n        'Mothers_Day_2018':['mean']\n    }\n    \n    agg_trans = trans.groupby(['card_id']).agg(agg_func)\n    agg_trans.columns = [prefix + '_'.join(col).strip() \n                           for col in agg_trans.columns.values]\n    agg_trans.reset_index(inplace=True)\n    \n    df = (trans.groupby('card_id')\n          .size()\n          .reset_index(name='{}transactions_count'.format(prefix)))\n    \n    agg_trans = pd.merge(df, agg_trans, on='card_id', how='left')\n    \n    return agg_trans",
      "rewrite-ns": 6204733,
      "overhead-ns": 6204733,
      "exec-ns": 1304399,
      "total-ns": 7509132,
      "patts-hit": {},
      "rewritten": "def aggregate_transaction_new(trans, prefix):\n    agg_func = {'purchase_date': ['max', 'min'], 'month_diff': ['mean'],\n        'weekend': ['sum', 'mean'], 'authorized_flag': ['sum'],\n        'category_1': ['sum', 'mean'], 'purchase_amount': ['sum', 'mean',\n        'max', 'min', 'std'], 'installments': ['sum', 'mean', 'max', 'min',\n        'std'], 'month_lag': ['max', 'min', 'mean', 'var'], 'month_diff': [\n        'mean'], 'card_id': ['size'], 'month': ['nunique'], 'hour': [\n        'nunique'], 'weekofyear': ['nunique'], 'dayofweek': ['nunique'],\n        'year': ['nunique'], 'subsector_id': ['nunique'],\n        'merchant_category_id': ['nunique'], 'Christmas_Day_2017': ['mean'],\n        'fathers_day_2017': ['mean'], 'Children_day_2017': ['mean'],\n        'Black_Friday_2017': ['mean'], 'Valentine_Day_2017': ['mean'],\n        'Mothers_Day_2018': ['mean']}\n    agg_trans = trans.groupby(['card_id']).agg(agg_func)\n    agg_trans.columns = [(prefix + '_'.join(col).strip()) for col in\n        agg_trans.columns.values]\n    agg_trans.reset_index(inplace=True)\n    df = trans.groupby('card_id').size().reset_index(name=\n        '{}transactions_count'.format(prefix))\n    agg_trans = pd.merge(df, agg_trans, on='card_id', how='left')\n    return agg_trans\n"
    },
    {
      "raw": "# Now extract the data from the new transactions\nnew_transactions = reduce_mem_usage(pd.read_csv('./input/new_merchant_transactions.scaled.csv'))\nnew_transactions['authorized_flag'] = new_transactions['authorized_flag'].map({'Y': 1, 'N': 0})\nnew_transactions['category_1'] = new_transactions['category_1'].map({'Y': 1, 'N': 0})",
      "rewrite-ns": 1666789,
      "overhead-ns": 1666789,
      "exec-ns": 111836721,
      "total-ns": 113503510,
      "patts-hit": {},
      "rewritten": "new_transactions = reduce_mem_usage(pd.read_csv(\n    './input/new_merchant_transactions.scaled.csv'))\nnew_transactions['authorized_flag'] = new_transactions['authorized_flag'].map({\n    'Y': 1, 'N': 0})\nnew_transactions['category_1'] = new_transactions['category_1'].map({'Y': 1,\n    'N': 0})\n"
    },
    {
      "raw": "#Feature Engineering - Adding new features inspired by Chau's first kernel\nnew_transactions['purchase_date'] = pd.to_datetime(new_transactions['purchase_date'])\nnew_transactions['year'] = new_transactions['purchase_date'].dt.year\n# ALEX: make notebook run\n# new_transactions['weekofyear'] = new_transactions['purchase_date'].dt.weekofyear\nnew_transactions['weekofyear'] = new_transactions['purchase_date'].dt.isocalendar().week\nnew_transactions['month'] = new_transactions['purchase_date'].dt.month\nnew_transactions['dayofweek'] = new_transactions['purchase_date'].dt.dayofweek\nnew_transactions['weekend'] = (new_transactions.purchase_date.dt.weekday >=5).astype(int)\nnew_transactions['hour'] = new_transactions['purchase_date'].dt.hour \nnew_transactions['month_diff'] = ((datetime.datetime.today() - new_transactions['purchase_date']).dt.days)//30\nnew_transactions['month_diff'] += new_transactions['month_lag']\n\n#impute missing values\nnew_transactions['category_2'] = new_transactions['category_2'].fillna(1.0,inplace=True)\nnew_transactions['category_3'] = new_transactions['category_3'].fillna('A',inplace=True)\nnew_transactions['merchant_id'] = new_transactions['merchant_id'].fillna('M_ID_00a6ca8a8a',inplace=True)\n\n# New Features with Key Shopping times considered in the dataset. if the purchase has been made within 60 days, \n# it is considered as an influence\n\n#Christmas : December 25 2017\nnew_transactions['Christmas_Day_2017'] = (pd.to_datetime('2017-12-25') - new_transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n#Mothers Day: May 14 2017 - Was not significant in Feature Importance\n#new_transactions['Mothers_Day_2017'] = (pd.to_datetime('2017-06-04') - new_transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n#fathers day: August 13 2017\nnew_transactions['fathers_day_2017'] = (pd.to_datetime('2017-08-13') - new_transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n#Childrens day: October 12 2017\nnew_transactions['Children_day_2017'] = (pd.to_datetime('2017-10-12') - new_transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n#Valentine's Day : 12th June, 2017\nnew_transactions['Valentine_Day_2017'] = (pd.to_datetime('2017-06-12') - new_transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n#Black Friday : 24th November 2017\nnew_transactions['Black_Friday_2017'] = (pd.to_datetime('2017-11-24') - new_transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n\n#2018\n#Mothers Day: May 13 2018\nnew_transactions['Mothers_Day_2018'] = (pd.to_datetime('2018-05-13') - new_transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and x < 100 else 0)\n\n# ALEX: make notebook run\n# agg_func = {\n#         'mean': ['mean'],\n#     }\n# for col in ['category_2','category_3']:\n#     new_transactions[col+'_mean'] = new_transactions['purchase_amount'].groupby(new_transactions[col]).agg(agg_func)\nfor col in ['category_2','category_3']:\n    new_transactions[col+'_mean'] = new_transactions['purchase_amount'].groupby(new_transactions[col]).agg('mean')\n\n# ALEX: remove GC code\n# gc.collect()",
      "rewrite-ns": 14779354,
      "overhead-ns": 14779354,
      "exec-ns": 192489338,
      "total-ns": 207268692,
      "patts-hit": {},
      "rewritten": "new_transactions['purchase_date'] = pd.to_datetime(new_transactions[\n    'purchase_date'])\nnew_transactions['year'] = new_transactions['purchase_date'].dt.year\nnew_transactions['weekofyear'] = new_transactions['purchase_date'\n    ].dt.isocalendar().week\nnew_transactions['month'] = new_transactions['purchase_date'].dt.month\nnew_transactions['dayofweek'] = new_transactions['purchase_date'].dt.dayofweek\nnew_transactions['weekend'] = (new_transactions.purchase_date.dt.weekday >= 5\n    ).astype(int)\nnew_transactions['hour'] = new_transactions['purchase_date'].dt.hour\nnew_transactions['month_diff'] = (datetime.datetime.today() -\n    new_transactions['purchase_date']).dt.days // 30\nnew_transactions['month_diff'] += new_transactions['month_lag']\nnew_transactions['category_2'] = new_transactions['category_2'].fillna(1.0,\n    inplace=True)\nnew_transactions['category_3'] = new_transactions['category_3'].fillna('A',\n    inplace=True)\nnew_transactions['merchant_id'] = new_transactions['merchant_id'].fillna(\n    'M_ID_00a6ca8a8a', inplace=True)\nnew_transactions['Christmas_Day_2017'] = (pd.to_datetime('2017-12-25') -\n    new_transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and\n    x < 100 else 0)\nnew_transactions['fathers_day_2017'] = (pd.to_datetime('2017-08-13') -\n    new_transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and\n    x < 100 else 0)\nnew_transactions['Children_day_2017'] = (pd.to_datetime('2017-10-12') -\n    new_transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and\n    x < 100 else 0)\nnew_transactions['Valentine_Day_2017'] = (pd.to_datetime('2017-06-12') -\n    new_transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and\n    x < 100 else 0)\nnew_transactions['Black_Friday_2017'] = (pd.to_datetime('2017-11-24') -\n    new_transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and\n    x < 100 else 0)\nnew_transactions['Mothers_Day_2018'] = (pd.to_datetime('2018-05-13') -\n    new_transactions['purchase_date']).dt.days.apply(lambda x: x if x > 0 and\n    x < 100 else 0)\nfor col in ['category_2', 'category_3']:\n    new_transactions[col + '_mean'] = new_transactions['purchase_amount'\n        ].groupby(new_transactions[col]).agg('mean')\n"
    },
    {
      "raw": "merge_new = aggregate_transaction_new(new_transactions, prefix='new_')\ndel new_transactions\n# ALEX: remove GC code\n# gc.collect()\n\ntrain = pd.merge(train, merge_new, on='card_id',how='left')\ntest = pd.merge(test, merge_new, on='card_id',how='left')\ndel merge_new\n\n# ALEX: remove GC code\n# gc.collect()",
      "rewrite-ns": 1529125,
      "overhead-ns": 1529125,
      "exec-ns": 117054819,
      "total-ns": 118583944,
      "patts-hit": {},
      "rewritten": "merge_new = aggregate_transaction_new(new_transactions, prefix='new_')\ndel new_transactions\ntrain = pd.merge(train, merge_new, on='card_id', how='left')\ntest = pd.merge(test, merge_new, on='card_id', how='left')\ndel merge_new\n"
    },
    {
      "raw": "#Feature Engineering - Adding new features inspired by Chau's first kernel\ntrain['new_purchase_date_max'] = pd.to_datetime(train['new_purchase_date_max'])\ntrain['new_purchase_date_min'] = pd.to_datetime(train['new_purchase_date_min'])\ntrain['new_purchase_date_diff'] = (train['new_purchase_date_max'] - train['new_purchase_date_min']).dt.days\ntrain['new_purchase_date_average'] = train['new_purchase_date_diff']/train['new_card_id_size']\ntrain['new_purchase_date_uptonow'] = (datetime.datetime.today() - train['new_purchase_date_max']).dt.days\ntrain['new_first_buy'] = (train['new_purchase_date_min'] - train['first_active_month']).dt.days\nfor feature in ['new_purchase_date_max','new_purchase_date_min']:\n    train[feature] = train[feature].astype(np.int64) * 1e-9\n\n#Feature Engineering - Adding new features inspired by Chau's first kernel\ntest['new_purchase_date_max'] = pd.to_datetime(test['new_purchase_date_max'])\ntest['new_purchase_date_min'] = pd.to_datetime(test['new_purchase_date_min'])\ntest['new_purchase_date_diff'] = (test['new_purchase_date_max'] - test['new_purchase_date_min']).dt.days\ntest['new_purchase_date_average'] = test['new_purchase_date_diff']/test['new_card_id_size']\ntest['new_purchase_date_uptonow'] = (datetime.datetime.today() - test['new_purchase_date_max']).dt.days\ntest['new_first_buy'] = (test['new_purchase_date_min'] - test['first_active_month']).dt.days\nfor feature in ['new_purchase_date_max','new_purchase_date_min']:\n    test[feature] = test[feature].astype(np.int64) * 1e-9\n    \n#added new feature - Interactive\ntrain['card_id_total'] = train['new_card_id_size'] + train['hist_card_id_size']\ntrain['purchase_amount_total'] = train['new_purchase_amount_sum'] + train['hist_purchase_amount_sum']\n\ntest['card_id_total'] = test['new_card_id_size'] + test['hist_card_id_size']\ntest['purchase_amount_total'] = test['new_purchase_amount_sum'] + test['hist_purchase_amount_sum']\n\n# ALEX: remove GC code\n# gc.collect()",
      "rewrite-ns": 10291309,
      "overhead-ns": 10291309,
      "exec-ns": 11893455,
      "total-ns": 22184764,
      "patts-hit": {},
      "rewritten": "train['new_purchase_date_max'] = pd.to_datetime(train['new_purchase_date_max'])\ntrain['new_purchase_date_min'] = pd.to_datetime(train['new_purchase_date_min'])\ntrain['new_purchase_date_diff'] = (train['new_purchase_date_max'] - train[\n    'new_purchase_date_min']).dt.days\ntrain['new_purchase_date_average'] = train['new_purchase_date_diff'] / train[\n    'new_card_id_size']\ntrain['new_purchase_date_uptonow'] = (datetime.datetime.today() - train[\n    'new_purchase_date_max']).dt.days\ntrain['new_first_buy'] = (train['new_purchase_date_min'] - train[\n    'first_active_month']).dt.days\nfor feature in ['new_purchase_date_max', 'new_purchase_date_min']:\n    train[feature] = train[feature].astype(np.int64) * 1e-09\ntest['new_purchase_date_max'] = pd.to_datetime(test['new_purchase_date_max'])\ntest['new_purchase_date_min'] = pd.to_datetime(test['new_purchase_date_min'])\ntest['new_purchase_date_diff'] = (test['new_purchase_date_max'] - test[\n    'new_purchase_date_min']).dt.days\ntest['new_purchase_date_average'] = test['new_purchase_date_diff'] / test[\n    'new_card_id_size']\ntest['new_purchase_date_uptonow'] = (datetime.datetime.today() - test[\n    'new_purchase_date_max']).dt.days\ntest['new_first_buy'] = (test['new_purchase_date_min'] - test[\n    'first_active_month']).dt.days\nfor feature in ['new_purchase_date_max', 'new_purchase_date_min']:\n    test[feature] = test[feature].astype(np.int64) * 1e-09\ntrain['card_id_total'] = train['new_card_id_size'] + train['hist_card_id_size']\ntrain['purchase_amount_total'] = train['new_purchase_amount_sum'] + train[\n    'hist_purchase_amount_sum']\ntest['card_id_total'] = test['new_card_id_size'] + test['hist_card_id_size']\ntest['purchase_amount_total'] = test['new_purchase_amount_sum'] + test[\n    'hist_purchase_amount_sum']\n"
    },
    {
      "raw": "# Now check the shape of Train and Test Data\ntrain.shape",
      "rewrite-ns": 63992,
      "overhead-ns": 63992,
      "exec-ns": 536334,
      "total-ns": 600326,
      "patts-hit": {},
      "rewritten": "train.shape\n"
    },
    {
      "raw": "test.shape",
      "rewrite-ns": 50423,
      "overhead-ns": 50423,
      "exec-ns": 453293,
      "total-ns": 503716,
      "patts-hit": {},
      "rewritten": "test.shape\n"
    },
    {
      "raw": "train.head(5)",
      "rewrite-ns": 95078,
      "overhead-ns": 95078,
      "exec-ns": 39255371,
      "total-ns": 39350449,
      "patts-hit": {},
      "rewritten": "train.head(5)\n"
    },
    {
      "raw": "#Check for missing values in training set\nnulls = np.sum(train.isnull())\nnullcols = nulls.loc[(nulls != 0)]\ndtypes = train.dtypes\ndtypes2 = dtypes.loc[(nulls != 0)]\ninfo = pd.concat([nullcols, dtypes2], axis=1).sort_values(by=0, ascending=False)\n#print(info)\n#print(\"There are\", len(nullcols), \"columns with missing values in data set\")",
      "rewrite-ns": 2172012,
      "overhead-ns": 2172012,
      "exec-ns": 5990273,
      "total-ns": 8162285,
      "patts-hit": {},
      "rewritten": "nulls = np.sum(train.isnull())\nnullcols = nulls.loc[nulls != 0]\ndtypes = train.dtypes\ndtypes2 = dtypes.loc[nulls != 0]\ninfo = pd.concat([nullcols, dtypes2], axis=1).sort_values(by=0, ascending=False\n    )\n"
    },
    {
      "raw": "#Check for missing values in training set\nnulls = np.sum(test.isnull())\nnullcols = nulls.loc[(nulls != 0)]\ndtypes = test.dtypes\ndtypes2 = dtypes.loc[(nulls != 0)]\ninfo = pd.concat([nullcols, dtypes2], axis=1).sort_values(by=0, ascending=False)\n#print(info)\n#print(\"There are\", len(nullcols), \"columns with missing values in test set\")",
      "rewrite-ns": 2106080,
      "overhead-ns": 2106080,
      "exec-ns": 5325272,
      "total-ns": 7431352,
      "patts-hit": {},
      "rewritten": "nulls = np.sum(test.isnull())\nnullcols = nulls.loc[nulls != 0]\ndtypes = test.dtypes\ndtypes2 = dtypes.loc[nulls != 0]\ninfo = pd.concat([nullcols, dtypes2], axis=1).sort_values(by=0, ascending=False\n    )\n"
    },
    {
      "raw": "numeric_dtypes = ['float64']\nnumerics = []\nfor i in train.columns:\n    if train[i].dtype in numeric_dtypes: \n        numerics.append(i)\n        \n#train.update(train[numerics].fillna(0))",
      "rewrite-ns": 1177229,
      "overhead-ns": 1177229,
      "exec-ns": 1800889,
      "total-ns": 2978118,
      "patts-hit": {},
      "rewritten": "numeric_dtypes = ['float64']\nnumerics = []\nfor i in train.columns:\n    if train[i].dtype in numeric_dtypes:\n        numerics.append(i)\n"
    },
    {
      "raw": "numeric_dtypes = ['float64']\nnumerics = []\nfor i in test.columns:\n    if test[i].dtype in numeric_dtypes: \n        numerics.append(i)\n        \n#test.update(test[numerics].fillna(0))",
      "rewrite-ns": 1159273,
      "overhead-ns": 1159273,
      "exec-ns": 1776853,
      "total-ns": 2936126,
      "patts-hit": {},
      "rewritten": "numeric_dtypes = ['float64']\nnumerics = []\nfor i in test.columns:\n    if test[i].dtype in numeric_dtypes:\n        numerics.append(i)\n"
    },
    {
      "raw": "# Remove the Outliers if any \ntrain['outliers'] = 0\ntrain.loc[train['target'] < -30, 'outliers'] = 1\ntrain['outliers'].value_counts()",
      "rewrite-ns": 1194405,
      "overhead-ns": 1194405,
      "exec-ns": 1701942,
      "total-ns": 2896347,
      "patts-hit": {},
      "rewritten": "train['outliers'] = 0\ntrain.loc[train['target'] < -30, 'outliers'] = 1\ntrain['outliers'].value_counts()\n"
    },
    {
      "raw": "for features in ['feature_1','feature_2','feature_3']:\n    order_label = train.groupby([features])['outliers'].mean()\n    train[features] = train[features].map(order_label)\n    test[features] =  test[features].map(order_label)",
      "rewrite-ns": 1771847,
      "overhead-ns": 1771847,
      "exec-ns": 3312803,
      "total-ns": 5084650,
      "patts-hit": {},
      "rewritten": "for features in ['feature_1', 'feature_2', 'feature_3']:\n    order_label = train.groupby([features])['outliers'].mean()\n    train[features] = train[features].map(order_label)\n    test[features] = test[features].map(order_label)\n"
    },
    {
      "raw": "# Get the X and Y\ndf_train_columns = [c for c in train.columns if c not in ['card_id', 'first_active_month', 'outliers']]\ndf_test_columns = [c for c in train.columns if c not in ['card_id', 'first_active_month','target','outliers']]\n",
      "rewrite-ns": 1371469,
      "overhead-ns": 1371469,
      "exec-ns": 422706,
      "total-ns": 1794175,
      "patts-hit": {},
      "rewritten": "df_train_columns = [c for c in train.columns if c not in ['card_id',\n    'first_active_month', 'outliers']]\ndf_test_columns = [c for c in train.columns if c not in ['card_id',\n    'first_active_month', 'target', 'outliers']]\n"
    },
    {
      "raw": "train['fold'] = 0\n# ALEX: remove ML code\n# folds = StratifiedKFold(n_splits=5, shuffle=True, random_state=1974)\n\n# for fold_, (trn_idx, val_idx) in enumerate(folds.split(train,train['outliers'].values)):\n#     train['fold'].iloc[val_idx] = fold_\n_ = train['outliers'].values\n    \n\n",
      "rewrite-ns": 562186,
      "overhead-ns": 562186,
      "exec-ns": 490712,
      "total-ns": 1052898,
      "patts-hit": {},
      "rewritten": "train['fold'] = 0\n_ = train['outliers'].values\n"
    },
    {
      "raw": "df_train_columns.append('fold')",
      "rewrite-ns": 305016,
      "overhead-ns": 305016,
      "exec-ns": 197686,
      "total-ns": 502702,
      "patts-hit": {},
      "rewritten": "df_train_columns.append('fold')\n"
    },
    {
      "raw": "train.head(20)",
      "rewrite-ns": 82512,
      "overhead-ns": 82512,
      "exec-ns": 43233118,
      "total-ns": 43315630,
      "patts-hit": {},
      "rewritten": "train.head(20)\n"
    },
    {
      "raw": "train[df_train_columns].to_csv('new_train.csv', index=False)\ntest[df_test_columns].to_csv('new_test.csv', index=False)\ntrain[['card_id', 'outliers']].to_csv('outliers', index=False)",
      "rewrite-ns": 1313625,
      "overhead-ns": 1313625,
      "exec-ns": 303506371,
      "total-ns": 304819996,
      "patts-hit": {},
      "rewritten": "train[df_train_columns].to_csv('new_train.csv', index=False)\ntest[df_test_columns].to_csv('new_test.csv', index=False)\ntrain[['card_id', 'outliers']].to_csv('outliers', index=False)\n"
    },
    {
      "raw": "",
      "rewrite-ns": 20720,
      "overhead-ns": 20720,
      "exec-ns": 96652,
      "total-ns": 117372,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 6.995109952,
  "max-disk-in-mb": 0
}