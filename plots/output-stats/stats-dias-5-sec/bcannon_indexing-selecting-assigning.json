{
  "max-mem-in-mb": 679,
  "max-mem-in-mb2": 1042,
  "cells": [
    {
      "raw": "# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\n# ALEX: remove plotting\n# import seaborn as sns\n\nreviews = pd.read_csv(\"./input/winemag-data-130k-v2.scaled.csv\", index_col=0)\n\n\ndef check_q1(ans):\n    expected = reviews.description\n    return ans.equals(expected)\n\n\ndef answer_q1():\n    print(\"\"\"reviews.description\"\"\")\n\n\ndef check_q2(ans):\n    expected = reviews.description[0]\n    return ans == expected\n\n\ndef answer_q2():\n    print(\"\"\"reviews.description[0]\"\"\")\n\n\ndef check_q3(ans):\n    expected = reviews.iloc[0]\n    return ans.equals(expected)\n\n\ndef answer_q3():\n    print(\"\"\"reviews.iloc[0]\"\"\")\n\n\ndef check_q4(ans):\n    expected = reviews.iloc[0:10, 1]\n    return ans.equals(expected)\n\n\ndef answer_q4():\n    print(\"\"\"reviews.iloc[0:10, 1]\"\"\")\n\n\ndef check_q5(ans):\n    expected = reviews.iloc[[1, 2, 3, 5, 8]]\n    return ans.equals(expected)\n\n\ndef answer_q5():\n    print(\"\"\"reviews.iloc[[1, 2, 3, 5, 8]]\"\"\")\n\n\ndef check_q6(ans):\n    expected = reviews.loc[[0, 1, 10, 100], ['country', 'province', 'region_1', 'region_2']]\n    return ans.equals(expected)\n\n\ndef answer_q6():\n    print(\"\"\"reviews.loc[[0, 1, 10, 100], ['country', 'province', 'region_1', 'region_2']]\"\"\")\n\n\ndef check_q7(ans):\n    expected = reviews.loc[0:100, ['country', 'variety']]\n    return ans.equals(expected)\n\n\ndef answer_q7():\n    print(\"\"\"reviews.loc[0:100, ['country', 'variety']]\"\"\")\n\n\ndef check_q8(ans):\n    expected = reviews.loc[reviews.country == 'Italy']\n    return ans.equals(expected)\n\n\ndef answer_q8():\n    print(\"\"\"reviews.loc[reviews.country == 'Italy']\"\"\")\n\n\ndef check_q9(ans):\n    expected = reviews.loc[reviews.region_2.notnull()]\n    return ans.head().equals(expected.head())\n\n\ndef answer_q9():\n    print(\"\"\"reviews.loc[reviews.region_2.notnull()]\"\"\")\n\n\ndef check_q10(ans):\n    expected = reviews.points\n# ALEX: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q10():\n    print(\"\"\"reviews.points\"\"\")\n\n\ndef check_q11(ans):\n    expected = reviews.loc[:1000, 'points']\n# ALEX: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q11():\n    print(\"\"\"reviews.loc[:1000, 'points']\"\"\")\n\n\ndef check_q12(ans):\n    expected = reviews.iloc[-1000:, 3]\n# ALEX: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q12():\n    print(\"\"\"reviews.iloc[-1000:, 3]\"\"\")\n\n\ndef check_q13(ans):\n    expected = reviews[reviews.country == \"Italy\"].points\n# ALEX: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q13():\n    print(\"\"\"reviews[reviews.country == \"Italy\"].points\"\"\")\n\n\ndef check_q14(ans):\n    expected = reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country\n# ALEX: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q14():\n    print(\"\"\"reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country\"\"\")\n\nreviews = pd.read_csv(\"./input/winemag-data-130k-v2.scaled.csv\", index_col=0)\npd.set_option(\"display.max_rows\", 5)",
      "rewrite-ns": 24008454,
      "overhead-ns": 24008454,
      "exec-ns": 6490685321,
      "total-ns": 6514693775,
      "patts-hit": {},
      "rewritten": "exec(os.environ['IREWR_IMPORTS'])\nreviews = pd.read_csv('./input/winemag-data-130k-v2.scaled.csv', index_col=0)\ndef check_q1(ans):\n    expected = reviews.description\n    return ans.equals(expected)\ndef answer_q1():\n    print('reviews.description')\ndef check_q2(ans):\n    expected = reviews.description[0]\n    return ans == expected\ndef answer_q2():\n    print('reviews.description[0]')\ndef check_q3(ans):\n    expected = reviews.iloc[0]\n    return ans.equals(expected)\ndef answer_q3():\n    print('reviews.iloc[0]')\ndef check_q4(ans):\n    expected = reviews.iloc[0:10, 1]\n    return ans.equals(expected)\ndef answer_q4():\n    print('reviews.iloc[0:10, 1]')\ndef check_q5(ans):\n    expected = reviews.iloc[[1, 2, 3, 5, 8]]\n    return ans.equals(expected)\ndef answer_q5():\n    print('reviews.iloc[[1, 2, 3, 5, 8]]')\ndef check_q6(ans):\n    expected = reviews.loc[[0, 1, 10, 100], ['country', 'province',\n        'region_1', 'region_2']]\n    return ans.equals(expected)\ndef answer_q6():\n    print(\n        \"reviews.loc[[0, 1, 10, 100], ['country', 'province', 'region_1', 'region_2']]\"\n        )\ndef check_q7(ans):\n    expected = reviews.loc[0:100, ['country', 'variety']]\n    return ans.equals(expected)\ndef answer_q7():\n    print(\"reviews.loc[0:100, ['country', 'variety']]\")\ndef check_q8(ans):\n    expected = reviews.loc[reviews.country == 'Italy']\n    return ans.equals(expected)\ndef answer_q8():\n    print(\"reviews.loc[reviews.country == 'Italy']\")\ndef check_q9(ans):\n    expected = reviews.loc[reviews.region_2.notnull()]\n    return ans.head().equals(expected.head())\ndef answer_q9():\n    print('reviews.loc[reviews.region_2.notnull()]')\ndef check_q10(ans):\n    expected = reviews.points\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q10():\n    print('reviews.points')\ndef check_q11(ans):\n    expected = reviews.loc[:1000, 'points']\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q11():\n    print(\"reviews.loc[:1000, 'points']\")\ndef check_q12(ans):\n    expected = reviews.iloc[-1000:, 3]\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q12():\n    print('reviews.iloc[-1000:, 3]')\ndef check_q13(ans):\n    expected = reviews[reviews.country == 'Italy'].points\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q13():\n    print('reviews[reviews.country == \"Italy\"].points')\ndef check_q14(ans):\n    expected = reviews[reviews.country.isin(['Italy', 'France']) & (reviews\n        .points >= 90)].country\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q14():\n    print(\n        'reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country'\n        )\nreviews = pd.read_csv('./input/winemag-data-130k-v2.scaled.csv', index_col=0)\npd.set_option('display.max_rows', 5)\n"
    },
    {
      "raw": "reviews.head()",
      "rewrite-ns": 175472,
      "overhead-ns": 175472,
      "exec-ns": 10550365,
      "total-ns": 10725837,
      "patts-hit": {},
      "rewritten": "reviews.head()\n"
    },
    {
      "raw": "check_q1(pd.DataFrame())",
      "rewrite-ns": 386322,
      "overhead-ns": 386322,
      "exec-ns": 690921,
      "total-ns": 1077243,
      "patts-hit": {},
      "rewritten": "check_q1(pd.DataFrame())\n"
    },
    {
      "raw": "reviews.filter(items=[\"description\"])",
      "rewrite-ns": 407213,
      "overhead-ns": 407213,
      "exec-ns": 11247067,
      "total-ns": 11654280,
      "patts-hit": {},
      "rewritten": "reviews.filter(items=['description'])\n"
    },
    {
      "raw": "reviews.at[0,\"description\"]",
      "rewrite-ns": 427264,
      "overhead-ns": 427264,
      "exec-ns": 9927117,
      "total-ns": 10354381,
      "patts-hit": {},
      "rewritten": "reviews.at[0, 'description']\n"
    },
    {
      "raw": "reviews.loc[0]",
      "rewrite-ns": 311263,
      "overhead-ns": 311263,
      "exec-ns": 1167009,
      "total-ns": 1478272,
      "patts-hit": {},
      "rewritten": "reviews.loc[0]\n"
    },
    {
      "raw": "reviews.loc[0:9].filter(items=[\"description\"])",
      "rewrite-ns": 614850,
      "overhead-ns": 614850,
      "exec-ns": 7988276,
      "total-ns": 8603126,
      "patts-hit": {},
      "rewritten": "reviews.loc[0:9].filter(items=['description'])\n"
    },
    {
      "raw": "reviews.loc[[1,2,3,5,8]]",
      "rewrite-ns": 498097,
      "overhead-ns": 498097,
      "exec-ns": 8336537,
      "total-ns": 8834634,
      "patts-hit": {},
      "rewritten": "reviews.loc[[1, 2, 3, 5, 8]]\n"
    },
    {
      "raw": "reviews.loc[[0,1,10,100]].filter([\"country\",\"province\",\"region_1\",\"region_2\"])",
      "rewrite-ns": 794157,
      "overhead-ns": 794157,
      "exec-ns": 3815494,
      "total-ns": 4609651,
      "patts-hit": {},
      "rewritten": "reviews.loc[[0, 1, 10, 100]].filter(['country', 'province', 'region_1',\n    'region_2'])\n"
    },
    {
      "raw": "reviews.loc[0:99].filter([\"country\",\"variety\"])",
      "rewrite-ns": 602047,
      "overhead-ns": 602047,
      "exec-ns": 3554721,
      "total-ns": 4156768,
      "patts-hit": {},
      "rewritten": "reviews.loc[0:99].filter(['country', 'variety'])\n"
    },
    {
      "raw": "reviews.loc[reviews.country == 'Italy']",
      "rewrite-ns": 458082,
      "overhead-ns": 458082,
      "exec-ns": 48198128,
      "total-ns": 48656210,
      "patts-hit": {},
      "rewritten": "reviews.loc[reviews.country == 'Italy']\n"
    },
    {
      "raw": "reviews.loc[reviews.region_2 != 'NaN']",
      "rewrite-ns": 502835,
      "overhead-ns": 502835,
      "exec-ns": 83434422,
      "total-ns": 83937257,
      "patts-hit": {},
      "rewritten": "reviews.loc[reviews.region_2 != 'NaN']\n"
    },
    {
      "raw": "reviews.filter(items=[\"points\"])",
      "rewrite-ns": 455200,
      "overhead-ns": 455200,
      "exec-ns": 3999607,
      "total-ns": 4454807,
      "patts-hit": {},
      "rewritten": "reviews.filter(items=['points'])\n"
    },
    {
      "raw": "reviews.points.loc[0:999]",
      "rewrite-ns": 454202,
      "overhead-ns": 454202,
      "exec-ns": 4274159,
      "total-ns": 4728361,
      "patts-hit": {},
      "rewritten": "reviews.points.loc[0:999]\n"
    },
    {
      "raw": "reviews.points.loc[reviews.shape[0]-1000:reviews.shape[0]]",
      "rewrite-ns": 814588,
      "overhead-ns": 814588,
      "exec-ns": 21107580,
      "total-ns": 21922168,
      "patts-hit": {},
      "rewritten": "reviews.points.loc[reviews.shape[0] - 1000:reviews.shape[0]]\n"
    },
    {
      "raw": "reviews.points.loc[reviews.country == 'Italy']",
      "rewrite-ns": 573119,
      "overhead-ns": 573119,
      "exec-ns": 27565068,
      "total-ns": 28138187,
      "patts-hit": {},
      "rewritten": "reviews.points.loc[reviews.country == 'Italy']\n"
    },
    {
      "raw": "reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country",
      "rewrite-ns": 917367,
      "overhead-ns": 917367,
      "exec-ns": 24577728,
      "total-ns": 25495095,
      "patts-hit": {},
      "rewritten": "reviews[reviews.country.isin(['Italy', 'France']) & (reviews.points >= 90)\n    ].country\n"
    }
  ],
  "total-time-in-sec": 6.793520052,
  "max-disk-in-mb": 0
}