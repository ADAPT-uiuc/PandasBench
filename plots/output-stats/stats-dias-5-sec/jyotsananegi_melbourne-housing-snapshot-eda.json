{
  "max-mem-in-mb": 606,
  "max-mem-in-mb2": 635,
  "cells": [
    {
      "raw": "# importing libraries\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\nfrom datetime import datetime # datetime processing\n\n# Data visualisation\n# FIRST-AUTHOR: remove plotting\n# import matplotlib.pyplot as plt\n# import seaborn as sns\n\n# setting path of the dataset\n# FIRST-AUTHOR: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n",
      "rewrite-ns": 788378,
      "overhead-ns": 788378,
      "exec-ns": 454164,
      "total-ns": 1242542,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\nfrom datetime import datetime\n"
    },
    {
      "raw": "melb_house = pd.read_csv(\"./input/melb_data.scaled.csv\")\n\n# checking the columns\nmelb_house.head()",
      "rewrite-ns": 557053,
      "overhead-ns": 557053,
      "exec-ns": 1023400775,
      "total-ns": 1023957828,
      "patts-hit": {},
      "rewritten": "melb_house = pd.read_csv('./input/melb_data.scaled.csv')\nmelb_house.head()\n"
    },
    {
      "raw": "melb_house.shape",
      "rewrite-ns": 76094,
      "overhead-ns": 76094,
      "exec-ns": 558421,
      "total-ns": 634515,
      "patts-hit": {},
      "rewritten": "melb_house.shape\n"
    },
    {
      "raw": "melb_house.info()",
      "rewrite-ns": 87651,
      "overhead-ns": 87651,
      "exec-ns": 374033402,
      "total-ns": 374121053,
      "patts-hit": {},
      "rewritten": "melb_house.info()\n"
    },
    {
      "raw": "# checking for unique entries\n\nunique_val = []\nfor i in melb_house.columns:\n    u = melb_house[i].nunique()\n    unique_val.append(u)\n    \npd.DataFrame({\"No. of unique values\": unique_val}, index=melb_house.columns)",
      "rewrite-ns": 1541956,
      "overhead-ns": 1541956,
      "exec-ns": 189868328,
      "total-ns": 191410284,
      "patts-hit": {},
      "rewritten": "unique_val = []\nfor i in melb_house.columns:\n    u = melb_house[i].nunique()\n    unique_val.append(u)\npd.DataFrame({'No. of unique values': unique_val}, index=melb_house.columns)\n"
    },
    {
      "raw": "# Working dataset\ndataset = melb_house.copy()",
      "rewrite-ns": 376757,
      "overhead-ns": 376757,
      "exec-ns": 37962103,
      "total-ns": 38338860,
      "patts-hit": {},
      "rewritten": "dataset = melb_house.copy()\n"
    },
    {
      "raw": "# plot of missing value\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(9,5))\n# sns.heatmap(dataset.isnull(),yticklabels=False, cbar=False, cmap=\"Paired\");\n# plt.title(\"Heatmap of Missing Values\");\n_ = dataset.isnull()",
      "rewrite-ns": 372105,
      "overhead-ns": 372105,
      "exec-ns": 356553714,
      "total-ns": 356925819,
      "patts-hit": {},
      "rewritten": "_ = dataset.isnull()\n"
    },
    {
      "raw": "# Features with missing values\nmiss = dataset.isnull().sum().sort_values(ascending = False).head(5)\nmiss_per = (miss/len(dataset))*100\n\n# Percentage of missing values\npd.DataFrame({'No. missing values': miss, '% of missind data': miss_per.values})",
      "rewrite-ns": 1385965,
      "overhead-ns": 1385965,
      "exec-ns": 366374926,
      "total-ns": 367760891,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "miss = dias.rewriter.sort_head(called_on=dataset.isnull().sum(), by=None, n\n    =5, asc=False, orig=lambda _DIAS_x: _DIAS_x.sort_values(ascending=False\n    ).head(5))\nmiss_per = miss / len(dataset) * 100\npd.DataFrame({'No. missing values': miss, '% of missind data': miss_per.values}\n    )\n"
    },
    {
      "raw": "dataset['Car'].value_counts()",
      "rewrite-ns": 414036,
      "overhead-ns": 414036,
      "exec-ns": 5418255,
      "total-ns": 5832291,
      "patts-hit": {},
      "rewritten": "dataset['Car'].value_counts()\n"
    },
    {
      "raw": "# Filling null value\ndataset['Car'].fillna(0, inplace = True)\n\n# confimation after filling the null values\nprint(\"Null values before replacement :\", melb_house['Car'].isnull().sum())\nprint(\"Null values after replacement :\", dataset['Car'].isnull().sum())",
      "rewrite-ns": 1524979,
      "overhead-ns": 1524979,
      "exec-ns": 2942739,
      "total-ns": 4467718,
      "patts-hit": {},
      "rewritten": "dataset['Car'].fillna(0, inplace=True)\nprint('Null values before replacement :', melb_house['Car'].isnull().sum())\nprint('Null values after replacement :', dataset['Car'].isnull().sum())\n"
    },
    {
      "raw": "dataset['CouncilArea'].value_counts()",
      "rewrite-ns": 375523,
      "overhead-ns": 375523,
      "exec-ns": 19672935,
      "total-ns": 20048458,
      "patts-hit": {},
      "rewritten": "dataset['CouncilArea'].value_counts()\n"
    },
    {
      "raw": "# Filling the null value \ndataset['CouncilArea'].fillna('Unavailable', inplace = True)\n\n\n# confimation after filling the null values\nprint(\"Null values before replacement :\", melb_house['CouncilArea'].isnull().sum())\nprint(\"Null values after replacement :\", dataset['CouncilArea'].isnull().sum())",
      "rewrite-ns": 1609783,
      "overhead-ns": 1609783,
      "exec-ns": 45396530,
      "total-ns": 47006313,
      "patts-hit": {},
      "rewritten": "dataset['CouncilArea'].fillna('Unavailable', inplace=True)\nprint('Null values before replacement :', melb_house['CouncilArea'].isnull(\n    ).sum())\nprint('Null values after replacement :', dataset['CouncilArea'].isnull().sum())\n"
    },
    {
      "raw": "# Filling the null value \ndataset['YearBuilt'].fillna(\"Unknown\", inplace=True)\n\n# confimation after filling the null values\nprint(\"Null values before replacement :\", melb_house['YearBuilt'].isnull().sum())\nprint(\"Null values after replacement :\", dataset['YearBuilt'].isnull().sum())",
      "rewrite-ns": 1514429,
      "overhead-ns": 1514429,
      "exec-ns": 42352462,
      "total-ns": 43866891,
      "patts-hit": {},
      "rewritten": "dataset['YearBuilt'].fillna('Unknown', inplace=True)\nprint('Null values before replacement :', melb_house['YearBuilt'].isnull().\n    sum())\nprint('Null values after replacement :', dataset['YearBuilt'].isnull().sum())\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize = (5, 5))\n# sns.distplot(dataset['BuildingArea']);\n_ = dataset['BuildingArea']",
      "rewrite-ns": 344849,
      "overhead-ns": 344849,
      "exec-ns": 318550,
      "total-ns": 663399,
      "patts-hit": {},
      "rewritten": "_ = dataset['BuildingArea']\n"
    },
    {
      "raw": "# Filling the null value \ndataset['BuildingArea'].fillna(0, inplace = True)\n\n# confimation after filling the null values\nprint(\"Null values before replacement :\", melb_house['BuildingArea'].isnull().sum())\nprint(\"Null values after replacement :\", dataset['BuildingArea'].isnull().sum())",
      "rewrite-ns": 1554328,
      "overhead-ns": 1554328,
      "exec-ns": 4631731,
      "total-ns": 6186059,
      "patts-hit": {},
      "rewritten": "dataset['BuildingArea'].fillna(0, inplace=True)\nprint('Null values before replacement :', melb_house['BuildingArea'].isnull\n    ().sum())\nprint('Null values after replacement :', dataset['BuildingArea'].isnull().sum()\n    )\n"
    },
    {
      "raw": "# log transformation of price\ndataset['Price_trans'] = np.log(dataset['Price'])\n\n# plot of price\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(10, 5))\n# plt.subplots_adjust(wspace=0.5)\n# plt.suptitle(\"Distribution of Price\", fontsize=14)\n\n# plt.subplot(1,2,1)\n# p1 = sns.kdeplot(dataset['Price']);\n# p1.title.set_text(\"Before Transfromation\")\n\n# plt.subplot(1,2,2)\n# p2 = sns.kdeplot(dataset['Price_trans']);\n# p2.title.set_text(\"After log Transformation\")\n_ = dataset['Price']\n_ = dataset['Price_trans']",
      "rewrite-ns": 1039688,
      "overhead-ns": 1039688,
      "exec-ns": 2018400,
      "total-ns": 3058088,
      "patts-hit": {},
      "rewritten": "dataset['Price_trans'] = np.log(dataset['Price'])\n_ = dataset['Price']\n_ = dataset['Price_trans']\n"
    },
    {
      "raw": "# Grouping the numerical data\nnum =  dataset.select_dtypes(exclude=\"object\")\nnum = num.drop(['Price'], axis=1)\n\n# Distributions of numrical data\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(15, 13))\n# plt.subplots_adjust(hspace=0.4, wspace=0.3)\n\n# j=1\n\nfor i in list(num.columns):\n# FIRST-AUTHOR: remove plotting\n#     plt.subplot(4,3,j)\n#     sns.distplot(dataset[i])\n#     j+=1\n    _ = dataset[i]\n    \n# FIRST-AUTHOR: remove plotting\n# plt.suptitle(\"Distribution of Numerical Data\", fontsize=15);\n",
      "rewrite-ns": 1323647,
      "overhead-ns": 1323647,
      "exec-ns": 56779517,
      "total-ns": 58103164,
      "patts-hit": {},
      "rewritten": "num = dataset.select_dtypes(exclude='object')\nnum = num.drop(['Price'], axis=1)\nfor i in list(num.columns):\n    _ = dataset[i]\n"
    },
    {
      "raw": "\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(15, 5))\n# plt.subplots_adjust(wspace=0.5)\n\n# plt.subplot(1,2,1)\n# ax1 = sns.countplot(x=dataset['Type'], palette='Accent');\n# ax1.title.set_text(\"Plot of House Type\")\n\n# plt.subplot(1,2,2)\n# ax2= sns.countplot(x=dataset['Method'], palette='Accent');\n# ax2.title.set_text(\"Plot of Method of Selling\")\n_ = dataset['Type']\n_ = dataset['Method']\n    ",
      "rewrite-ns": 573077,
      "overhead-ns": 573077,
      "exec-ns": 391653,
      "total-ns": 964730,
      "patts-hit": {},
      "rewritten": "_ = dataset['Type']\n_ = dataset['Method']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(10, 5))\n# sns.countplot(y = dataset['Regionname']);\n# plt.ylabel(\"Region Name\", fontsize=12);\n# plt.xlabel(\"Count\", fontsize=12);\n_ = dataset['Regionname']",
      "rewrite-ns": 304271,
      "overhead-ns": 304271,
      "exec-ns": 397065,
      "total-ns": 701336,
      "patts-hit": {},
      "rewritten": "_ = dataset['Regionname']\n"
    },
    {
      "raw": "# checking for top 10 seller\n# FIRST-AUTHOR: remove plotting\n# dataset['SellerG'].value_counts().head(10).plot(kind='bar', color='brown');\n_ = dataset['SellerG'].value_counts().head(10)\n\n# plot for top seller\n# FIRST-AUTHOR: remove plotting\n# plt.title(\"Top 10 Estate Agents\", fontsize=14);",
      "rewrite-ns": 571087,
      "overhead-ns": 571087,
      "exec-ns": 20891680,
      "total-ns": 21462767,
      "patts-hit": {},
      "rewritten": "_ = dataset['SellerG'].value_counts().head(10)\n"
    },
    {
      "raw": "# coverting date into datetime format\ndataset['Date'] = pd.to_datetime(dataset['Date'])\nyear = dataset['Date'].map(lambda x: datetime.strftime(x, '%Y'))\ndataset['year'] = year\nmonth = dataset['Date'].map(lambda x: datetime.strftime(x, '%b'))\ndataset['month'] = month\n\n# plot of each month\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize = (12, 4))\n# sns.countplot(x=dataset['month'], hue=dataset['year'], palette='Set1');\n_ = dataset['month']\n_ = dataset['year']",
      "rewrite-ns": 2763545,
      "overhead-ns": 2763545,
      "exec-ns": 2972339225,
      "total-ns": 2975102770,
      "patts-hit": {},
      "rewritten": "dataset['Date'] = pd.to_datetime(dataset['Date'])\nyear = dataset['Date'].map(lambda x: datetime.strftime(x, '%Y'))\ndataset['year'] = year\nmonth = dataset['Date'].map(lambda x: datetime.strftime(x, '%b'))\ndataset['month'] = month\n_ = dataset['month']\n_ = dataset['year']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(10, 5))\n# sns.boxplot(x = 'Rooms', y = \"Price_trans\", data=dataset);\n# plt.ylabel(\"Price\");",
      "rewrite-ns": 21029,
      "overhead-ns": 21029,
      "exec-ns": 105549,
      "total-ns": 126578,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(15, 5))\n# plt.subplots_adjust(wspace=0.3)\n\n# plt.subplot(1,2,1)\n# sns.boxplot(x = 'Type', y = \"Price_trans\", data=dataset, palette='Set3');\n# plt.ylabel(\"Price\");\n\n# plt.subplot(1,2,2)\n# sns.boxplot(x = 'Method', y = \"Price_trans\", data=dataset, palette='Set3');\n# plt.ylabel(\"Price\");",
      "rewrite-ns": 14864,
      "overhead-ns": 14864,
      "exec-ns": 74796,
      "total-ns": 89660,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(15, 5))\n# sns.boxenplot(x = 'Car', y = \"Price_trans\", data=dataset);\n# plt.ylabel(\"Price\");",
      "rewrite-ns": 12061,
      "overhead-ns": 12061,
      "exec-ns": 63621,
      "total-ns": 75682,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.lmplot(x=\"Landsize\", y='Price_trans', data=dataset);\n# plt.ylabel(\"Price\");\n# plt.xticks(rotation=15);",
      "rewrite-ns": 10286,
      "overhead-ns": 10286,
      "exec-ns": 54866,
      "total-ns": 65152,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.scatterplot(x='Distance', y='Price_trans', data=dataset);\n# plt.ylabel(\"Price\");",
      "rewrite-ns": 9858,
      "overhead-ns": 9858,
      "exec-ns": 52167,
      "total-ns": 62025,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Dataset of Metropolitan area\nrm = dataset[dataset['Regionname'].map(lambda x: 'Metropolitan' in x)]\n\n# Dataset of Victoria area\nrv = dataset[dataset['Regionname'].map(lambda x: 'Victoria' in x)]\n\n# plots of both region\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(15, 5))\n\n# plt.subplot(1,2,1)\n# ar1 = sns.scatterplot(x='Distance', y='Price_trans', data=rm, color='orange');\n# plt.ylabel(\"Price\");\n# ar1.title.set_text(\"Metropolitan\");\n\n# plt.subplot(1,2,2)\n# ar2 = sns.scatterplot(x='Distance', y='Price_trans', data=rv, color=\"green\");\n# plt.ylabel(\"Price\");\n# ar2.title.set_text('Victoria');",
      "rewrite-ns": 1483658,
      "overhead-ns": 1483658,
      "exec-ns": 314625001,
      "total-ns": 316108659,
      "patts-hit": {},
      "rewritten": "rm = dataset[dataset['Regionname'].map(lambda x: 'Metropolitan' in x)]\nrv = dataset[dataset['Regionname'].map(lambda x: 'Victoria' in x)]\n"
    }
  ],
  "total-time-in-sec": 5.858383532,
  "max-disk-in-mb": 0
}