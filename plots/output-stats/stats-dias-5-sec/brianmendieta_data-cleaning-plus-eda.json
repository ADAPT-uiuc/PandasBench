{
  "max-mem-in-mb": 219,
  "max-mem-in-mb2": 402,
  "cells": [
    {
      "raw": "# Import the necessary libraries\n# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\nfrom datetime import datetime\n#import zipfile\n#import kaggle",
      "rewrite-ns": 780555,
      "overhead-ns": 780555,
      "exec-ns": 437960,
      "total-ns": 1218515,
      "patts-hit": {},
      "rewritten": "exec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\nfrom datetime import datetime\n"
    },
    {
      "raw": "# Uncomment the import to extract the file from Kaggle with your key\n#!kaggle datasets download -d rashikrahmanpritom/data-science-job-posting-on-glassdoor",
      "rewrite-ns": 19781,
      "overhead-ns": 19781,
      "exec-ns": 105552,
      "total-ns": 125333,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Extract the files from the ZIP file\n#zip_name = 'data-science-job-posting-on-glassdoor.zip'\n#with zipfile.ZipFile(zip_name,'r') as file:\n#    file.extractall()",
      "rewrite-ns": 19069,
      "overhead-ns": 19069,
      "exec-ns": 99719,
      "total-ns": 118788,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Read the .csv file as a pandas dataframe\njob_data = pd.read_csv(\"./input/Uncleaned_DS_jobs.scaled.csv\")",
      "rewrite-ns": 525017,
      "overhead-ns": 525017,
      "exec-ns": 2880881783,
      "total-ns": 2881406800,
      "patts-hit": {},
      "rewritten": "job_data = pd.read_csv('./input/Uncleaned_DS_jobs.scaled.csv')\n"
    },
    {
      "raw": "# Explore the data\njob_data.info()",
      "rewrite-ns": 177709,
      "overhead-ns": 177709,
      "exec-ns": 160649098,
      "total-ns": 160826807,
      "patts-hit": {},
      "rewritten": "job_data.info()\n"
    },
    {
      "raw": "job_data.shape",
      "rewrite-ns": 71716,
      "overhead-ns": 71716,
      "exec-ns": 1023457,
      "total-ns": 1095173,
      "patts-hit": {},
      "rewritten": "job_data.shape\n"
    },
    {
      "raw": "# Check the information structure\njob_data.head()",
      "rewrite-ns": 88042,
      "overhead-ns": 88042,
      "exec-ns": 10866688,
      "total-ns": 10954730,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "# Drop the index column\njob_data.drop('index',axis=1,inplace=True)",
      "rewrite-ns": 481491,
      "overhead-ns": 481491,
      "exec-ns": 10539389,
      "total-ns": 11020880,
      "patts-hit": {},
      "rewritten": "job_data.drop('index', axis=1, inplace=True)\n"
    },
    {
      "raw": "# Check for duplicates\njob_data[job_data.duplicated()].shape\njob_data[job_data.duplicated()]",
      "rewrite-ns": 727562,
      "overhead-ns": 727562,
      "exec-ns": 1217395681,
      "total-ns": 1218123243,
      "patts-hit": {},
      "rewritten": "job_data[job_data.duplicated()].shape\njob_data[job_data.duplicated()]\n"
    },
    {
      "raw": "# Drop duplicates\njob_data.drop_duplicates(inplace=True)",
      "rewrite-ns": 410314,
      "overhead-ns": 410314,
      "exec-ns": 597202490,
      "total-ns": 597612804,
      "patts-hit": {},
      "rewritten": "job_data.drop_duplicates(inplace=True)\n"
    },
    {
      "raw": "# Check the shape again\njob_data.shape",
      "rewrite-ns": 76259,
      "overhead-ns": 76259,
      "exec-ns": 587350,
      "total-ns": 663609,
      "patts-hit": {},
      "rewritten": "job_data.shape\n"
    },
    {
      "raw": "# Set appropiate column names in the form of lowercase words separated by '_'\njob_data.rename(columns= lambda header: header.lower().replace(\" \",\"_\"), inplace= True)",
      "rewrite-ns": 910051,
      "overhead-ns": 910051,
      "exec-ns": 554029,
      "total-ns": 1464080,
      "patts-hit": {},
      "rewritten": "job_data.rename(columns=lambda header: header.lower().replace(' ', '_'),\n    inplace=True)\n"
    },
    {
      "raw": "# Inspect the Job title column\njob_data[\"job_title\"][:150]",
      "rewrite-ns": 396278,
      "overhead-ns": 396278,
      "exec-ns": 4031038,
      "total-ns": 4427316,
      "patts-hit": {},
      "rewritten": "job_data['job_title'][:150]\n"
    },
    {
      "raw": "# Make the replacement\njob_data[\"job_title\"]=job_data.loc[:,\"job_title\"].str.replace(\"(Sr.)\",\"sr.\")",
      "rewrite-ns": 827790,
      "overhead-ns": 827790,
      "exec-ns": 1088187,
      "total-ns": 1915977,
      "patts-hit": {},
      "rewritten": "job_data['job_title'] = job_data.loc[:, 'job_title'].str.replace('(Sr.)', 'sr.'\n    )\n"
    },
    {
      "raw": "# Delete the rest of the instances using a regex\njob_data[\"job_title\"]=job_data.loc[:,\"job_title\"].str.extract('([^()]+)')",
      "rewrite-ns": 734142,
      "overhead-ns": 734142,
      "exec-ns": 1492417,
      "total-ns": 2226559,
      "patts-hit": {},
      "rewritten": "job_data['job_title'] = job_data.loc[:, 'job_title'].str.extract('([^()]+)')\n"
    },
    {
      "raw": "#Replace the special characters with an empty value by defining a regex pattern\njob_data['job_title'] = job_data['job_title'].str.replace(r'[^a-zA-Z0-9-,/\\s]','',regex=True)",
      "rewrite-ns": 726241,
      "overhead-ns": 726241,
      "exec-ns": 916020,
      "total-ns": 1642261,
      "patts-hit": {},
      "rewritten": "job_data['job_title'] = job_data['job_title'].str.replace('[^a-zA-Z0-9-,/\\\\s]',\n    '', regex=True)\n"
    },
    {
      "raw": "#Inspect the salary estimate column\njob_data['salary_estimate'][100:200]",
      "rewrite-ns": 392620,
      "overhead-ns": 392620,
      "exec-ns": 5162387,
      "total-ns": 5555007,
      "patts-hit": {},
      "rewritten": "job_data['salary_estimate'][100:200]\n"
    },
    {
      "raw": "# Define a function to extract the salary limits\ndef extract_values(text):\n    extracted_integer = ''\n    modified_string = ''\n    \n    for i in range(len(text)):\n        if i+1 < len(text):\n            if text[i].isdigit():\n                extracted_integer += text[i]\n                if not text[i+1].isdigit():\n                    break\n        if i == len(text) - 1 and text[i].isdigit():\n            extracted_integer += text[i]\n    \n    if extracted_integer:\n        modified_string = text[:text.find(extracted_integer)] + text[text.find(extracted_integer) + len(extracted_integer):]\n        extracted_integer = int(extracted_integer)\n    \n    return extracted_integer, modified_string",
      "rewrite-ns": 4555067,
      "overhead-ns": 4555067,
      "exec-ns": 831796,
      "total-ns": 5386863,
      "patts-hit": {},
      "rewritten": "def extract_values(text):\n    extracted_integer = ''\n    modified_string = ''\n    for i in range(len(text)):\n        if i + 1 < len(text):\n            if text[i].isdigit():\n                extracted_integer += text[i]\n                if not text[i + 1].isdigit():\n                    break\n        if i == len(text) - 1 and text[i].isdigit():\n            extracted_integer += text[i]\n    if extracted_integer:\n        modified_string = text[:text.find(extracted_integer)] + text[text.\n            find(extracted_integer) + len(extracted_integer):]\n        extracted_integer = int(extracted_integer)\n    return extracted_integer, modified_string\n"
    },
    {
      "raw": "#Obtain the minimum salary in the range\njob_data['min_salary_K$'], job_data['salary_estimate'] = zip(*job_data['salary_estimate'].apply(extract_values))",
      "rewrite-ns": 890763,
      "overhead-ns": 890763,
      "exec-ns": 1982636,
      "total-ns": 2873399,
      "patts-hit": {},
      "rewritten": "job_data['min_salary_K$'], job_data['salary_estimate'] = zip(*job_data[\n    'salary_estimate'].apply(extract_values))\n"
    },
    {
      "raw": "#Obtain the maximum salary in the range\njob_data['max_salary_K$'], job_data['salary_estimate'] = zip(*job_data['salary_estimate'].apply(extract_values))",
      "rewrite-ns": 873919,
      "overhead-ns": 873919,
      "exec-ns": 2212186,
      "total-ns": 3086105,
      "patts-hit": {},
      "rewritten": "job_data['max_salary_K$'], job_data['salary_estimate'] = zip(*job_data[\n    'salary_estimate'].apply(extract_values))\n"
    },
    {
      "raw": "#Drop the old salary range column\njob_data.drop('salary_estimate', axis=1, inplace=True)",
      "rewrite-ns": 430786,
      "overhead-ns": 430786,
      "exec-ns": 738530,
      "total-ns": 1169316,
      "patts-hit": {},
      "rewritten": "job_data.drop('salary_estimate', axis=1, inplace=True)\n"
    },
    {
      "raw": "#Let's obtain the average of these ranges\njob_data['avg_salary_estimate'] = (np.round((job_data['min_salary_K$'] + job_data['max_salary_K$'])/2,decimals=0)).astype(int)\njob_data.head()",
      "rewrite-ns": 1094537,
      "overhead-ns": 1094537,
      "exec-ns": 9856354,
      "total-ns": 10950891,
      "patts-hit": {},
      "rewritten": "job_data['avg_salary_estimate'] = np.round((job_data['min_salary_K$'] +\n    job_data['max_salary_K$']) / 2, decimals=0).astype(int)\njob_data.head()\n"
    },
    {
      "raw": "#Inspect the job description column\njob_data['job_description'][:150]",
      "rewrite-ns": 365427,
      "overhead-ns": 365427,
      "exec-ns": 1186580,
      "total-ns": 1552007,
      "patts-hit": {},
      "rewritten": "job_data['job_description'][:150]\n"
    },
    {
      "raw": "job_data.loc[:,\"job_description\"]\njob_data.loc[job_data.loc[:,\"job_description\"]==\"-1\"]",
      "rewrite-ns": 947232,
      "overhead-ns": 947232,
      "exec-ns": 1506301,
      "total-ns": 2453533,
      "patts-hit": {},
      "rewritten": "job_data.loc[:, 'job_description']\njob_data.loc[job_data.loc[:, 'job_description'] == '-1']\n"
    },
    {
      "raw": "#Inspect the rating column\njob_data['rating'][:150]",
      "rewrite-ns": 361887,
      "overhead-ns": 361887,
      "exec-ns": 1237137,
      "total-ns": 1599024,
      "patts-hit": {},
      "rewritten": "job_data['rating'][:150]\n"
    },
    {
      "raw": "job_data['rating'].unique()",
      "rewrite-ns": 103183,
      "overhead-ns": 103183,
      "exec-ns": 740635,
      "total-ns": 843818,
      "patts-hit": {},
      "rewritten": "job_data['rating'].unique()\n"
    },
    {
      "raw": "# Replace rating mising values with NaN across the entire column\njob_data['rating'].replace(-1.0,np.nan,inplace=True)",
      "rewrite-ns": 619292,
      "overhead-ns": 619292,
      "exec-ns": 499080,
      "total-ns": 1118372,
      "patts-hit": {},
      "rewritten": "job_data['rating'].replace(-1.0, np.nan, inplace=True)\n"
    },
    {
      "raw": "job_data['rating'].unique()",
      "rewrite-ns": 98028,
      "overhead-ns": 98028,
      "exec-ns": 725619,
      "total-ns": 823647,
      "patts-hit": {},
      "rewritten": "job_data['rating'].unique()\n"
    },
    {
      "raw": "# Inspect the company name column\njob_data['company_name'][:10]",
      "rewrite-ns": 353052,
      "overhead-ns": 353052,
      "exec-ns": 862021,
      "total-ns": 1215073,
      "patts-hit": {},
      "rewritten": "job_data['company_name'][:10]\n"
    },
    {
      "raw": "job_data['company_name'] = job_data.loc[:,'company_name'].str.replace(r\"\\n\\d+(\\.\\d+)?\",'',regex=True)\njob_data.loc[:,\"company_name\"][:10]",
      "rewrite-ns": 1265794,
      "overhead-ns": 1265794,
      "exec-ns": 1810154,
      "total-ns": 3075948,
      "patts-hit": {},
      "rewritten": "job_data['company_name'] = job_data.loc[:, 'company_name'].str.replace(\n    '\\\\n\\\\d+(\\\\.\\\\d+)?', '', regex=True)\njob_data.loc[:, 'company_name'][:10]\n"
    },
    {
      "raw": "# Inspect the location column\njob_data['location'][:10]",
      "rewrite-ns": 358589,
      "overhead-ns": 358589,
      "exec-ns": 832134,
      "total-ns": 1190723,
      "patts-hit": {},
      "rewritten": "job_data['location'][:10]\n"
    },
    {
      "raw": "# Check the counts of each unique location state\njob_data.loc[:,\"location\"].apply(lambda x: x.split(\",\")[-1]).value_counts()",
      "rewrite-ns": 1082345,
      "overhead-ns": 1082345,
      "exec-ns": 1546528,
      "total-ns": 2628873,
      "patts-hit": {},
      "rewritten": "job_data.loc[:, 'location'].apply(lambda x: x.split(',')[-1]).value_counts()\n"
    },
    {
      "raw": "# Create the state column\njob_data['location_state'] = job_data['location'].apply(lambda x: x.split(',')[-1].strip())",
      "rewrite-ns": 1048838,
      "overhead-ns": 1048838,
      "exec-ns": 784036,
      "total-ns": 1832874,
      "patts-hit": {},
      "rewritten": "job_data['location_state'] = job_data['location'].apply(lambda x: x.split(\n    ',')[-1].strip())\n"
    },
    {
      "raw": "# Replace the inconsistencies with their correct state abbreviation\ndef clean_location(jobs):\n    return (\n        jobs.loc[:, \"location_state\"]\n        .replace(\"California\",\"CA\")\n        .replace(\"Texas\",\"TX\")\n        .replace(\"Utah\",\"UT\")\n        .replace(\"New Jersey\",\"NJ\")\n        .replace(\"Remote\",\"n/a\")\n        .replace(\"United States\",\"n/a\")\n    )\n\njob_data = job_data.assign(\n    location_state = clean_location\n)",
      "rewrite-ns": 1809263,
      "overhead-ns": 1809263,
      "exec-ns": 1487493,
      "total-ns": 3296756,
      "patts-hit": {},
      "rewritten": "def clean_location(jobs):\n    return jobs.loc[:, 'location_state'].replace('California', 'CA').replace(\n        'Texas', 'TX').replace('Utah', 'UT').replace('New Jersey', 'NJ'\n        ).replace('Remote', 'n/a').replace('United States', 'n/a')\njob_data = job_data.assign(location_state=clean_location)\n"
    },
    {
      "raw": "job_data[\"location_state\"].value_counts()",
      "rewrite-ns": 356233,
      "overhead-ns": 356233,
      "exec-ns": 1130058,
      "total-ns": 1486291,
      "patts-hit": {},
      "rewritten": "job_data['location_state'].value_counts()\n"
    },
    {
      "raw": "# Check if the location of the job and the HQ are in the place\njob_data['same_state'] = (job_data['location'] == job_data['headquarters']).astype(int)",
      "rewrite-ns": 740622,
      "overhead-ns": 740622,
      "exec-ns": 707596,
      "total-ns": 1448218,
      "patts-hit": {},
      "rewritten": "job_data['same_state'] = (job_data['location'] == job_data['headquarters']\n    ).astype(int)\n"
    },
    {
      "raw": "job_data.head()",
      "rewrite-ns": 71801,
      "overhead-ns": 71801,
      "exec-ns": 9772151,
      "total-ns": 9843952,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "# Inspect the headquarters column\njob_data['headquarters'].value_counts()",
      "rewrite-ns": 360663,
      "overhead-ns": 360663,
      "exec-ns": 1235676,
      "total-ns": 1596339,
      "patts-hit": {},
      "rewritten": "job_data['headquarters'].value_counts()\n"
    },
    {
      "raw": "job_data['headquarters'] = job_data['headquarters'].apply(lambda x: x.replace('-1','n/a'))\njob_data[\"headquarters\"].value_counts()",
      "rewrite-ns": 1153064,
      "overhead-ns": 1153064,
      "exec-ns": 1713911,
      "total-ns": 2866975,
      "patts-hit": {},
      "rewritten": "job_data['headquarters'] = job_data['headquarters'].apply(lambda x: x.\n    replace('-1', 'n/a'))\njob_data['headquarters'].value_counts()\n"
    },
    {
      "raw": "# Inspect the size column\nprint(job_data['size'][:100])\njob_data['size'].unique()",
      "rewrite-ns": 520246,
      "overhead-ns": 520246,
      "exec-ns": 1230137,
      "total-ns": 1750383,
      "patts-hit": {},
      "rewritten": "print(job_data['size'][:100])\njob_data['size'].unique()\n"
    },
    {
      "raw": "# Handle the missing values correctly\ndef size_cleaning(jobs):\n    return (\n        jobs.loc[:, \"size\"]\n        .replace(\"-1\",\"n/a\")\n        .replace(\"Unknown\",\"n/a\")\n    )\n\njob_data = job_data.assign(\n    size = size_cleaning\n)",
      "rewrite-ns": 1163870,
      "overhead-ns": 1163870,
      "exec-ns": 1042975,
      "total-ns": 2206845,
      "patts-hit": {},
      "rewritten": "def size_cleaning(jobs):\n    return jobs.loc[:, 'size'].replace('-1', 'n/a').replace('Unknown', 'n/a')\njob_data = job_data.assign(size=size_cleaning)\n"
    },
    {
      "raw": "job_data['size'].unique()",
      "rewrite-ns": 101759,
      "overhead-ns": 101759,
      "exec-ns": 594326,
      "total-ns": 696085,
      "patts-hit": {},
      "rewritten": "job_data['size'].unique()\n"
    },
    {
      "raw": "# Inspect the founded column\njob_data['founded'][:100]",
      "rewrite-ns": 367416,
      "overhead-ns": 367416,
      "exec-ns": 998534,
      "total-ns": 1365950,
      "patts-hit": {},
      "rewritten": "job_data['founded'][:100]\n"
    },
    {
      "raw": "#Clean the missing values\njob_data['founded'].replace(-1,np.nan,inplace=True)\njob_data['founded'].unique()",
      "rewrite-ns": 673968,
      "overhead-ns": 673968,
      "exec-ns": 1480549,
      "total-ns": 2154517,
      "patts-hit": {},
      "rewritten": "job_data['founded'].replace(-1, np.nan, inplace=True)\njob_data['founded'].unique()\n"
    },
    {
      "raw": "# obtain the years the company has been in the market and drop the founed column\ncurrent_year = datetime.now().year\njob_data['years_in_market'] = current_year - job_data['founded']\njob_data.drop('founded',axis=1,inplace=True)\njob_data.head()",
      "rewrite-ns": 1185665,
      "overhead-ns": 1185665,
      "exec-ns": 11066289,
      "total-ns": 12251954,
      "patts-hit": {},
      "rewritten": "current_year = datetime.now().year\njob_data['years_in_market'] = current_year - job_data['founded']\njob_data.drop('founded', axis=1, inplace=True)\njob_data.head()\n"
    },
    {
      "raw": "# Inspect the Type of ownership column\njob_data['type_of_ownership'][:100]",
      "rewrite-ns": 366851,
      "overhead-ns": 366851,
      "exec-ns": 1082124,
      "total-ns": 1448975,
      "patts-hit": {},
      "rewritten": "job_data['type_of_ownership'][:100]\n"
    },
    {
      "raw": "job_data['type_of_ownership'].unique()",
      "rewrite-ns": 99660,
      "overhead-ns": 99660,
      "exec-ns": 564822,
      "total-ns": 664482,
      "patts-hit": {},
      "rewritten": "job_data['type_of_ownership'].unique()\n"
    },
    {
      "raw": "def ownership(jobs):\n    return (\n        jobs.loc[:, \"type_of_ownership\"]\n        .replace(\"Nonprofit Organization\",\"Nonprofit\")\n        .replace(\"-1\",\"n/a\")\n        .replace(\"Unknown\",\"n/a\")\n        .replace(\"Company - Public\",\"Public\")\n        .replace(\"Company - Private\",\"Private\")\n        .replace(\"Other Organization\",\"Other\")   \n    )\n\njob_data = job_data.assign(\n    type_of_ownership = ownership\n)",
      "rewrite-ns": 1809304,
      "overhead-ns": 1809304,
      "exec-ns": 1469173,
      "total-ns": 3278477,
      "patts-hit": {},
      "rewritten": "def ownership(jobs):\n    return jobs.loc[:, 'type_of_ownership'].replace('Nonprofit Organization',\n        'Nonprofit').replace('-1', 'n/a').replace('Unknown', 'n/a').replace(\n        'Company - Public', 'Public').replace('Company - Private', 'Private'\n        ).replace('Other Organization', 'Other')\njob_data = job_data.assign(type_of_ownership=ownership)\n"
    },
    {
      "raw": "job_data['type_of_ownership'].unique()",
      "rewrite-ns": 100255,
      "overhead-ns": 100255,
      "exec-ns": 588739,
      "total-ns": 688994,
      "patts-hit": {},
      "rewritten": "job_data['type_of_ownership'].unique()\n"
    },
    {
      "raw": "# Inspect the industry column\njob_data['industry'].value_counts()",
      "rewrite-ns": 352113,
      "overhead-ns": 352113,
      "exec-ns": 1221919,
      "total-ns": 1574032,
      "patts-hit": {},
      "rewritten": "job_data['industry'].value_counts()\n"
    },
    {
      "raw": "job_data[\"industry\"] = job_data[\"industry\"].apply(lambda x: x.replace(\"-1\",\"n/a\"))\njob_data['industry'].unique()",
      "rewrite-ns": 902800,
      "overhead-ns": 902800,
      "exec-ns": 1200624,
      "total-ns": 2103424,
      "patts-hit": {},
      "rewritten": "job_data['industry'] = job_data['industry'].apply(lambda x: x.replace('-1',\n    'n/a'))\njob_data['industry'].unique()\n"
    },
    {
      "raw": "# Inspect the sector column\njob_data['sector'].value_counts()",
      "rewrite-ns": 354085,
      "overhead-ns": 354085,
      "exec-ns": 1031168,
      "total-ns": 1385253,
      "patts-hit": {},
      "rewritten": "job_data['sector'].value_counts()\n"
    },
    {
      "raw": "job_data['sector'] = job_data['sector'].apply(lambda x: x.replace(\"-1\",\"n/a\"))\njob_data['sector'].unique()",
      "rewrite-ns": 880525,
      "overhead-ns": 880525,
      "exec-ns": 1120665,
      "total-ns": 2001190,
      "patts-hit": {},
      "rewritten": "job_data['sector'] = job_data['sector'].apply(lambda x: x.replace('-1', 'n/a'))\njob_data['sector'].unique()\n"
    },
    {
      "raw": "# Inspect the revenue column\njob_data['revenue'].value_counts()",
      "rewrite-ns": 353441,
      "overhead-ns": 353441,
      "exec-ns": 984267,
      "total-ns": 1337708,
      "patts-hit": {},
      "rewritten": "job_data['revenue'].value_counts()\n"
    },
    {
      "raw": "def revenue_cleanup(jobs):\n    return (\n        jobs.loc[:, \"revenue\"]\n        .replace(\"-1\",\"n/a\")\n        .replace(\"Unknown / Non-Applicable\",\"n/a\")\n    )\n\njob_data = job_data.assign(\n    revenue = revenue_cleanup\n)",
      "rewrite-ns": 1267285,
      "overhead-ns": 1267285,
      "exec-ns": 1029938,
      "total-ns": 2297223,
      "patts-hit": {},
      "rewritten": "def revenue_cleanup(jobs):\n    return jobs.loc[:, 'revenue'].replace('-1', 'n/a').replace(\n        'Unknown / Non-Applicable', 'n/a')\njob_data = job_data.assign(revenue=revenue_cleanup)\n"
    },
    {
      "raw": "job_data['revenue']=job_data.loc[:,'revenue'].str.extract('([^()]+)')\njob_data['revenue'].value_counts()",
      "rewrite-ns": 998420,
      "overhead-ns": 998420,
      "exec-ns": 2020277,
      "total-ns": 3018697,
      "patts-hit": {},
      "rewritten": "job_data['revenue'] = job_data.loc[:, 'revenue'].str.extract('([^()]+)')\njob_data['revenue'].value_counts()\n"
    },
    {
      "raw": "# Finally inspect the competitors column\njob_data['competitors'].value_counts()\n",
      "rewrite-ns": 356675,
      "overhead-ns": 356675,
      "exec-ns": 1220248,
      "total-ns": 1576923,
      "patts-hit": {},
      "rewritten": "job_data['competitors'].value_counts()\n"
    },
    {
      "raw": "np.round((488/659)*100,decimals=2)",
      "rewrite-ns": 574009,
      "overhead-ns": 574009,
      "exec-ns": 479984,
      "total-ns": 1053993,
      "patts-hit": {},
      "rewritten": "np.round(488 / 659 * 100, decimals=2)\n"
    },
    {
      "raw": "#The percentage is too high so we drop this column\njob_data.drop('competitors',axis=1,inplace=True)",
      "rewrite-ns": 421827,
      "overhead-ns": 421827,
      "exec-ns": 644439,
      "total-ns": 1066266,
      "patts-hit": {},
      "rewritten": "job_data.drop('competitors', axis=1, inplace=True)\n"
    },
    {
      "raw": "job_data.head()",
      "rewrite-ns": 72387,
      "overhead-ns": 72387,
      "exec-ns": 9636119,
      "total-ns": 9708506,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "# Check if we have any '-1' as missing values\njob_data[job_data.eq('-1').any(axis = 1)]",
      "rewrite-ns": 567698,
      "overhead-ns": 567698,
      "exec-ns": 1653197,
      "total-ns": 2220895,
      "patts-hit": {},
      "rewritten": "job_data[job_data.eq('-1').any(axis=1)]\n"
    },
    {
      "raw": "# Check if we have a numerical missing value in any column \njob_data[job_data.eq(-1).any(axis = 1)]",
      "rewrite-ns": 609732,
      "overhead-ns": 609732,
      "exec-ns": 1516577,
      "total-ns": 2126309,
      "patts-hit": {},
      "rewritten": "job_data[job_data.eq(-1).any(axis=1)]\n"
    },
    {
      "raw": "# Define a simplification function\n\ndef role_defining(title): \n    if any(keyword in title.lower() for keyword in ['data scientist', 'data science']):\n        return 'Data Scientist'\n    elif any(keyword in title.lower() for keyword in ['data analyst', 'analyst']):\n        return 'Data Analyst'\n    elif 'data engineer' in title.lower():\n        return 'Data Engineer'\n    elif any(keyword in title.lower() for keyword in ['machine learning', 'ai']):\n        return 'Machine Learning Engineer'\n    else:\n        return 'Other'",
      "rewrite-ns": 2643811,
      "overhead-ns": 2643811,
      "exec-ns": 672859,
      "total-ns": 3316670,
      "patts-hit": {},
      "rewritten": "def role_defining(title):\n    if any(keyword in title.lower() for keyword in ['data scientist',\n        'data science']):\n        return 'Data Scientist'\n    elif any(keyword in title.lower() for keyword in ['data analyst',\n        'analyst']):\n        return 'Data Analyst'\n    elif 'data engineer' in title.lower():\n        return 'Data Engineer'\n    elif any(keyword in title.lower() for keyword in ['machine learning', 'ai']\n        ):\n        return 'Machine Learning Engineer'\n    else:\n        return 'Other'\n"
    },
    {
      "raw": "# Apply the function to the new column\njob_data['job_role']= job_data['job_title'].apply(role_defining)\njob_data['job_role'].value_counts()",
      "rewrite-ns": 842335,
      "overhead-ns": 842335,
      "exec-ns": 1902877,
      "total-ns": 2745212,
      "patts-hit": {},
      "rewritten": "job_data['job_role'] = job_data['job_title'].apply(role_defining)\njob_data['job_role'].value_counts()\n"
    },
    {
      "raw": "def seniority_defining(title,description):\n    if any(keyword in title.lower() for keyword in ['jr.','jr','junior']) or any(keyword in description.lower() for keyword in ['jr.','jr','junior']):\n        return 'Jr'\n    elif any(keyword in title.lower() for keyword in ['sr.','sr','vp','senior']) or any(keyword in description.lower() for keyword in ['sr.','sr','vp','senior']):\n        return 'Sr'\n    else:\n        return 'Mid-Level'\n    \n\njob_data['job_seniority'] = job_data.apply(lambda row: seniority_defining(row['job_title'], row['job_description']), axis=1)\njob_data['job_seniority'].value_counts()",
      "rewrite-ns": 4401449,
      "overhead-ns": 4786053,
      "exec-ns": 62416404,
      "total-ns": 66817853,
      "patts-hit": {},
      "rewritten": "def seniority_defining(title, description):\n    if any(keyword in title.lower() for keyword in ['jr.', 'jr', 'junior']\n        ) or any(keyword in description.lower() for keyword in ['jr.', 'jr',\n        'junior']):\n        return 'Jr'\n    elif any(keyword in title.lower() for keyword in ['sr.', 'sr', 'vp',\n        'senior']) or any(keyword in description.lower() for keyword in [\n        'sr.', 'sr', 'vp', 'senior']):\n        return 'Sr'\n    else:\n        return 'Mid-Level'\njob_data['job_seniority'] = job_data.apply(lambda row: seniority_defining(\n    row['job_title'], row['job_description']), axis=1)\njob_data['job_seniority'].value_counts()\n"
    },
    {
      "raw": "job_data.head()",
      "rewrite-ns": 74581,
      "overhead-ns": 74581,
      "exec-ns": 10339830,
      "total-ns": 10414411,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "# Create dummy columns for each of the skill considered.\njob_data['excel'] = job_data.apply(lambda x: 1 if 'excel' in x.job_description.lower() else 0, axis=1)\njob_data['sql'] = job_data.apply(lambda x: 1 if 'sql' in x.job_description.lower() else 0, axis=1)\njob_data['python'] = job_data.apply(lambda x: 1 if 'python' in x.job_description.lower() else 0, axis=1)\njob_data['power_bi'] = job_data.apply(lambda x: 1 if 'power bi' in x.job_description.lower() else 0, axis=1)\njob_data['tableau'] = job_data.apply(lambda x: 1 if 'tableau' in x.job_description.lower() else 0, axis=1)\njob_data['scikit'] = job_data.apply(lambda x: 1 if 'scikit' in x.job_description.lower() else 0, axis=1)\njob_data['spark'] = job_data.apply(lambda x: 1 if 'spark' in x.job_description.lower() else 0, axis=1)",
      "rewrite-ns": 6840196,
      "overhead-ns": 7001275,
      "exec-ns": 95832985,
      "total-ns": 102673181,
      "patts-hit": {},
      "rewritten": "job_data['excel'] = job_data.apply(lambda x: 1 if 'excel' in x.\n    job_description.lower() else 0, axis=1)\njob_data['sql'] = job_data.apply(lambda x: 1 if 'sql' in x.job_description.\n    lower() else 0, axis=1)\njob_data['python'] = job_data.apply(lambda x: 1 if 'python' in x.\n    job_description.lower() else 0, axis=1)\njob_data['power_bi'] = job_data.apply(lambda x: 1 if 'power bi' in x.\n    job_description.lower() else 0, axis=1)\njob_data['tableau'] = job_data.apply(lambda x: 1 if 'tableau' in x.\n    job_description.lower() else 0, axis=1)\njob_data['scikit'] = job_data.apply(lambda x: 1 if 'scikit' in x.\n    job_description.lower() else 0, axis=1)\njob_data['spark'] = job_data.apply(lambda x: 1 if 'spark' in x.\n    job_description.lower() else 0, axis=1)\n"
    },
    {
      "raw": "print(job_data['excel'].value_counts())\nprint(job_data['sql'].value_counts())\nprint(job_data['python'].value_counts())\nprint(job_data['power_bi'].value_counts())\nprint(job_data['tableau'].value_counts())\nprint(job_data['scikit'].value_counts())\nprint(job_data['spark'].value_counts())",
      "rewrite-ns": 2543998,
      "overhead-ns": 2543998,
      "exec-ns": 2947518,
      "total-ns": 5491516,
      "patts-hit": {},
      "rewritten": "print(job_data['excel'].value_counts())\nprint(job_data['sql'].value_counts())\nprint(job_data['python'].value_counts())\nprint(job_data['power_bi'].value_counts())\nprint(job_data['tableau'].value_counts())\nprint(job_data['scikit'].value_counts())\nprint(job_data['spark'].value_counts())\n"
    },
    {
      "raw": "job_data.head()",
      "rewrite-ns": 72643,
      "overhead-ns": 72643,
      "exec-ns": 13034920,
      "total-ns": 13107563,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "job_data.to_csv('Cleaned_Job_Data.csv',index= False)\njob_data.to_excel('Cleaned_Job_Data.xlsx',index=False)",
      "rewrite-ns": 684155,
      "overhead-ns": 684155,
      "exec-ns": 459021063,
      "total-ns": 459705218,
      "patts-hit": {},
      "rewritten": "job_data.to_csv('Cleaned_Job_Data.csv', index=False)\njob_data.to_excel('Cleaned_Job_Data.xlsx', index=False)\n"
    },
    {
      "raw": "# Include the necessary packages fro analysisi and visualization\n# FIRST-AUTHOR: remove plotting\n# import matplotlib.pyplot as plt\n# import seaborn as sns\n# %matplotlib inline",
      "rewrite-ns": 15611,
      "overhead-ns": 15611,
      "exec-ns": 85848,
      "total-ns": 101459,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Obtain the basic statistics of the data frame\njob_data.describe()",
      "rewrite-ns": 90302,
      "overhead-ns": 90302,
      "exec-ns": 22993475,
      "total-ns": 23083777,
      "patts-hit": {},
      "rewritten": "job_data.describe()\n"
    },
    {
      "raw": "#Obtain the relationships between columns\n# FIRST-AUTHOR: remove plotting\n# sns.pairplot(job_data)",
      "rewrite-ns": 13088,
      "overhead-ns": 13088,
      "exec-ns": 72730,
      "total-ns": 85818,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "industry_salary = [\n    round(job_data.loc[job_data[\"industry\"]==\"Biotech & Pharmaceuticals\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"IT Services\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"Computer Hardware & Software\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"Aerospace & Defense\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"Enterprise Software & Network Solutions\",\"avg_salary_estimate\"].mean(), 2)\n]\n\ntop_paying_industries = [\n    \"Biotech & Pharmaceuticals\",\n    \"IT Services\",\n    \"Computer Hardware & Software\",\n    \"Aerospace & Defense\",\n    \"Enterprise Software & Network Solutions\"\n]\n\n# FIRST-AUTHOR: remove plotting\n# plt.bar(top_paying_industries, industry_salary)\n# plt.ylim(110, 140)\n# plt.xlabel(\"Job Industry\")\n# plt.ylabel(\"Average Salary\")\n\n# # Rotate the x-axis labels by 70 degrees\n# plt.xticks(rotation=70)\n\n# plt.show()",
      "rewrite-ns": 4015268,
      "overhead-ns": 4015268,
      "exec-ns": 2036159,
      "total-ns": 6051427,
      "patts-hit": {},
      "rewritten": "industry_salary = [round(job_data.loc[job_data['industry'] ==\n    'Biotech & Pharmaceuticals', 'avg_salary_estimate'].mean(), 2), round(\n    job_data.loc[job_data['industry'] == 'IT Services',\n    'avg_salary_estimate'].mean(), 2), round(job_data.loc[job_data[\n    'industry'] == 'Computer Hardware & Software', 'avg_salary_estimate'].\n    mean(), 2), round(job_data.loc[job_data['industry'] ==\n    'Aerospace & Defense', 'avg_salary_estimate'].mean(), 2), round(\n    job_data.loc[job_data['industry'] ==\n    'Enterprise Software & Network Solutions', 'avg_salary_estimate'].mean(\n    ), 2)]\ntop_paying_industries = ['Biotech & Pharmaceuticals', 'IT Services',\n    'Computer Hardware & Software', 'Aerospace & Defense',\n    'Enterprise Software & Network Solutions']\n"
    },
    {
      "raw": "# Let's start by analyzing the average salary for job postings\n# FIRST-AUTHOR: remove plotting\n# sns.boxplot(x=job_data['avg_salary_estimate'])\n_ = job_data['avg_salary_estimate']",
      "rewrite-ns": 302863,
      "overhead-ns": 302863,
      "exec-ns": 210318,
      "total-ns": 513181,
      "patts-hit": {},
      "rewritten": "_ = job_data['avg_salary_estimate']\n"
    },
    {
      "raw": "# We can define a new data frame to fit in better inside the avg. salary range\ndf = job_data[(job_data.avg_salary_estimate > 50) & (job_data.avg_salary_estimate < 200)] ",
      "rewrite-ns": 735780,
      "overhead-ns": 735780,
      "exec-ns": 796385,
      "total-ns": 1532165,
      "patts-hit": {},
      "rewritten": "df = job_data[(job_data.avg_salary_estimate > 50) & (job_data.\n    avg_salary_estimate < 200)]\n"
    },
    {
      "raw": "df.shape",
      "rewrite-ns": 49503,
      "overhead-ns": 49503,
      "exec-ns": 432066,
      "total-ns": 481569,
      "patts-hit": {},
      "rewritten": "df.shape\n"
    },
    {
      "raw": "# Make a comparison between the years the company has been in the market and the avg. salary.\n# FIRST-AUTHOR: remove plotting\n# sns.lmplot(x='years_in_market',y='avg_salary_estimate',data=df)\n",
      "rewrite-ns": 11783,
      "overhead-ns": 11783,
      "exec-ns": 63128,
      "total-ns": 74911,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Generate a heatmap based on the numerical columns of the dataframe\n# FIRST-AUTHOR: remove plotting\n# fig, ax = plt.subplots(figsize=(10,10)) \nmatrix = np.triu(df.select_dtypes(include=[np.number]).corr())\n# FIRST-AUTHOR: remove plotting\n# sns.heatmap(df.select_dtypes(include=[np.number]).corr(),annot=True, fmt='.1g', vmin=-1, vmax=1, center= 0,  ax=ax)\n_ = df.select_dtypes(include=[np.number]).corr()",
      "rewrite-ns": 1260512,
      "overhead-ns": 1260512,
      "exec-ns": 1337058,
      "total-ns": 2597570,
      "patts-hit": {},
      "rewritten": "matrix = np.triu(df.select_dtypes(include=[np.number]).corr())\n_ = df.select_dtypes(include=[np.number]).corr()\n"
    },
    {
      "raw": "# Check the sector values\n# FIRST-AUTHOR: remove plotting\n# fig, ax = plt.subplots(figsize=(10,10)) \n# chart = sns.barplot(x=df.sector.value_counts().index, y=df.sector.value_counts())\n# _= chart.set_xticklabels(chart.get_xticklabels(), rotation=75)\n_ = df.sector.value_counts().index\n_ = df.sector.value_counts()",
      "rewrite-ns": 697738,
      "overhead-ns": 697738,
      "exec-ns": 810685,
      "total-ns": 1508423,
      "patts-hit": {},
      "rewritten": "_ = df.sector.value_counts().index\n_ = df.sector.value_counts()\n"
    },
    {
      "raw": "# Set a simpler name\ndf.rename(columns={'avg_salary_estimate':'avg_salary'}, inplace= True)",
      "rewrite-ns": 474077,
      "overhead-ns": 474077,
      "exec-ns": 563847,
      "total-ns": 1037924,
      "patts-hit": {},
      "rewritten": "df.rename(columns={'avg_salary_estimate': 'avg_salary'}, inplace=True)\n"
    },
    {
      "raw": "# Obtain the avg. salary for each type of role\npd.pivot_table(df,index='job_role', values='avg_salary')",
      "rewrite-ns": 433832,
      "overhead-ns": 433832,
      "exec-ns": 4532551,
      "total-ns": 4966383,
      "patts-hit": {},
      "rewritten": "pd.pivot_table(df, index='job_role', values='avg_salary')\n"
    },
    {
      "raw": "# Obtain the avg. salary based on the seniority of the roles\npd.pivot_table(df, index=['job_role','job_seniority'], values='avg_salary').sort_values('avg_salary', ascending =False)",
      "rewrite-ns": 762107,
      "overhead-ns": 762107,
      "exec-ns": 5996753,
      "total-ns": 6758860,
      "patts-hit": {},
      "rewritten": "pd.pivot_table(df, index=['job_role', 'job_seniority'], values='avg_salary'\n    ).sort_values('avg_salary', ascending=False)\n"
    },
    {
      "raw": "df.head()",
      "rewrite-ns": 76245,
      "overhead-ns": 76245,
      "exec-ns": 12987682,
      "total-ns": 13063927,
      "patts-hit": {},
      "rewritten": "df.head()\n"
    },
    {
      "raw": "\n# Define a custom aggregation function to get the percentage of descriptions that include certain skill.\ndef ones_percentage(x):\n    return round((sum(1 for value in x if value == 1)/len(x))*100,2)\n\n# Create the pivot table with the custom aggregation function\npivot_table = pd.pivot_table(df, index='job_role', values=['excel', 'sql', 'python', 'power_bi', 'tableau', 'scikit', 'spark'], aggfunc=ones_percentage)\n\nprint(pivot_table)",
      "rewrite-ns": 1898808,
      "overhead-ns": 1898808,
      "exec-ns": 15092310,
      "total-ns": 16991118,
      "patts-hit": {},
      "rewritten": "def ones_percentage(x):\n    return round(sum(1 for value in x if value == 1) / len(x) * 100, 2)\npivot_table = pd.pivot_table(df, index='job_role', values=['excel', 'sql',\n    'python', 'power_bi', 'tableau', 'scikit', 'spark'], aggfunc=\n    ones_percentage)\nprint(pivot_table)\n"
    }
  ],
  "total-time-in-sec": 5.763834096,
  "max-disk-in-mb": 0
}