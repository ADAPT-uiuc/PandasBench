{
  "max-mem-in-mb": 1171,
  "max-mem-in-mb2": 1846,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# FIRST-AUTHOR: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('./input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.",
      "rewrite-ns": 501128,
      "overhead-ns": 501128,
      "exec-ns": 268589,
      "total-ns": 769717,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove path printing\n# import os\n# os.getcwd()",
      "rewrite-ns": 11767,
      "overhead-ns": 11767,
      "exec-ns": 70175,
      "total-ns": 81942,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove sys calls\n# os.chdir(\"./input\")",
      "rewrite-ns": 10880,
      "overhead-ns": 10880,
      "exec-ns": 60190,
      "total-ns": 71070,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.preprocessing import LabelEncoder\n# from sklearn import metrics",
      "rewrite-ns": 10277,
      "overhead-ns": 10277,
      "exec-ns": 54555,
      "total-ns": 64832,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.metrics import mean_squared_error\n# import lightgbm as lgb\n# from sklearn.model_selection import train_test_split",
      "rewrite-ns": 10159,
      "overhead-ns": 10159,
      "exec-ns": 53891,
      "total-ns": 64050,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "#########Reading all the files#########\ntrain_df=pd.read_csv('./input/train.scaled.csv')\ntest_df=pd.read_csv('./input/test.scaled.csv')\nweather_train_df=pd.read_csv('./input/weather_train.scaled.csv')\nweather_test_df=pd.read_csv('./input/weather_test.scaled.csv')\nbuilding_meta_df=pd.read_csv('./input/building_metadata.scaled.csv')",
      "rewrite-ns": 1519037,
      "overhead-ns": 1519037,
      "exec-ns": 1681515626,
      "total-ns": 1683034663,
      "patts-hit": {},
      "rewritten": "train_df = pd.read_csv('./input/train.scaled.csv')\ntest_df = pd.read_csv('./input/test.scaled.csv')\nweather_train_df = pd.read_csv('./input/weather_train.scaled.csv')\nweather_test_df = pd.read_csv('./input/weather_test.scaled.csv')\nbuilding_meta_df = pd.read_csv('./input/building_metadata.scaled.csv')\n"
    },
    {
      "raw": "train_df.shape \ntrain_df.head()",
      "rewrite-ns": 146600,
      "overhead-ns": 146600,
      "exec-ns": 5080385,
      "total-ns": 5226985,
      "patts-hit": {},
      "rewritten": "train_df.shape\ntrain_df.head()\n"
    },
    {
      "raw": "######### Converting time stamp to datetime formats##########\ntrain_df['timestamp'] = pd.to_datetime(train_df['timestamp'])\ntest_df['timestamp'] = pd.to_datetime(test_df['timestamp'])\nweather_train_df['timestamp'] = pd.to_datetime(weather_train_df['timestamp'])\nweather_test_df['timestamp'] = pd.to_datetime(weather_test_df['timestamp'])\n    \nbuilding_meta_df['primary_use'] = building_meta_df['primary_use'].astype('category')",
      "rewrite-ns": 2564170,
      "overhead-ns": 2564170,
      "exec-ns": 504116404,
      "total-ns": 506680574,
      "patts-hit": {},
      "rewritten": "train_df['timestamp'] = pd.to_datetime(train_df['timestamp'])\ntest_df['timestamp'] = pd.to_datetime(test_df['timestamp'])\nweather_train_df['timestamp'] = pd.to_datetime(weather_train_df['timestamp'])\nweather_test_df['timestamp'] = pd.to_datetime(weather_test_df['timestamp'])\nbuilding_meta_df['primary_use'] = building_meta_df['primary_use'].astype(\n    'category')\n"
    },
    {
      "raw": "########### Merging data frames - step1 #################\ntemp_df = train_df[['building_id']]\ntemp_df = temp_df.merge(building_meta_df, on=['building_id'], how='left')\ndel temp_df['building_id']\ntrain_df = pd.concat([train_df, temp_df], axis=1)\n\ntemp_df = test_df[['building_id']]\ntemp_df = temp_df.merge(building_meta_df, on=['building_id'], how='left')\n\ndel temp_df['building_id']\ntest_df = pd.concat([test_df, temp_df], axis=1)\ndel temp_df, building_meta_df",
      "rewrite-ns": 3163682,
      "overhead-ns": 3163682,
      "exec-ns": 719870000,
      "total-ns": 723033682,
      "patts-hit": {},
      "rewritten": "temp_df = train_df[['building_id']]\ntemp_df = temp_df.merge(building_meta_df, on=['building_id'], how='left')\ndel temp_df['building_id']\ntrain_df = pd.concat([train_df, temp_df], axis=1)\ntemp_df = test_df[['building_id']]\ntemp_df = temp_df.merge(building_meta_df, on=['building_id'], how='left')\ndel temp_df['building_id']\ntest_df = pd.concat([test_df, temp_df], axis=1)\ndel temp_df, building_meta_df\n"
    },
    {
      "raw": "############Merging data frames step-2 ################\ntemp_df = train_df[['site_id','timestamp']]\ntemp_df = temp_df.merge(weather_train_df, on=['site_id','timestamp'], how='left')\n\ndel temp_df['site_id'], temp_df['timestamp']\ntrain_df = pd.concat([train_df, temp_df], axis=1)\n\ntemp_df = test_df[['site_id','timestamp']]\ntemp_df = temp_df.merge(weather_test_df, on=['site_id','timestamp'], how='left')\n\ndel temp_df['site_id'], temp_df['timestamp']\ntest_df = pd.concat([test_df, temp_df], axis=1)\n\ndel temp_df, weather_train_df, weather_test_df",
      "rewrite-ns": 3693110,
      "overhead-ns": 3693110,
      "exec-ns": 1561398719,
      "total-ns": 1565091829,
      "patts-hit": {},
      "rewritten": "temp_df = train_df[['site_id', 'timestamp']]\ntemp_df = temp_df.merge(weather_train_df, on=['site_id', 'timestamp'], how=\n    'left')\ndel temp_df['site_id'], temp_df['timestamp']\ntrain_df = pd.concat([train_df, temp_df], axis=1)\ntemp_df = test_df[['site_id', 'timestamp']]\ntemp_df = temp_df.merge(weather_test_df, on=['site_id', 'timestamp'], how=\n    'left')\ndel temp_df['site_id'], temp_df['timestamp']\ntest_df = pd.concat([test_df, temp_df], axis=1)\ndel temp_df, weather_train_df, weather_test_df\n"
    },
    {
      "raw": "train_df.head()",
      "rewrite-ns": 124918,
      "overhead-ns": 124918,
      "exec-ns": 11520600,
      "total-ns": 11645518,
      "patts-hit": {},
      "rewritten": "train_df.head()\n"
    },
    {
      "raw": "test_df.head()",
      "rewrite-ns": 87378,
      "overhead-ns": 87378,
      "exec-ns": 10367677,
      "total-ns": 10455055,
      "patts-hit": {},
      "rewritten": "test_df.head()\n"
    },
    {
      "raw": "train_df.shape",
      "rewrite-ns": 55657,
      "overhead-ns": 55657,
      "exec-ns": 6838815,
      "total-ns": 6894472,
      "patts-hit": {},
      "rewritten": "train_df.shape\n"
    },
    {
      "raw": "evaluate_lazy(train_df.describe())\n#test_df.describe()",
      "rewrite-ns": 366636,
      "overhead-ns": 366636,
      "exec-ns": 926853171,
      "total-ns": 927219807,
      "patts-hit": {},
      "rewritten": "evaluate_lazy(train_df.describe())\n"
    },
    {
      "raw": "########To check the Missing values count by columns wise#################\nprint(evaluate_lazy(train_df.isnull().sum()))\nprint(evaluate_lazy(test_df.isnull().sum()))\n",
      "rewrite-ns": 1045185,
      "overhead-ns": 1045185,
      "exec-ns": 118926585,
      "total-ns": 119971770,
      "patts-hit": {},
      "rewritten": "print(evaluate_lazy(train_df.isnull().sum()))\nprint(evaluate_lazy(test_df.isnull().sum()))\n"
    },
    {
      "raw": "###########Missing value imputation for both train and test data sets manually ###############\ntrain_df['floor_count'] = train_df['floor_count'].fillna(-999).astype(np.int16)\ntest_df['floor_count'] = test_df['floor_count'].fillna(-999).astype(np.int16)\ntrain_df['year_built'] = train_df['year_built'].fillna(-999).astype(np.int16)\ntest_df['year_built'] = test_df['year_built'].fillna(-999).astype(np.int16)\n",
      "rewrite-ns": 2910305,
      "overhead-ns": 2910305,
      "exec-ns": 116823787,
      "total-ns": 119734092,
      "patts-hit": {},
      "rewritten": "train_df['floor_count'] = train_df['floor_count'].fillna(-999).astype(np.int16)\ntest_df['floor_count'] = test_df['floor_count'].fillna(-999).astype(np.int16)\ntrain_df['year_built'] = train_df['year_built'].fillna(-999).astype(np.int16)\ntest_df['year_built'] = test_df['year_built'].fillna(-999).astype(np.int16)\n"
    },
    {
      "raw": "train_df['air_temperature']=train_df['air_temperature'].fillna(-999).astype(np.int16)\ntrain_df['cloud_coverage']=train_df['cloud_coverage'].fillna(-999).astype(np.int16)\ntrain_df['dew_temperature']=train_df['dew_temperature'].fillna(-999).astype(np.int16)\ntrain_df['precip_depth_1_hr']=train_df['precip_depth_1_hr'].fillna(-999).astype(np.int16)\ntrain_df['sea_level_pressure']=train_df['sea_level_pressure'].fillna(-999).astype(np.int16)\ntrain_df['wind_direction']=train_df['wind_direction'].fillna(-999).astype(np.int16)\ntrain_df['wind_speed']=train_df['wind_speed'].fillna(-999).astype(np.int16)\n\ntest_df['air_temperature']=test_df['air_temperature'].fillna(-999).astype(np.int16)\ntest_df['cloud_coverage']=test_df['cloud_coverage'].fillna(-999).astype(np.int16)\ntest_df['dew_temperature']=test_df['dew_temperature'].fillna(-999).astype(np.int16)\ntest_df['precip_depth_1_hr']=test_df['precip_depth_1_hr'].fillna(-999).astype(np.int16)\ntest_df['sea_level_pressure']=test_df['sea_level_pressure'].fillna(-999).astype(np.int16)\ntest_df['wind_direction']=test_df['wind_direction'].fillna(-999).astype(np.int16)\ntest_df['wind_speed']=test_df['wind_speed'].fillna(-999).astype(np.int16)",
      "rewrite-ns": 9888060,
      "overhead-ns": 9888060,
      "exec-ns": 595227973,
      "total-ns": 605116033,
      "patts-hit": {},
      "rewritten": "train_df['air_temperature'] = train_df['air_temperature'].fillna(-999).astype(\n    np.int16)\ntrain_df['cloud_coverage'] = train_df['cloud_coverage'].fillna(-999).astype(np\n    .int16)\ntrain_df['dew_temperature'] = train_df['dew_temperature'].fillna(-999).astype(\n    np.int16)\ntrain_df['precip_depth_1_hr'] = train_df['precip_depth_1_hr'].fillna(-999\n    ).astype(np.int16)\ntrain_df['sea_level_pressure'] = train_df['sea_level_pressure'].fillna(-999\n    ).astype(np.int16)\ntrain_df['wind_direction'] = train_df['wind_direction'].fillna(-999).astype(np\n    .int16)\ntrain_df['wind_speed'] = train_df['wind_speed'].fillna(-999).astype(np.int16)\ntest_df['air_temperature'] = test_df['air_temperature'].fillna(-999).astype(np\n    .int16)\ntest_df['cloud_coverage'] = test_df['cloud_coverage'].fillna(-999).astype(np\n    .int16)\ntest_df['dew_temperature'] = test_df['dew_temperature'].fillna(-999).astype(np\n    .int16)\ntest_df['precip_depth_1_hr'] = test_df['precip_depth_1_hr'].fillna(-999\n    ).astype(np.int16)\ntest_df['sea_level_pressure'] = test_df['sea_level_pressure'].fillna(-999\n    ).astype(np.int16)\ntest_df['wind_direction'] = test_df['wind_direction'].fillna(-999).astype(np\n    .int16)\ntest_df['wind_speed'] = test_df['wind_speed'].fillna(-999).astype(np.int16)\n"
    },
    {
      "raw": "print(evaluate_lazy(train_df.isnull().sum()))",
      "rewrite-ns": 593540,
      "overhead-ns": 593540,
      "exec-ns": 31616652,
      "total-ns": 32210192,
      "patts-hit": {},
      "rewritten": "print(evaluate_lazy(train_df.isnull().sum()))\n"
    },
    {
      "raw": "",
      "rewrite-ns": 21733,
      "overhead-ns": 21733,
      "exec-ns": 109248,
      "total-ns": 130981,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 6.317497264,
  "max-disk-in-mb": 0
}