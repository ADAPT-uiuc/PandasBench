{
  "max-mem-in-mb": 781,
  "max-mem-in-mb2": 1262,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n# ALEX: remove plotting\n# import matplotlib.pyplot as plt #plotting!\n# import seaborn as sns #cute messing with style\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# ALEX: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('./input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session",
      "rewrite-ns": 698543,
      "overhead-ns": 698543,
      "exec-ns": 401743,
      "total-ns": 1100286,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\n"
    },
    {
      "raw": "# ALEX: removed plotting\n# %matplotlib inline\n# sns.set_style('darkgrid')\ndf = pd.read_csv('./input/highereducationstudentsperformanceevaluation/DATA (1).scaled.csv')\ndf.head()",
      "rewrite-ns": 589832,
      "overhead-ns": 589832,
      "exec-ns": 975866043,
      "total-ns": 976455875,
      "patts-hit": {},
      "rewritten": "df = pd.read_csv(\n    './input/highereducationstudentsperformanceevaluation/DATA (1).scaled.csv')\ndf.head()\n"
    },
    {
      "raw": "df.shape",
      "rewrite-ns": 75183,
      "overhead-ns": 75183,
      "exec-ns": 563611,
      "total-ns": 638794,
      "patts-hit": {},
      "rewritten": "df.shape\n"
    },
    {
      "raw": "df.info()",
      "rewrite-ns": 91557,
      "overhead-ns": 91557,
      "exec-ns": 87913639,
      "total-ns": 88005196,
      "patts-hit": {},
      "rewritten": "df.info()\n"
    },
    {
      "raw": "# Rename columns\ndf.rename(columns={'1': 'AGE', '7': 'SINGLE','20':'ATTENDENCE','25':'NOTETAKING','30': 'GPA'}, inplace=True)\n\n# Access the renamed columns using loc\npreview_columns = ['AGE', 'SINGLE', 'NOTETAKING','GPA','GRADE']\ndf.loc[:, preview_columns].head()",
      "rewrite-ns": 1633888,
      "overhead-ns": 1633888,
      "exec-ns": 8737245,
      "total-ns": 10371133,
      "patts-hit": {},
      "rewritten": "df.rename(columns={'1': 'AGE', '7': 'SINGLE', '20': 'ATTENDENCE', '25':\n    'NOTETAKING', '30': 'GPA'}, inplace=True)\npreview_columns = ['AGE', 'SINGLE', 'NOTETAKING', 'GPA', 'GRADE']\ndf.loc[:, preview_columns].head()\n"
    },
    {
      "raw": "df_clean = df.copy()\n\n# List of columns to keep\nselected_columns = [\n    'AGE',\n    'SINGLE',\n    'NOTETAKING',\n    'GPA',\n    'GRADE',\n    'ATTENDENCE',\n]\n\n# Get the list of columns that exist in the DataFrame but are not in the selected_columns list\ncolumns_to_remove = [col for col in df_clean.columns if col not in selected_columns]\n\n# Drop the columns that are not in the selected_columns list\ndf_clean.drop(columns=columns_to_remove, inplace=True)\n\n# Display DataFrame info to verify\ndf_clean.info()",
      "rewrite-ns": 1709622,
      "overhead-ns": 1709622,
      "exec-ns": 68802565,
      "total-ns": 70512187,
      "patts-hit": {},
      "rewritten": "df_clean = df.copy()\nselected_columns = ['AGE', 'SINGLE', 'NOTETAKING', 'GPA', 'GRADE', 'ATTENDENCE'\n    ]\ncolumns_to_remove = [col for col in df_clean.columns if col not in\n    selected_columns]\ndf_clean.drop(columns=columns_to_remove, inplace=True)\ndf_clean.info()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(16, 12))\n# sns.heatmap(df_clean.drop('GPA', axis=1).corr(), cmap='YlGnBu', annot=True, fmt='.2f', vmin=0);\n_ = df_clean.drop('GPA', axis=1).corr()",
      "rewrite-ns": 589858,
      "overhead-ns": 589858,
      "exec-ns": 71963133,
      "total-ns": 72552991,
      "patts-hit": {},
      "rewritten": "_ = df_clean.drop('GPA', axis=1).corr()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# df_clean.hist(alpha = 0.7, figsize=(12,10), bins=5);",
      "rewrite-ns": 23109,
      "overhead-ns": 23109,
      "exec-ns": 111882,
      "total-ns": 134991,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# %matplotlib inline\n# sns.set_style('darkgrid')\ndf = pd.read_csv('./input/highereducationstudentsperformanceevaluation/DATA (1).scaled.csv')\ndf.head()",
      "rewrite-ns": 497921,
      "overhead-ns": 497921,
      "exec-ns": 742468538,
      "total-ns": 742966459,
      "patts-hit": {},
      "rewritten": "df = pd.read_csv(\n    './input/highereducationstudentsperformanceevaluation/DATA (1).scaled.csv')\ndf.head()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(16, 12))\n# sns.heatmap(df.drop('30', axis=1).corr(), cmap='YlGnBu', annot=True, fmt='.2f', vmin=0);\n_ = df.drop('30', axis=1).corr()",
      "rewrite-ns": 623621,
      "overhead-ns": 623621,
      "exec-ns": 1813872949,
      "total-ns": 1814496570,
      "patts-hit": {},
      "rewritten": "_ = df.drop('30', axis=1).corr()\n"
    },
    {
      "raw": "df_cut = df.copy()\n#Cutting our data to make it more managable\ncolumns_to_remove = [\n    '3',\n    '9',\n    '10',\n    '14',\n    '15',\n    '16',\n    '21',\n    '23',\n    '24',\n    '28',\n    '5',\n    '6',\n    '7',\n    '20',\n    '22',\n    'COURSE ID',\n]\n# Drop the columns to remove\ndf_cut.drop(columns=columns_to_remove, inplace=True)\n\n# Display DataFrame info to verify\ndf_cut.info()",
      "rewrite-ns": 1842614,
      "overhead-ns": 1842614,
      "exec-ns": 167983568,
      "total-ns": 169826182,
      "patts-hit": {},
      "rewritten": "df_cut = df.copy()\ncolumns_to_remove = ['3', '9', '10', '14', '15', '16', '21', '23', '24',\n    '28', '5', '6', '7', '20', '22', 'COURSE ID']\ndf_cut.drop(columns=columns_to_remove, inplace=True)\ndf_cut.info()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(16, 12))\n# sns.heatmap(df_cut.drop('30', axis=1).corr(), cmap='YlGnBu', annot=True, fmt='.2f', vmin=0);\n_ = df_cut.drop('30', axis=1).corr()",
      "rewrite-ns": 613300,
      "overhead-ns": 613300,
      "exec-ns": 489413066,
      "total-ns": 490026366,
      "patts-hit": {},
      "rewritten": "_ = df_cut.drop('30', axis=1).corr()\n"
    },
    {
      "raw": "# Rename columns\ndf_cut.rename(columns={\n    '1': 'AGE',\n    '2': 'SEX',\n    '4': 'SCHOLSHIP',\n    '7': 'SINGLE',\n    '8': 'SALARY',\n    '11': 'MOTHERS_EDU',\n    '12': 'FATHERS_EDU',\n    '13': 'SIBLNIGS',\n    '17': 'STUDY_HOURS',\n    '18': 'READS_NON_FIC',\n    '19': 'READS_FIC',\n    '25': 'NOTETAKING',\n    '26': 'LISTENS',\n    '27': 'DISCUSSION',\n    '29': 'PAST_GPA',\n    '30': 'GPA',}, inplace=True)",
      "rewrite-ns": 1654519,
      "overhead-ns": 1654519,
      "exec-ns": 1025487,
      "total-ns": 2680006,
      "patts-hit": {},
      "rewritten": "df_cut.rename(columns={'1': 'AGE', '2': 'SEX', '4': 'SCHOLSHIP', '7':\n    'SINGLE', '8': 'SALARY', '11': 'MOTHERS_EDU', '12': 'FATHERS_EDU', '13':\n    'SIBLNIGS', '17': 'STUDY_HOURS', '18': 'READS_NON_FIC', '19':\n    'READS_FIC', '25': 'NOTETAKING', '26': 'LISTENS', '27': 'DISCUSSION',\n    '29': 'PAST_GPA', '30': 'GPA'}, inplace=True)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(16, 12))\n# sns.heatmap(df_cut.drop('PAST_GPA', axis=1).corr(), cmap='YlGnBu', annot=True, fmt='.2f', vmin=0);\n_ = df_cut.drop('PAST_GPA', axis=1).corr()",
      "rewrite-ns": 585597,
      "overhead-ns": 585597,
      "exec-ns": 488917615,
      "total-ns": 489503212,
      "patts-hit": {},
      "rewritten": "_ = df_cut.drop('PAST_GPA', axis=1).corr()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(16, 12))\n# sns.heatmap(df_cut.drop('PAST_GPA', axis=1).corr(), cmap='YlGnBu', annot=True, fmt='.2f', vmin=0);\n_ = df_cut.drop('PAST_GPA', axis=1).corr()",
      "rewrite-ns": 619930,
      "overhead-ns": 619930,
      "exec-ns": 489261340,
      "total-ns": 489881270,
      "patts-hit": {},
      "rewritten": "_ = df_cut.drop('PAST_GPA', axis=1).corr()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# df_cut.hist(alpha = 0.7, figsize=(12,10), bins=5);",
      "rewrite-ns": 24716,
      "overhead-ns": 24716,
      "exec-ns": 112134,
      "total-ns": 136850,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "",
      "rewrite-ns": 15385,
      "overhead-ns": 15385,
      "exec-ns": 82869,
      "total-ns": 98254,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 5.419386622,
  "max-disk-in-mb": 0
}