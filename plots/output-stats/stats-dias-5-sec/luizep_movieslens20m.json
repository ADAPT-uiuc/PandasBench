{
  "max-mem-in-mb": 528,
  "max-mem-in-mb2": 769,
  "cells": [
    {
      "raw": "# ALEX: remove plotting\n# import matplotlib.pyplot as plt # Bibilioteca util para criar gr\u00e1ficos\n# import pandas as pd # Bibilioteca para auxiliar a importar e maniular nossos dataframes\nexec(os.environ['IREWR_IMPORTS'])\n# ALEX: remove ML code\n# from sklearn.tree import DecisionTreeClassifier #respons\u00e1vel pela gera\u00e7\u00e3o do modelo \n# from sklearn.ensemble import RandomForestRegressor\n# from sklearn.ensemble import RandomForestClassifier\nimport numpy as np # Bibilioteca \u00fatil para realizar opera\u00e7\u00f5es matem\u00e1ticas\n# ALEX: remove plotting, ML code\n# import seaborn as sns # Bibilioteca utilizada para dar um toque especial nos gr\u00e1ficos\n# #import chardet   #Trabalha com leitura de arquivos, acredito que n ser\u00e1 necess\u00e1rio utiliza=l\u00e1\n# plt.style.use('ggplot') #Customiza\u00e7\u00e3o de gr\u00e1ficos\n# plt.style.use(\"seaborn-white\")\n# import os\n# from mpl_toolkits.mplot3d import Axes3D\n\n# import random\n# from sklearn.model_selection import train_test_split\n# from sklearn.metrics import accuracy_score\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n# ALEX: remove path printing\n# import os\n# print(os.listdir(\"./input\"))\n\n# Any results you write to the current directory are saved as output.",
      "rewrite-ns": 701304,
      "overhead-ns": 701304,
      "exec-ns": 395089,
      "total-ns": 1096393,
      "patts-hit": {},
      "rewritten": "exec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\n"
    },
    {
      "raw": "movies = pd.read_csv('./input/movie.scaled.csv')\nratings = pd.read_csv('./input/rating.scaled.csv')\n\nmovies.sort_values(by='movieId', inplace=True)\nmovies.reset_index(inplace=True, drop=True)\nratings.sort_values(by='movieId', inplace=True)\nratings.reset_index(inplace=True, drop=True)",
      "rewrite-ns": 2694147,
      "overhead-ns": 2694147,
      "exec-ns": 2656732727,
      "total-ns": 2659426874,
      "patts-hit": {},
      "rewritten": "movies = pd.read_csv('./input/movie.scaled.csv')\nratings = pd.read_csv('./input/rating.scaled.csv')\nmovies.sort_values(by='movieId', inplace=True)\nmovies.reset_index(inplace=True, drop=True)\nratings.sort_values(by='movieId', inplace=True)\nratings.reset_index(inplace=True, drop=True)\n"
    },
    {
      "raw": "#Dimens\u00e3o  datasets\nprint(\"Dimens\u00e3o  dataset de movies\")\nprint(\"Colunas:\", movies.shape[1],\"\\nLinhas:\", movies.shape[0])\nprint(\"-\")\nprint(\"Dimens\u00e3o  dataset de ratings\")\nprint(\"Colunas:\", ratings.shape[1],\"\\nLinhas:\", ratings.shape[0])",
      "rewrite-ns": 1529179,
      "overhead-ns": 1529179,
      "exec-ns": 583034,
      "total-ns": 2112213,
      "patts-hit": {},
      "rewritten": "print('Dimens\u00e3o  dataset de movies')\nprint('Colunas:', movies.shape[1], '\\nLinhas:', movies.shape[0])\nprint('-')\nprint('Dimens\u00e3o  dataset de ratings')\nprint('Colunas:', ratings.shape[1], '\\nLinhas:', ratings.shape[0])\n"
    },
    {
      "raw": "#Verificando os primeiros registros do conjunto de dados\nmovies.head()",
      "rewrite-ns": 99122,
      "overhead-ns": 99122,
      "exec-ns": 5885601,
      "total-ns": 5984723,
      "patts-hit": {},
      "rewritten": "movies.head()\n"
    },
    {
      "raw": "ratings.head()",
      "rewrite-ns": 83248,
      "overhead-ns": 83248,
      "exec-ns": 3676758,
      "total-ns": 3760006,
      "patts-hit": {},
      "rewritten": "ratings.head()\n"
    },
    {
      "raw": "ratings.dtypes",
      "rewrite-ns": 57915,
      "overhead-ns": 57915,
      "exec-ns": 800802,
      "total-ns": 858717,
      "patts-hit": {},
      "rewritten": "ratings.dtypes\n"
    },
    {
      "raw": "movies.dtypes",
      "rewrite-ns": 48400,
      "overhead-ns": 48400,
      "exec-ns": 740717,
      "total-ns": 789117,
      "patts-hit": {},
      "rewritten": "movies.dtypes\n"
    },
    {
      "raw": "ratings.info()",
      "rewrite-ns": 75103,
      "overhead-ns": 75103,
      "exec-ns": 3557776,
      "total-ns": 3632879,
      "patts-hit": {},
      "rewritten": "ratings.info()\n"
    },
    {
      "raw": "# ALEX: make notebook run\n# ratings.skew()\nratings.skew(numeric_only=True)",
      "rewrite-ns": 359640,
      "overhead-ns": 359640,
      "exec-ns": 146120068,
      "total-ns": 146479708,
      "patts-hit": {},
      "rewritten": "ratings.skew(numeric_only=True)\n"
    },
    {
      "raw": "# ALEX: make notebook run\n# movies.skew()\nmovies.skew(numeric_only=True)",
      "rewrite-ns": 410949,
      "overhead-ns": 410949,
      "exec-ns": 1357414,
      "total-ns": 1768363,
      "patts-hit": {},
      "rewritten": "movies.skew(numeric_only=True)\n"
    },
    {
      "raw": "# Dividindo o t\u00edtulo e o ano de lan\u00e7amento em colunas separadas no dataframe de filmes\n#Convertertendo ano para timestamp.\n\nmovies['year'] = movies.title.str.extract(\"\\((\\d{4})\\)\", expand=True)\nmovies.year = pd.to_datetime(movies.year, format='%Y')\nmovies.year = movies.year.dt.year\nmovies.title = movies.title.str[:-7]",
      "rewrite-ns": 2018278,
      "overhead-ns": 2018278,
      "exec-ns": 9889603,
      "total-ns": 11907881,
      "patts-hit": {},
      "rewritten": "movies['year'] = movies.title.str.extract('\\\\((\\\\d{4})\\\\)', expand=True)\nmovies.year = pd.to_datetime(movies.year, format='%Y')\nmovies.year = movies.year.dt.year\nmovies.title = movies.title.str[:-7]\n"
    },
    {
      "raw": "#f,ax = plt.subplots(figsize=(10,8))\n#sns.heatmap(ratings.corr(), annot=True, linewidths=.7, fmt= '.2f',ax=ax)\n#plt.show()",
      "rewrite-ns": 13822,
      "overhead-ns": 13822,
      "exec-ns": 73638,
      "total-ns": 87460,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "#categorizando os g\u00eaneros de filmes corretamente. \n#Trabalhar mais tarde com + 20MM de linhas de strings consome muito recurso\ngenres_unique = pd.DataFrame(movies.genres.str.split('|').tolist()).stack().unique()\ngenres_unique = pd.DataFrame(genres_unique, columns=['genre']) \nmovies = movies.join(movies.genres.str.get_dummies().astype(bool))\nmovies.drop('genres', inplace=True, axis=1)",
      "rewrite-ns": 2392956,
      "overhead-ns": 2392956,
      "exec-ns": 28796926,
      "total-ns": 31189882,
      "patts-hit": {},
      "rewritten": "genres_unique = pd.DataFrame(movies.genres.str.split('|').tolist()).stack(\n    ).unique()\ngenres_unique = pd.DataFrame(genres_unique, columns=['genre'])\nmovies = movies.join(movies.genres.str.get_dummies().astype(bool))\nmovies.drop('genres', inplace=True, axis=1)\n"
    },
    {
      "raw": "genres_unique",
      "rewrite-ns": 46485,
      "overhead-ns": 46485,
      "exec-ns": 2189723,
      "total-ns": 2236208,
      "patts-hit": {},
      "rewritten": "genres_unique\n"
    },
    {
      "raw": "movies.head()",
      "rewrite-ns": 83313,
      "overhead-ns": 83313,
      "exec-ns": 11408113,
      "total-ns": 11491426,
      "patts-hit": {},
      "rewritten": "movies.head()\n"
    },
    {
      "raw": "# Modificando o formato do registro de data e hora da avalia\u00e7\u00e3o\nratings.timestamp = pd.to_datetime(ratings.timestamp, infer_datetime_format=True)\nratings.timestamp = ratings.timestamp.dt.year",
      "rewrite-ns": 928595,
      "overhead-ns": 928595,
      "exec-ns": 1564192628,
      "total-ns": 1565121223,
      "patts-hit": {},
      "rewritten": "ratings.timestamp = pd.to_datetime(ratings.timestamp, infer_datetime_format\n    =True)\nratings.timestamp = ratings.timestamp.dt.year\n"
    },
    {
      "raw": "ratings['timestamp'].unique()",
      "rewrite-ns": 158346,
      "overhead-ns": 158346,
      "exec-ns": 16847573,
      "total-ns": 17005919,
      "patts-hit": {},
      "rewritten": "ratings['timestamp'].unique()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.heatmap(movies.isnull(),yticklabels=False,cbar=False,cmap='viridis')\n# plt.show()\n_ = movies.isnull()",
      "rewrite-ns": 376179,
      "overhead-ns": 376179,
      "exec-ns": 924257,
      "total-ns": 1300436,
      "patts-hit": {},
      "rewritten": "_ = movies.isnull()\n"
    },
    {
      "raw": "#Contando valores nulos\nmovies.isnull().sum().sort_values(ascending=False).head(10)",
      "rewrite-ns": 362152,
      "overhead-ns": 362152,
      "exec-ns": 2815328,
      "total-ns": 3177480,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "dias.rewriter.sort_head(called_on=movies.isnull().sum(), by=None, n=10, asc\n    =False, orig=lambda _DIAS_x: _DIAS_x.sort_values(ascending=False).head(10))\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.heatmap(ratings.isnull(),yticklabels=False,cbar=False,cmap='viridis')\n# plt.show()\n_ = ratings.isnull()",
      "rewrite-ns": 334495,
      "overhead-ns": 334495,
      "exec-ns": 6419636,
      "total-ns": 6754131,
      "patts-hit": {},
      "rewritten": "_ = ratings.isnull()\n"
    },
    {
      "raw": "#contando valores nulos\nratings.isnull().sum().sort_values(ascending=False).head(10)",
      "rewrite-ns": 337381,
      "overhead-ns": 337381,
      "exec-ns": 17074844,
      "total-ns": 17412225,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "dias.rewriter.sort_head(called_on=ratings.isnull().sum(), by=None, n=10,\n    asc=False, orig=lambda _DIAS_x: _DIAS_x.sort_values(ascending=False).\n    head(10))\n"
    },
    {
      "raw": "# Removendo valores nulos do datasets movies\nmovies.dropna(inplace=True)",
      "rewrite-ns": 387324,
      "overhead-ns": 387324,
      "exec-ns": 1386190,
      "total-ns": 1773514,
      "patts-hit": {},
      "rewritten": "movies.dropna(inplace=True)\n"
    },
    {
      "raw": "movies.isnull().sum().sort_values(ascending=False).head(10)",
      "rewrite-ns": 315783,
      "overhead-ns": 315783,
      "exec-ns": 2773952,
      "total-ns": 3089735,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "dias.rewriter.sort_head(called_on=movies.isnull().sum(), by=None, n=10, asc\n    =False, orig=lambda _DIAS_x: _DIAS_x.sort_values(ascending=False).head(10))\n"
    },
    {
      "raw": "#df_mv_year = movies.groupby('movieId')['year']",
      "rewrite-ns": 12389,
      "overhead-ns": 12389,
      "exec-ns": 70861,
      "total-ns": 83250,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "dftmp = movies[['movieId', 'year']].groupby('year')\n\n# ALEX: remove plotting\n# fig, ax1 = plt.subplots(figsize=(15,8))\n# ax1.plot(dftmp.year.first(), dftmp.movieId.nunique(), \"b\")\n# ax1.grid(False)\n_ = dftmp.year.first()\n_ = dftmp.movieId.nunique()\n\ndftmp = ratings[['rating', 'timestamp']].groupby('timestamp')\n# ALEX: remove plotting\n# ax2 = ax1.twinx() #Plotando os dados de avalia\u00e7\u00f5es no eixo\n# ax2.plot(dftmp.timestamp.first(), dftmp.rating.count(), \"r\")\n# ax2.grid(False)\n\n# ax1.set_xlabel('Ano')\n# ax1.set_ylabel('N\u00famero de filmes liberados'); ax2.set_ylabel('N\u00famero de avalia\u00e7\u00f5es')\n# plt.title('Filmes por ano')\n# plt.show()\n_ = dftmp.timestamp.first()\n_ = dftmp.rating.count()",
      "rewrite-ns": 2167999,
      "overhead-ns": 2167999,
      "exec-ns": 146191302,
      "total-ns": 148359301,
      "patts-hit": {},
      "rewritten": "dftmp = movies[['movieId', 'year']].groupby('year')\n_ = dftmp.year.first()\n_ = dftmp.movieId.nunique()\ndftmp = ratings[['rating', 'timestamp']].groupby('timestamp')\n_ = dftmp.timestamp.first()\n_ = dftmp.rating.count()\n"
    },
    {
      "raw": "# Distribution graphs (histogram/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n# ALEX: remove plotting\n#     nGraphRow = (nCol + nGraphPerRow - 1) / nGraphPerRow\n#     plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n# ALEX: remove plotting\n#         plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n# ALEX: remove plotting\n#             valueCounts.plot.bar()\n#         else:\n#             columnDf.hist()\n#         plt.ylabel('counts')\n#         plt.xticks(rotation = 90)\n#         plt.title(f'{columnNames[i]} (column {i})')\n#     plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n#     plt.show()",
      "rewrite-ns": 3592298,
      "overhead-ns": 3592298,
      "exec-ns": 836052,
      "total-ns": 4428350,
      "patts-hit": {},
      "rewritten": "def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]]\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    for i in range(min(nCol, nGraphShown)):\n        columnDf = df.iloc[:, i]\n        if not np.issubdtype(type(columnDf.iloc[0]), np.number):\n            valueCounts = columnDf.value_counts()\n"
    },
    {
      "raw": "# Scatter and density plots\n# ALEX: remove unused code\n# def plotScatterMatrix(df, plotSize, textSize):\n#     df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n#     # Remove rows and columns that would lead to df being singular\n#     df = df.dropna('columns')\n#     df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n#     columnNames = list(df)\n#     if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n#         columnNames = columnNames[:10]\n#     df = df[columnNames]\n#     ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n#     corrs = df.corr().values\n#     for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n#         ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n#     plt.suptitle('Scatter and Density Plot')\n#     plt.show()",
      "rewrite-ns": 19068,
      "overhead-ns": 19068,
      "exec-ns": 89537,
      "total-ns": 108605,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "#Distribui\u00e7\u00e3o dos dados de avalia\u00e7\u00e3o e ano\nplotPerColumnDistribution(ratings, 10, 5)",
      "rewrite-ns": 361937,
      "overhead-ns": 364954,
      "exec-ns": 107556793,
      "total-ns": 107918730,
      "patts-hit": {},
      "rewritten": "plotPerColumnDistribution(ratings, 10, 5)\n"
    },
    {
      "raw": "ratings.columns",
      "rewrite-ns": 80464,
      "overhead-ns": 80464,
      "exec-ns": 726480,
      "total-ns": 806944,
      "patts-hit": {},
      "rewritten": "ratings.columns\n"
    },
    {
      "raw": "#Quantidade de usu\u00e1rios\nratings['userId'].count()",
      "rewrite-ns": 405325,
      "overhead-ns": 405325,
      "exec-ns": 3541821,
      "total-ns": 3947146,
      "patts-hit": {},
      "rewritten": "ratings['userId'].count()\n"
    },
    {
      "raw": "ratings.groupby('timestamp')['userId'].count()",
      "rewrite-ns": 507138,
      "overhead-ns": 507138,
      "exec-ns": 43824633,
      "total-ns": 44331771,
      "patts-hit": {},
      "rewritten": "ratings.groupby('timestamp')['userId'].count()\n"
    },
    {
      "raw": "#Quantidade de usu\u00e1rios registrados por ano\n# ALEX: remove plotting\n# ratings.groupby('timestamp')['userId'].count().plot(figsize=(15,8), color=\"g\")\n# plt.ylabel(\"Qtd de usu\u00e1rios\")\n# plt.xlabel(\"Ano\")\n# plt.title(\"Contagem de usu\u00e1rios por ano\")\n# plt.show()\nratings.groupby('timestamp')['userId'].count()",
      "rewrite-ns": 566049,
      "overhead-ns": 566049,
      "exec-ns": 43499118,
      "total-ns": 44065167,
      "patts-hit": {},
      "rewritten": "ratings.groupby('timestamp')['userId'].count()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(10,5))\ndftmp = movies[['movieId', 'year']].groupby('year')\ndf = pd.DataFrame({'All_movies' : dftmp.movieId.nunique().cumsum()})\n\n#Histograma para cada g\u00eanero individual\nfor genre in genres_unique.genre:\n    dftmp = movies[movies[genre]][['movieId', 'year']].groupby('year')\n    df[genre]=dftmp.movieId.nunique().cumsum()\ndf.fillna(method='ffill', inplace=True)\n# ALEX: remove plotting\n# df.loc[:,df.columns!='All_movies'].plot.area(stacked=True, figsize=(15,8))\ndf.loc[:,df.columns!='All_movies']\n\n# Histograma de plotagem para todos os filmes\n# ALEX: remove plotting\n# plt.plot(df['All_movies'], marker='o', markerfacecolor='black')\n# plt.xlabel('Ano')\n# plt.ylabel('Acumulativo de filmes por g\u00eanero')\n# plt.title('Total de filmes por g\u00eanero') # Many movies have multiple genres, so counthere is higher than number of movies\n# plt.legend(loc=(1.05,0), ncol=2)\n# plt.show()\n\n# #  dispers\u00e3o simples do n\u00famero de filmes marcados com cada g\u00eanero\n# plt.figure(figsize=(15,8))\n# barlist = df.iloc[-1].sort_values().plot.bar()\n# barlist.patches[0].set_color('b')\n# plt.xticks(rotation='vertical')\n# plt.title('Filmes por g\u00eanero')\n# plt.xlabel('G\u00eanero')\n# plt.ylabel('N\u00famero de filmes')\n# plt.show()\n_ = df['All_movies']\n_ = df.iloc[-1].sort_values()",
      "rewrite-ns": 4070122,
      "overhead-ns": 4070122,
      "exec-ns": 28614693,
      "total-ns": 32684815,
      "patts-hit": {},
      "rewritten": "dftmp = movies[['movieId', 'year']].groupby('year')\ndf = pd.DataFrame({'All_movies': dftmp.movieId.nunique().cumsum()})\nfor genre in genres_unique.genre:\n    dftmp = movies[movies[genre]][['movieId', 'year']].groupby('year')\n    df[genre] = dftmp.movieId.nunique().cumsum()\ndf.fillna(method='ffill', inplace=True)\ndf.loc[:, df.columns != 'All_movies']\n_ = df['All_movies']\n_ = df.iloc[-1].sort_values()\n"
    },
    {
      "raw": "",
      "rewrite-ns": 15781,
      "overhead-ns": 15781,
      "exec-ns": 86045,
      "total-ns": 101826,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "dftmp = ratings[['movieId','rating']].groupby('movieId').mean()\n\n# inicializando uma lista vazia para capturar estat\u00edsticas b\u00e1sicas por g\u00eanero\nrating_stats = []\n# Histograma geral do lote de todas as classifica\u00e7\u00f5es\n# ALEX: remove plotting\n# dftmp.hist(bins=25, grid=False, edgecolor='b', normed=True, label ='All genres', figsize=(15,8))\n\n# Histograma com linhas kde para melhor visibilidade por g\u00eanero\nfor genre in genres_unique.genre:\n    dftmp = movies[movies[genre]==True]\n    dftmp = ratings[ratings.set_index('movieId').index.isin(dftmp.set_index('movieId').index)]\n    dftmp = dftmp[['movieId','rating']].groupby('movieId').mean()\n# ALEX: remove plotting\n#     dftmp.rating.plot(grid=False, alpha=0.6, kind='kde', label=genre)\n    dftmp.rating\n    avg = dftmp.rating.mean()\n    std = dftmp.rating.std()\n    rating_stats.append((genre, avg, std))\n# ALEX: remove plotting\n# plt.legend(loc=(1.05,0), ncol=2)\n# plt.xlim(0,5)\n# plt.xlabel('Avalia\u00e7\u00f5es')\n# plt.ylabel('Densidade')\n# plt.title('Histograma de avalia\u00e7\u00e3o de filmes')\n# plt.show()",
      "rewrite-ns": 3705678,
      "overhead-ns": 3705678,
      "exec-ns": 1661540962,
      "total-ns": 1665246640,
      "patts-hit": {},
      "rewritten": "dftmp = ratings[['movieId', 'rating']].groupby('movieId').mean()\nrating_stats = []\nfor genre in genres_unique.genre:\n    dftmp = movies[movies[genre] == True]\n    dftmp = ratings[ratings.set_index('movieId').index.isin(dftmp.set_index\n        ('movieId').index)]\n    dftmp = dftmp[['movieId', 'rating']].groupby('movieId').mean()\n    dftmp.rating\n    avg = dftmp.rating.mean()\n    std = dftmp.rating.std()\n    rating_stats.append((genre, avg, std))\n"
    },
    {
      "raw": "",
      "rewrite-ns": 21670,
      "overhead-ns": 21670,
      "exec-ns": 113815,
      "total-ns": 135485,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 6.550674543,
  "max-disk-in-mb": 0
}