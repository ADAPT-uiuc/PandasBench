{
  "max-mem-in-mb": 109,
  "max-mem-in-mb2": 113,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# ALEX: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('./input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session",
      "rewrite-ns": 689917,
      "overhead-ns": 689917,
      "exec-ns": 383221,
      "total-ns": 1073138,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# import pandas as pd\n# import numpy as np\n\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', None)\n\n# For scaling the data\n# ALEX: remove ML code\n# from sklearn.preprocessing import StandardScaler\n\n# # To perform K-means clustering\n# from sklearn.cluster import KMeans\n\n\n# #To perform hierarchical clustering\n# from scipy.cluster.hierarchy import linkage\n# from scipy.cluster.hierarchy import dendrogram\n# from scipy.cluster.hierarchy import cut_tree",
      "rewrite-ns": 898391,
      "overhead-ns": 898391,
      "exec-ns": 383545,
      "total-ns": 1281936,
      "patts-hit": {},
      "rewritten": "pd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', None)\n"
    },
    {
      "raw": "data_dict = pd.read_csv('./input/data-dictionary.scaled.csv')",
      "rewrite-ns": 519070,
      "overhead-ns": 519070,
      "exec-ns": 2577995,
      "total-ns": 3097065,
      "patts-hit": {},
      "rewritten": "data_dict = pd.read_csv('./input/data-dictionary.scaled.csv')\n"
    },
    {
      "raw": "data_dict",
      "rewrite-ns": 89027,
      "overhead-ns": 89027,
      "exec-ns": 2988871,
      "total-ns": 3077898,
      "patts-hit": {},
      "rewritten": "data_dict\n"
    },
    {
      "raw": "countries = pd.read_csv('./input/Country-data.scaled.csv')",
      "rewrite-ns": 522322,
      "overhead-ns": 522322,
      "exec-ns": 2222075,
      "total-ns": 2744397,
      "patts-hit": {},
      "rewritten": "countries = pd.read_csv('./input/Country-data.scaled.csv')\n"
    },
    {
      "raw": "countries.head()",
      "rewrite-ns": 118182,
      "overhead-ns": 118182,
      "exec-ns": 4144765,
      "total-ns": 4262947,
      "patts-hit": {},
      "rewritten": "countries.head()\n"
    },
    {
      "raw": "countries.shape",
      "rewrite-ns": 81307,
      "overhead-ns": 81307,
      "exec-ns": 641469,
      "total-ns": 722776,
      "patts-hit": {},
      "rewritten": "countries.shape\n"
    },
    {
      "raw": "# features = ['exports', 'health', 'imports']\n# for feature in features:\n#     countries[feature] = countries[feature]*countries['gdpp']/100\ncountries[['exports', 'health', 'imports']]= \\\n                                countries[['exports', 'health', 'imports']].multiply(countries[\"gdpp\"]/100, axis=\"index\")\n",
      "rewrite-ns": 1488541,
      "overhead-ns": 1488541,
      "exec-ns": 2256742,
      "total-ns": 3745283,
      "patts-hit": {},
      "rewritten": "countries[['exports', 'health', 'imports']] = countries[['exports',\n    'health', 'imports']].multiply(countries['gdpp'] / 100, axis='index')\n"
    },
    {
      "raw": "countries.head()",
      "rewrite-ns": 116319,
      "overhead-ns": 116319,
      "exec-ns": 3764920,
      "total-ns": 3881239,
      "patts-hit": {},
      "rewritten": "countries.head()\n"
    },
    {
      "raw": "countries.info()",
      "rewrite-ns": 116517,
      "overhead-ns": 116517,
      "exec-ns": 5924617,
      "total-ns": 6041134,
      "patts-hit": {},
      "rewritten": "countries.info()\n"
    },
    {
      "raw": "#checking for duplicates\ncountries.duplicated(subset = ['country'], keep = False).sum()",
      "rewrite-ns": 795074,
      "overhead-ns": 795074,
      "exec-ns": 1023227,
      "total-ns": 1818301,
      "patts-hit": {},
      "rewritten": "countries.duplicated(subset=['country'], keep=False).sum()\n"
    },
    {
      "raw": "# Checking for null values in the column\ncountries.isnull().sum()",
      "rewrite-ns": 505144,
      "overhead-ns": 505144,
      "exec-ns": 1827375,
      "total-ns": 2332519,
      "patts-hit": {},
      "rewritten": "countries.isnull().sum()\n"
    },
    {
      "raw": "countries.describe(percentiles=[.25,.5,.75,.90,.95,.99])",
      "rewrite-ns": 208435,
      "overhead-ns": 208435,
      "exec-ns": 18079539,
      "total-ns": 18287974,
      "patts-hit": {},
      "rewritten": "countries.describe(percentiles=[0.25, 0.5, 0.75, 0.9, 0.95, 0.99])\n"
    },
    {
      "raw": "features = countries.columns\nfeatures",
      "rewrite-ns": 394798,
      "overhead-ns": 394798,
      "exec-ns": 782729,
      "total-ns": 1177527,
      "patts-hit": {},
      "rewritten": "features = countries.columns\nfeatures\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# fig = plt.figure(figsize=(15,25))\nfor plot, feature in enumerate(features[1:]):\n# ALEX: remove plotting\n#     fig.add_subplot(5,3,plot+1)\n#     sns.boxplot(x=countries[feature], data=countries)\n    _ = countries[feature]\n                 ",
      "rewrite-ns": 1089242,
      "overhead-ns": 1089242,
      "exec-ns": 423804,
      "total-ns": 1513046,
      "patts-hit": {},
      "rewritten": "for plot, feature in enumerate(features[1:]):\n    _ = countries[feature]\n"
    },
    {
      "raw": "#Caluclating the quantile1 and quantile3 for gdpp and removing the upper outliers\nQ1 = countries.gdpp.quantile(0.05)\nQ3 = countries.gdpp.quantile(0.95)\n\ncountries[(countries.gdpp > Q3)]",
      "rewrite-ns": 1541645,
      "overhead-ns": 1541645,
      "exec-ns": 6591657,
      "total-ns": 8133302,
      "patts-hit": {},
      "rewritten": "Q1 = countries.gdpp.quantile(0.05)\nQ3 = countries.gdpp.quantile(0.95)\ncountries[countries.gdpp > Q3]\n"
    },
    {
      "raw": "countries = countries[(countries.gdpp <= Q3)]",
      "rewrite-ns": 667925,
      "overhead-ns": 667925,
      "exec-ns": 781102,
      "total-ns": 1449027,
      "patts-hit": {},
      "rewritten": "countries = countries[countries.gdpp <= Q3]\n"
    },
    {
      "raw": "countries.shape",
      "rewrite-ns": 77432,
      "overhead-ns": 77432,
      "exec-ns": 644053,
      "total-ns": 721485,
      "patts-hit": {},
      "rewritten": "countries.shape\n"
    },
    {
      "raw": "countries.head(5)",
      "rewrite-ns": 133597,
      "overhead-ns": 133597,
      "exec-ns": 3750598,
      "total-ns": 3884195,
      "patts-hit": {},
      "rewritten": "countries.head(5)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# fig = plt.figure(figsize=(20,35))\n# sns.pairplot(countries,diag_kind='kde',corner=True)",
      "rewrite-ns": 20789,
      "overhead-ns": 20789,
      "exec-ns": 116518,
      "total-ns": 137307,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize = (15,5))\nchild_mort_top10 = countries[['country','child_mort']].sort_values('child_mort', ascending = False).head(10)\n# ALEX: remove plotting\n# ax=sns.barplot(x='country', y='child_mort', data= child_mort_top10)\n\n# for p in ax.patches:\n#     ax.annotate(str(p.get_height()), (p.get_x() * 1.05 , p.get_height() * 1.01))\n# ax.set(xlabel = '', ylabel= 'Child Mortality Rate')\n# plt.xticks(rotation=45)",
      "rewrite-ns": 510592,
      "overhead-ns": 510592,
      "exec-ns": 2403308,
      "total-ns": 2913900,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "child_mort_top10 = dias.rewriter.sort_head(called_on=countries[['country',\n    'child_mort']], by='child_mort', n=10, asc=False, orig=lambda _DIAS_x:\n    _DIAS_x.sort_values('child_mort', ascending=False).head(10))\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize = (15,5))\nhealth = countries[['country','health']].sort_values('health', ascending = True).head(10)\n# ALEX: remove plotting\n# ax = sns.barplot(x='country', y='health', data= health)\n# ax.set(xlabel = '', ylabel= 'Health')\n# plt.xticks(rotation=90)",
      "rewrite-ns": 493374,
      "overhead-ns": 493374,
      "exec-ns": 2219899,
      "total-ns": 2713273,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "health = dias.rewriter.sort_head(called_on=countries[['country', 'health']],\n    by='health', n=10, asc=True, orig=lambda _DIAS_x: _DIAS_x.sort_values(\n    'health', ascending=True).head(10))\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize = (15,5))\nincome_lowets_10 = countries[['country','income']].sort_values('income', ascending = True).head(10)\n# ALEX: remove plotting\n# axes = sns.barplot(x='country', y='income', data= income_lowets_10)\n# axes.set(xlabel = '', ylabel= 'Per Capita Income')\n# plt.xticks(rotation=90)",
      "rewrite-ns": 486066,
      "overhead-ns": 486066,
      "exec-ns": 2187119,
      "total-ns": 2673185,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "income_lowets_10 = dias.rewriter.sort_head(called_on=countries[['country',\n    'income']], by='income', n=10, asc=True, orig=lambda _DIAS_x: _DIAS_x.\n    sort_values('income', ascending=True).head(10))\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize = (15,5))\nhigh_inflation = countries[['country','inflation']].sort_values('inflation', ascending = False).head(10)\n# ALEX: remove plotting\n# ax = sns.barplot(x='country', y='inflation', data= high_inflation)\n# ax.set(xlabel = '', ylabel= 'Inflation')\n# plt.xticks(rotation=90)\n",
      "rewrite-ns": 489837,
      "overhead-ns": 489837,
      "exec-ns": 2194014,
      "total-ns": 2683851,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "high_inflation = dias.rewriter.sort_head(called_on=countries[['country',\n    'inflation']], by='inflation', n=10, asc=False, orig=lambda _DIAS_x:\n    _DIAS_x.sort_values('inflation', ascending=False).head(10))\n"
    },
    {
      "raw": "#Find the Hopkins statistic score\n# ALEX: remove ML code\n# from sklearn.neighbors import NearestNeighbors\n# from random import sample\n# from numpy.random import uniform\n# import numpy as np\n# from math import isnan\n \ndef hopkins(X):\n    d = X.shape[1]\n    #d = len(vars) # columns\n    n = len(X) # rows\n# ALEX: remove ML code\n#     m = int(0.1 * n) \n#     nbrs = NearestNeighbors(n_neighbors=1).fit(X.values)\n \n#     rand_X = sample(range(0, n, 1), m)\n \n#     ujd = []\n#     wjd = []\n#     for j in range(0, m):\n#         u_dist, _ = nbrs.kneighbors(uniform(np.amin(X,axis=0),np.amax(X,axis=0),d).reshape(1, -1), 2, return_distance=True)\n#         ujd.append(u_dist[0][1])\n#         w_dist, _ = nbrs.kneighbors(X.iloc[rand_X[j]].values.reshape(1, -1), 2, return_distance=True)\n#         wjd.append(w_dist[0][1])\n \n#     H = sum(ujd) / (sum(ujd) + sum(wjd))\n#     if isnan(H):\n#         print(ujd, wjd)\n#         H = 0\n \n#     return H\n    _ = X.values",
      "rewrite-ns": 1228871,
      "overhead-ns": 1228871,
      "exec-ns": 419653,
      "total-ns": 1648524,
      "patts-hit": {},
      "rewritten": "def hopkins(X):\n    d = X.shape[1]\n    n = len(X)\n    _ = X.values\n"
    },
    {
      "raw": "hopkins(countries.drop('country', axis = 1))",
      "rewrite-ns": 644900,
      "overhead-ns": 644900,
      "exec-ns": 948547,
      "total-ns": 1593447,
      "patts-hit": {},
      "rewritten": "hopkins(countries.drop('country', axis=1))\n"
    },
    {
      "raw": "features = countries.columns\n# ALEX: remove ML code\n# standard_scaler = StandardScaler()\n# countries_scaled= standard_scaler.fit_transform(countries.drop('country', axis=1))\ncountries_scaled= countries.drop('country', axis=1)\ncountries_scaled",
      "rewrite-ns": 1010627,
      "overhead-ns": 1010627,
      "exec-ns": 5812999,
      "total-ns": 6823626,
      "patts-hit": {},
      "rewritten": "features = countries.columns\ncountries_scaled = countries.drop('country', axis=1)\ncountries_scaled\n"
    },
    {
      "raw": "country_norm = pd.DataFrame(countries_scaled)\ncountry_norm.columns = features[1:]\ncountry_norm.head()",
      "rewrite-ns": 1029883,
      "overhead-ns": 1029883,
      "exec-ns": 3719634,
      "total-ns": 4749517,
      "patts-hit": {},
      "rewritten": "country_norm = pd.DataFrame(countries_scaled)\ncountry_norm.columns = features[1:]\ncountry_norm.head()\n"
    },
    {
      "raw": "# ALEX: remove ML code, plotting\n# from sklearn.metrics import silhouette_score\n# ss = []\n# for k in range(2, 15):\n#     kmean = KMeans(n_clusters = k).fit(country_norm)\n#     ss.append([k, silhouette_score(country_norm, kmean.labels_)])\n# temp = pd.DataFrame(ss)    \n# plt.plot(temp[0], temp[1])",
      "rewrite-ns": 21636,
      "overhead-ns": 21636,
      "exec-ns": 107690,
      "total-ns": 129326,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# sum of squared distances\n# ALEX: remove ML code, plotting\n# ssd = []\n# for num_clusters in list(range(1,21)):\n#     model_clus = KMeans(n_clusters = num_clusters, max_iter=50)\n#     model_clus.fit(country_norm)\n#     ssd.append(model_clus.inertia_)\n\n    \n# fig, ax = plt.subplots()\n# ax.plot(range(1,21),ssd, marker = '+',color = 'red' , ls = '--', markeredgecolor = 'blue', markersize = '10')",
      "rewrite-ns": 19773,
      "overhead-ns": 19773,
      "exec-ns": 94749,
      "total-ns": 114522,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# kmeans_clus4 = KMeans(n_clusters=4, max_iter=50, random_state= 50)\n# kmeans_clus4.fit(country_norm)",
      "rewrite-ns": 17120,
      "overhead-ns": 17120,
      "exec-ns": 89566,
      "total-ns": 106686,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# kmeans_clus4.labels_",
      "rewrite-ns": 16136,
      "overhead-ns": 16136,
      "exec-ns": 87475,
      "total-ns": 103611,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "#Finding the labels and converting it to series so that it can be appended to the `original countries` easily.\n# ALEX: remove ML code\n# labels_kmeans = pd.Series(kmeans_clus4.labels_, index=countries.index)",
      "rewrite-ns": 17112,
      "overhead-ns": 17112,
      "exec-ns": 85976,
      "total-ns": 103088,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "#Adding the labels to countries dataset\ncountries_kmeans = countries.copy()\n# ALEX: remove ML code\n# countries_kmeans['Labels'] = labels_kmeans\ncountries_kmeans.head()",
      "rewrite-ns": 504743,
      "overhead-ns": 504743,
      "exec-ns": 3841783,
      "total-ns": 4346526,
      "patts-hit": {},
      "rewritten": "countries_kmeans = countries.copy()\ncountries_kmeans.head()\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# countries_kmeans['Labels'].value_counts()",
      "rewrite-ns": 20910,
      "overhead-ns": 20910,
      "exec-ns": 104129,
      "total-ns": 125039,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# axes = sns.scatterplot(x='gdpp',y='child_mort',hue='Labels',legend='full',data=countries_kmeans, palette=['green','orange','brown','red'])\n# axes.set(xlabel = 'GDPP', ylabel= 'Child Mortality Rate')",
      "rewrite-ns": 18896,
      "overhead-ns": 18896,
      "exec-ns": 94191,
      "total-ns": 113087,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# axes = sns.scatterplot(x='gdpp',y='income',hue='Labels',legend='full',data=countries_kmeans, palette=['green','orange','brown','red'])\n# axes.set(xlabel = 'GDPP', ylabel= 'Income')",
      "rewrite-ns": 17846,
      "overhead-ns": 17846,
      "exec-ns": 91519,
      "total-ns": 109365,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# axes= sns.scatterplot(x='income',y='child_mort',hue='Labels',legend='full',data=countries_kmeans, palette=['green','orange','brown','red'])\n# axes.set(xlabel = 'Child Mortality Rate', ylabel= 'Income')",
      "rewrite-ns": 17557,
      "overhead-ns": 17557,
      "exec-ns": 86994,
      "total-ns": 104551,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# child_mort_mean =pd.DataFrame(countries_kmeans.groupby([\"Labels\"]).child_mort.mean())\n# exports_mean=pd.DataFrame(countries_kmeans.groupby([\"Labels\"]).exports.mean())\n# health_mean =pd.DataFrame(countries_kmeans.groupby([\"Labels\"]).health.mean())\n# imports_mean =pd.DataFrame(countries_kmeans.groupby([\"Labels\"]).imports.mean())\n# income_mean =pd.DataFrame(countries_kmeans.groupby([\"Labels\"]).income.mean())\n# inflat_mean =pd.DataFrame(countries_kmeans.groupby([\"Labels\"]).inflation.mean())\n# life_expec_mean =pd.DataFrame(countries_kmeans.groupby([\"Labels\"]).life_expec.mean())\n# total_fer_mean =pd.DataFrame(countries_kmeans.groupby([\"Labels\"]).total_fer.mean())\n# gdpp_mean =pd.DataFrame(countries_kmeans.groupby([\"Labels\"]).gdpp.mean())",
      "rewrite-ns": 20216,
      "overhead-ns": 20216,
      "exec-ns": 86773,
      "total-ns": 106989,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# cluster_analysis_df = pd.concat([pd.Series([0,1,2,3]),child_mort_mean,exports_mean,health_mean,imports_mean,income_mean,inflat_mean,life_expec_mean,\n#                                  total_fer_mean,gdpp_mean], axis=1)",
      "rewrite-ns": 17040,
      "overhead-ns": 17040,
      "exec-ns": 84724,
      "total-ns": 101764,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# cluster_analysis_df.columns = [\"Labels\",\"child_mort_mean\",\"exports_mean\",\"health_mean\",\"imports_mean\",\"income_mean\",\"inflation_mean\",\"life_expec_mean\",\"total_fer_mean\",\"gdpp_mean\"]\n# cluster_analysis_df",
      "rewrite-ns": 16833,
      "overhead-ns": 16833,
      "exec-ns": 84256,
      "total-ns": 101089,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code, plotting\n# features = cluster_analysis_df.columns\n# fig = plt.figure(figsize=(18,15))\n# for plot, feature in enumerate(features[1:]):\n#     fig.add_subplot(3,3,plot+1)\n#     sns.barplot(cluster_analysis_df.Labels, cluster_analysis_df[feature])",
      "rewrite-ns": 16838,
      "overhead-ns": 16838,
      "exec-ns": 84569,
      "total-ns": 101407,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "#Binning the clusters to get the top 5 countries sorted in order exaplined above\n# ALEX: remove ML code\n# clustered_kmeans=countries[countries_kmeans['Labels']==1]\n# clustered_kmeans.sort_values(['gdpp','income','child_mort','health','inflation','life_expec','total_fer','imports','exports'], \n#                       ascending=[True,True,False,True,False,True,False,False,True]).head(10)\n",
      "rewrite-ns": 17475,
      "overhead-ns": 17475,
      "exec-ns": 83465,
      "total-ns": 100940,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "country_norm.shape",
      "rewrite-ns": 76687,
      "overhead-ns": 76687,
      "exec-ns": 605759,
      "total-ns": 682446,
      "patts-hit": {},
      "rewritten": "country_norm.shape\n"
    },
    {
      "raw": "country_norm.head()",
      "rewrite-ns": 113794,
      "overhead-ns": 113794,
      "exec-ns": 3526851,
      "total-ns": 3640645,
      "patts-hit": {},
      "rewritten": "country_norm.head()\n"
    },
    {
      "raw": "countries_hrcl  = country_norm.copy()\n# ALEX: remove plotting\n# fig = plt.figure(figsize = (25,8))\n# mergings = linkage(countries_hrcl, method = \"single\", metric='euclidean')\n# dendrogram(mergings)\n# plt.show()",
      "rewrite-ns": 454132,
      "overhead-ns": 454132,
      "exec-ns": 363637,
      "total-ns": 817769,
      "patts-hit": {},
      "rewritten": "countries_hrcl = country_norm.copy()\n"
    },
    {
      "raw": "# HC with complete method\n# ALEX: remove plotting\n# fig = plt.figure(figsize = (25, 8))\n# mergings = linkage(countries_hrcl, method = \"complete\", metric='euclidean')\n# dendrogram(mergings)\n# plt.show()",
      "rewrite-ns": 28917,
      "overhead-ns": 28917,
      "exec-ns": 99341,
      "total-ns": 128258,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "countries",
      "rewrite-ns": 65713,
      "overhead-ns": 65713,
      "exec-ns": 5276069,
      "total-ns": 5341782,
      "patts-hit": {},
      "rewritten": "countries\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# clusterCut = cut_tree(mergings, n_clusters = 4).reshape(-1,)\n# clusterCut",
      "rewrite-ns": 21008,
      "overhead-ns": 21008,
      "exec-ns": 105864,
      "total-ns": 126872,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "",
      "rewrite-ns": 17955,
      "overhead-ns": 17955,
      "exec-ns": 94586,
      "total-ns": 112541,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "countries_hrcl_cluster = countries.copy()\ncountries_hrcl_cluster.head()",
      "rewrite-ns": 507098,
      "overhead-ns": 507098,
      "exec-ns": 3869548,
      "total-ns": 4376646,
      "patts-hit": {},
      "rewritten": "countries_hrcl_cluster = countries.copy()\ncountries_hrcl_cluster.head()\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# countries_hrcl_cluster['Labels'] = pd.Series(clusterCut, index=countries.index)\ncountries_hrcl_cluster.head()",
      "rewrite-ns": 121496,
      "overhead-ns": 121496,
      "exec-ns": 3888619,
      "total-ns": 4010115,
      "patts-hit": {},
      "rewritten": "countries_hrcl_cluster.head()\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# countries_hrcl_cluster['Labels'].value_counts()",
      "rewrite-ns": 19988,
      "overhead-ns": 19988,
      "exec-ns": 107386,
      "total-ns": 127374,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# axes = sns.scatterplot(x='gdpp', y='child_mort', hue='Labels',legend='full',data=countries_hrcl_cluster, palette=['green','orange','brown','red'])\n# axes.set(xlabel = 'GDPP', ylabel= 'Child Mortality Rate')",
      "rewrite-ns": 18848,
      "overhead-ns": 18848,
      "exec-ns": 96662,
      "total-ns": 115510,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# axes = sns.scatterplot(x='gdpp',y='income',hue='Labels',legend='full',data=countries_hrcl_cluster, palette=['green','orange','brown','red'])\n# axes.set(xlabel = 'GDPP', ylabel= 'Income')",
      "rewrite-ns": 18030,
      "overhead-ns": 18030,
      "exec-ns": 90040,
      "total-ns": 108070,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# axes= sns.scatterplot(x='income',y='child_mort',hue='Labels',legend='full',data=countries_hrcl_cluster, palette=['green','orange','brown','red'])\n# axes.set(xlabel = 'Child Mortality Rate', ylabel= 'Income')",
      "rewrite-ns": 17556,
      "overhead-ns": 17556,
      "exec-ns": 87779,
      "total-ns": 105335,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# child_mort_mean =pd.DataFrame(countries_hrcl_cluster.groupby([\"Labels\"]).child_mort.mean())\n# exports_mean=pd.DataFrame(countries_hrcl_cluster.groupby([\"Labels\"]).exports.mean())\n# health_mean =pd.DataFrame(countries_hrcl_cluster.groupby([\"Labels\"]).health.mean())\n# imports_mean =pd.DataFrame(countries_hrcl_cluster.groupby([\"Labels\"]).imports.mean())\n# income_mean =pd.DataFrame(countries_hrcl_cluster.groupby([\"Labels\"]).income.mean())\n# inflat_mean =pd.DataFrame(countries_hrcl_cluster.groupby([\"Labels\"]).inflation.mean())\n# life_expec_mean =pd.DataFrame(countries_hrcl_cluster.groupby([\"Labels\"]).life_expec.mean())\n# total_fer_mean =pd.DataFrame(countries_hrcl_cluster.groupby([\"Labels\"]).total_fer.mean())\n# gdpp_mean =pd.DataFrame(countries_hrcl_cluster.groupby([\"Labels\"]).gdpp.mean())",
      "rewrite-ns": 20123,
      "overhead-ns": 20123,
      "exec-ns": 85631,
      "total-ns": 105754,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# hrcl_cluster_analysis_df = pd.concat([pd.Series([0,1,2,3]),child_mort_mean,exports_mean,health_mean,imports_mean,income_mean,inflat_mean,life_expec_mean,\n#                                  total_fer_mean,gdpp_mean], axis=1)",
      "rewrite-ns": 16942,
      "overhead-ns": 16942,
      "exec-ns": 86366,
      "total-ns": 103308,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# hrcl_cluster_analysis_df.columns = [\"Labels\",\"child_mort_mean\",\"exports_mean\",\"health_mean\",\"imports_mean\",\"income_mean\",\"inflation_mean\",\"life_expec_mean\",\"total_fer_mean\",\"gdpp_mean\"]\n# hrcl_cluster_analysis_df",
      "rewrite-ns": 17407,
      "overhead-ns": 17407,
      "exec-ns": 85101,
      "total-ns": 102508,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code, plotting\n# features = hrcl_cluster_analysis_df.columns\n# fig = plt.figure(figsize=(18,15))\n# for plot, feature in enumerate(features[1:]):\n#     fig.add_subplot(3,3,plot+1)\n#     sns.barplot(hrcl_cluster_analysis_df.Labels, hrcl_cluster_analysis_df[feature])",
      "rewrite-ns": 16705,
      "overhead-ns": 16705,
      "exec-ns": 85510,
      "total-ns": 102215,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "#Binning the clusters to get the top 5 countries sorted in order exaplined above\n# ALEX: remove ML code\n# clustered_hrcl=countries[countries_hrcl_cluster['Labels']==0]\n# clustered_hrcl.sort_values(['gdpp','income','child_mort','health','inflation','life_expec','total_fer','imports','exports'], \n#                       ascending=[True,True,False,True,False,True,False,False,True]).head(10)\n",
      "rewrite-ns": 18107,
      "overhead-ns": 18107,
      "exec-ns": 88306,
      "total-ns": 106413,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "",
      "rewrite-ns": 15361,
      "overhead-ns": 15361,
      "exec-ns": 85770,
      "total-ns": 101131,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "",
      "rewrite-ns": 15083,
      "overhead-ns": 15083,
      "exec-ns": 85558,
      "total-ns": 100641,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "",
      "rewrite-ns": 15178,
      "overhead-ns": 15178,
      "exec-ns": 85161,
      "total-ns": 100339,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 0.121565481,
  "max-disk-in-mb": 0
}