{
  "max-mem-in-mb": 109,
  "max-mem-in-mb2": 112,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n# FIRST-AUTHOR: remove plotting\n# import matplotlib.pyplot as plt #plotting!\n# import seaborn as sns #cute messing with style\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# FIRST-AUTHOR: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('./input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session",
      "rewrite-ns": 698101,
      "overhead-ns": 698101,
      "exec-ns": 409507,
      "total-ns": 1107608,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\n"
    },
    {
      "raw": "# FIRST-AUTHOR: removed plotting\n# %matplotlib inline\n# sns.set_style('darkgrid')\ndf = pd.read_csv('./input/highereducationstudentsperformanceevaluation/DATA (1).scaled.csv')\ndf.head()",
      "rewrite-ns": 598732,
      "overhead-ns": 598732,
      "exec-ns": 24296019,
      "total-ns": 24894751,
      "patts-hit": {},
      "rewritten": "df = pd.read_csv(\n    './input/highereducationstudentsperformanceevaluation/DATA (1).scaled.csv')\ndf.head()\n"
    },
    {
      "raw": "df.shape",
      "rewrite-ns": 87275,
      "overhead-ns": 87275,
      "exec-ns": 721572,
      "total-ns": 808847,
      "patts-hit": {},
      "rewritten": "df.shape\n"
    },
    {
      "raw": "df.info()",
      "rewrite-ns": 118090,
      "overhead-ns": 118090,
      "exec-ns": 6587802,
      "total-ns": 6705892,
      "patts-hit": {},
      "rewritten": "df.info()\n"
    },
    {
      "raw": "# Rename columns\ndf.rename(columns={'1': 'AGE', '7': 'SINGLE','20':'ATTENDENCE','25':'NOTETAKING','30': 'GPA'}, inplace=True)\n\n# Access the renamed columns using loc\npreview_columns = ['AGE', 'SINGLE', 'NOTETAKING','GPA','GRADE']\ndf.loc[:, preview_columns].head()",
      "rewrite-ns": 2203983,
      "overhead-ns": 2203983,
      "exec-ns": 5944457,
      "total-ns": 8148440,
      "patts-hit": {},
      "rewritten": "df.rename(columns={'1': 'AGE', '7': 'SINGLE', '20': 'ATTENDENCE', '25':\n    'NOTETAKING', '30': 'GPA'}, inplace=True)\npreview_columns = ['AGE', 'SINGLE', 'NOTETAKING', 'GPA', 'GRADE']\ndf.loc[:, preview_columns].head()\n"
    },
    {
      "raw": "df_clean = df.copy()\n\n# List of columns to keep\nselected_columns = [\n    'AGE',\n    'SINGLE',\n    'NOTETAKING',\n    'GPA',\n    'GRADE',\n    'ATTENDENCE',\n]\n\n# Get the list of columns that exist in the DataFrame but are not in the selected_columns list\ncolumns_to_remove = [col for col in df_clean.columns if col not in selected_columns]\n\n# Drop the columns that are not in the selected_columns list\ndf_clean.drop(columns=columns_to_remove, inplace=True)\n\n# Display DataFrame info to verify\ndf_clean.info()",
      "rewrite-ns": 2316276,
      "overhead-ns": 2316276,
      "exec-ns": 4929902,
      "total-ns": 7246178,
      "patts-hit": {},
      "rewritten": "df_clean = df.copy()\nselected_columns = ['AGE', 'SINGLE', 'NOTETAKING', 'GPA', 'GRADE', 'ATTENDENCE'\n    ]\ncolumns_to_remove = [col for col in df_clean.columns if col not in\n    selected_columns]\ndf_clean.drop(columns=columns_to_remove, inplace=True)\ndf_clean.info()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(16, 12))\n# sns.heatmap(df_clean.drop('GPA', axis=1).corr(), cmap='YlGnBu', annot=True, fmt='.2f', vmin=0);\n_ = df_clean.drop('GPA', axis=1).corr()",
      "rewrite-ns": 760292,
      "overhead-ns": 760292,
      "exec-ns": 1033246,
      "total-ns": 1793538,
      "patts-hit": {},
      "rewritten": "_ = df_clean.drop('GPA', axis=1).corr()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# df_clean.hist(alpha = 0.7, figsize=(12,10), bins=5);",
      "rewrite-ns": 21836,
      "overhead-ns": 21836,
      "exec-ns": 112615,
      "total-ns": 134451,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# %matplotlib inline\n# sns.set_style('darkgrid')\ndf = pd.read_csv('./input/highereducationstudentsperformanceevaluation/DATA (1).scaled.csv')\ndf.head()",
      "rewrite-ns": 594965,
      "overhead-ns": 594965,
      "exec-ns": 21207970,
      "total-ns": 21802935,
      "patts-hit": {},
      "rewritten": "df = pd.read_csv(\n    './input/highereducationstudentsperformanceevaluation/DATA (1).scaled.csv')\ndf.head()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(16, 12))\n# sns.heatmap(df.drop('30', axis=1).corr(), cmap='YlGnBu', annot=True, fmt='.2f', vmin=0);\n_ = df.drop('30', axis=1).corr()",
      "rewrite-ns": 764523,
      "overhead-ns": 764523,
      "exec-ns": 1658337,
      "total-ns": 2422860,
      "patts-hit": {},
      "rewritten": "_ = df.drop('30', axis=1).corr()\n"
    },
    {
      "raw": "df_cut = df.copy()\n#Cutting our data to make it more managable\ncolumns_to_remove = [\n    '3',\n    '9',\n    '10',\n    '14',\n    '15',\n    '16',\n    '21',\n    '23',\n    '24',\n    '28',\n    '5',\n    '6',\n    '7',\n    '20',\n    '22',\n    'COURSE ID',\n]\n# Drop the columns to remove\ndf_cut.drop(columns=columns_to_remove, inplace=True)\n\n# Display DataFrame info to verify\ndf_cut.info()",
      "rewrite-ns": 2137701,
      "overhead-ns": 2137701,
      "exec-ns": 5442388,
      "total-ns": 7580089,
      "patts-hit": {},
      "rewritten": "df_cut = df.copy()\ncolumns_to_remove = ['3', '9', '10', '14', '15', '16', '21', '23', '24',\n    '28', '5', '6', '7', '20', '22', 'COURSE ID']\ndf_cut.drop(columns=columns_to_remove, inplace=True)\ndf_cut.info()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(16, 12))\n# sns.heatmap(df_cut.drop('30', axis=1).corr(), cmap='YlGnBu', annot=True, fmt='.2f', vmin=0);\n_ = df_cut.drop('30', axis=1).corr()",
      "rewrite-ns": 781860,
      "overhead-ns": 781860,
      "exec-ns": 1255757,
      "total-ns": 2037617,
      "patts-hit": {},
      "rewritten": "_ = df_cut.drop('30', axis=1).corr()\n"
    },
    {
      "raw": "# Rename columns\ndf_cut.rename(columns={\n    '1': 'AGE',\n    '2': 'SEX',\n    '4': 'SCHOLSHIP',\n    '7': 'SINGLE',\n    '8': 'SALARY',\n    '11': 'MOTHERS_EDU',\n    '12': 'FATHERS_EDU',\n    '13': 'SIBLNIGS',\n    '17': 'STUDY_HOURS',\n    '18': 'READS_NON_FIC',\n    '19': 'READS_FIC',\n    '25': 'NOTETAKING',\n    '26': 'LISTENS',\n    '27': 'DISCUSSION',\n    '29': 'PAST_GPA',\n    '30': 'GPA',}, inplace=True)",
      "rewrite-ns": 2115339,
      "overhead-ns": 2115339,
      "exec-ns": 1088639,
      "total-ns": 3203978,
      "patts-hit": {},
      "rewritten": "df_cut.rename(columns={'1': 'AGE', '2': 'SEX', '4': 'SCHOLSHIP', '7':\n    'SINGLE', '8': 'SALARY', '11': 'MOTHERS_EDU', '12': 'FATHERS_EDU', '13':\n    'SIBLNIGS', '17': 'STUDY_HOURS', '18': 'READS_NON_FIC', '19':\n    'READS_FIC', '25': 'NOTETAKING', '26': 'LISTENS', '27': 'DISCUSSION',\n    '29': 'PAST_GPA', '30': 'GPA'}, inplace=True)\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(16, 12))\n# sns.heatmap(df_cut.drop('PAST_GPA', axis=1).corr(), cmap='YlGnBu', annot=True, fmt='.2f', vmin=0);\n_ = df_cut.drop('PAST_GPA', axis=1).corr()",
      "rewrite-ns": 754959,
      "overhead-ns": 754959,
      "exec-ns": 1248714,
      "total-ns": 2003673,
      "patts-hit": {},
      "rewritten": "_ = df_cut.drop('PAST_GPA', axis=1).corr()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(16, 12))\n# sns.heatmap(df_cut.drop('PAST_GPA', axis=1).corr(), cmap='YlGnBu', annot=True, fmt='.2f', vmin=0);\n_ = df_cut.drop('PAST_GPA', axis=1).corr()",
      "rewrite-ns": 756638,
      "overhead-ns": 756638,
      "exec-ns": 1222157,
      "total-ns": 1978795,
      "patts-hit": {},
      "rewritten": "_ = df_cut.drop('PAST_GPA', axis=1).corr()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# df_cut.hist(alpha = 0.7, figsize=(12,10), bins=5);",
      "rewrite-ns": 21985,
      "overhead-ns": 21985,
      "exec-ns": 112750,
      "total-ns": 134735,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "",
      "rewrite-ns": 20098,
      "overhead-ns": 20098,
      "exec-ns": 104786,
      "total-ns": 124884,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 0.092129271,
  "max-disk-in-mb": 0
}