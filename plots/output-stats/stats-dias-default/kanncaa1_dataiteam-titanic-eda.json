{
  "max-mem-in-mb": 111,
  "max-mem-in-mb2": 115,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n\n# ALEX: remove plotting\n# import matplotlib.pyplot as plt\n# plt.style.use(\"seaborn-whitegrid\")\n\n# import seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# ALEX: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('./input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.",
      "rewrite-ns": 916387,
      "overhead-ns": 916387,
      "exec-ns": 392365,
      "total-ns": 1308752,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')\n"
    },
    {
      "raw": "train_df = pd.read_csv(\"./input/train.scaled.csv\")\ntest_df = pd.read_csv(\"./input/test.scaled.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]",
      "rewrite-ns": 918384,
      "overhead-ns": 918384,
      "exec-ns": 4938438,
      "total-ns": 5856822,
      "patts-hit": {},
      "rewritten": "train_df = pd.read_csv('./input/train.scaled.csv')\ntest_df = pd.read_csv('./input/test.scaled.csv')\ntest_PassengerId = test_df['PassengerId']\n"
    },
    {
      "raw": "train_df.columns",
      "rewrite-ns": 59198,
      "overhead-ns": 59198,
      "exec-ns": 955019,
      "total-ns": 1014217,
      "patts-hit": {},
      "rewritten": "train_df.columns\n"
    },
    {
      "raw": "train_df.head()",
      "rewrite-ns": 74420,
      "overhead-ns": 74420,
      "exec-ns": 8122266,
      "total-ns": 8196686,
      "patts-hit": {},
      "rewritten": "train_df.head()\n"
    },
    {
      "raw": "train_df.describe()",
      "rewrite-ns": 74885,
      "overhead-ns": 74885,
      "exec-ns": 14177631,
      "total-ns": 14252516,
      "patts-hit": {},
      "rewritten": "train_df.describe()\n"
    },
    {
      "raw": "train_df.info()",
      "rewrite-ns": 74835,
      "overhead-ns": 74835,
      "exec-ns": 3602569,
      "total-ns": 3677404,
      "patts-hit": {},
      "rewritten": "train_df.info()\n"
    },
    {
      "raw": "def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n# ALEX: remove plotting\n#     plt.figure(figsize = (9,3))\n#     plt.bar(varValue.index, varValue)\n#     plt.xticks(varValue.index, varValue.index.values)\n#     plt.ylabel(\"Frequency\")\n#     plt.title(variable)\n#     plt.show()\n#     print(\"{}: \\n {}\".format(variable,varValue))\n    _ = varValue.index\n    _ = varValue.index\n    _ = varValue.index.values\n    _ = \"{}: \\n {}\".format(variable,varValue)\n    ",
      "rewrite-ns": 1690250,
      "overhead-ns": 1690250,
      "exec-ns": 559429,
      "total-ns": 2249679,
      "patts-hit": {},
      "rewritten": "def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    var = train_df[variable]\n    varValue = var.value_counts()\n    _ = varValue.index\n    _ = varValue.index\n    _ = varValue.index.values\n    _ = '{}: \\n {}'.format(variable, varValue)\n"
    },
    {
      "raw": "category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)",
      "rewrite-ns": 811919,
      "overhead-ns": 811919,
      "exec-ns": 2292450,
      "total-ns": 3104369,
      "patts-hit": {},
      "rewritten": "category1 = ['Survived', 'Sex', 'Pclass', 'Embarked', 'SibSp', 'Parch']\nfor c in category1:\n    bar_plot(c)\n"
    },
    {
      "raw": "category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))",
      "rewrite-ns": 1017285,
      "overhead-ns": 1017285,
      "exec-ns": 2456334,
      "total-ns": 3473619,
      "patts-hit": {},
      "rewritten": "category2 = ['Cabin', 'Name', 'Ticket']\nfor c in category2:\n    print('{} \\n'.format(train_df[c].value_counts()))\n"
    },
    {
      "raw": "def plot_hist(variable):\n# ALEX: remove plotting\n#     plt.figure(figsize = (9,3))\n#     plt.hist(train_df[variable], bins = 50)\n#     plt.xlabel(variable)\n#     plt.ylabel(\"Frequency\")\n#     plt.title(\"{} distribution with hist\".format(variable))\n#     plt.show()\n    _ = train_df[variable]\n    _ = \"{} distribution with hist\".format(variable)",
      "rewrite-ns": 716074,
      "overhead-ns": 716074,
      "exec-ns": 273604,
      "total-ns": 989678,
      "patts-hit": {},
      "rewritten": "def plot_hist(variable):\n    _ = train_df[variable]\n    _ = '{} distribution with hist'.format(variable)\n"
    },
    {
      "raw": "numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)",
      "rewrite-ns": 656187,
      "overhead-ns": 656187,
      "exec-ns": 278475,
      "total-ns": 934662,
      "patts-hit": {},
      "rewritten": "numericVar = ['Fare', 'Age', 'PassengerId']\nfor n in numericVar:\n    plot_hist(n)\n"
    },
    {
      "raw": "# Plcass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)",
      "rewrite-ns": 960712,
      "overhead-ns": 960712,
      "exec-ns": 3832462,
      "total-ns": 4793174,
      "patts-hit": {},
      "rewritten": "train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean(\n    ).sort_values(by='Survived', ascending=False)\n"
    },
    {
      "raw": "# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)",
      "rewrite-ns": 976697,
      "overhead-ns": 976697,
      "exec-ns": 3861093,
      "total-ns": 4837790,
      "patts-hit": {},
      "rewritten": "train_df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean(\n    ).sort_values(by='Survived', ascending=False)\n"
    },
    {
      "raw": "# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)",
      "rewrite-ns": 966797,
      "overhead-ns": 966797,
      "exec-ns": 3835067,
      "total-ns": 4801864,
      "patts-hit": {},
      "rewritten": "train_df[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean(\n    ).sort_values(by='Survived', ascending=False)\n"
    },
    {
      "raw": "# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)",
      "rewrite-ns": 963399,
      "overhead-ns": 963399,
      "exec-ns": 3816078,
      "total-ns": 4779477,
      "patts-hit": {},
      "rewritten": "train_df[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean(\n    ).sort_values(by='Survived', ascending=False)\n"
    },
    {
      "raw": "def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers",
      "rewrite-ns": 4089540,
      "overhead-ns": 4089540,
      "exec-ns": 777671,
      "total-ns": 4867211,
      "patts-hit": {},
      "rewritten": "def detect_outliers(df, features):\n    outlier_indices = []\n    for c in features:\n        Q1 = np.percentile(df[c], 25)\n        Q3 = np.percentile(df[c], 75)\n        IQR = Q3 - Q1\n        outlier_step = IQR * 1.5\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 +\n            outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    return multiple_outliers\n"
    },
    {
      "raw": "train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]",
      "rewrite-ns": 590005,
      "overhead-ns": 590005,
      "exec-ns": 10253299,
      "total-ns": 10843304,
      "patts-hit": {},
      "rewritten": "train_df.loc[detect_outliers(train_df, ['Age', 'SibSp', 'Parch', 'Fare'])]\n"
    },
    {
      "raw": "# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)",
      "rewrite-ns": 903180,
      "overhead-ns": 903180,
      "exec-ns": 2833081,
      "total-ns": 3736261,
      "patts-hit": {},
      "rewritten": "train_df = train_df.drop(detect_outliers(train_df, ['Age', 'SibSp', 'Parch',\n    'Fare']), axis=0).reset_index(drop=True)\n"
    },
    {
      "raw": "train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)",
      "rewrite-ns": 923373,
      "overhead-ns": 923373,
      "exec-ns": 1740819,
      "total-ns": 2664192,
      "patts-hit": {},
      "rewritten": "train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis=0).reset_index(drop=True)\n"
    },
    {
      "raw": "train_df.head()",
      "rewrite-ns": 76597,
      "overhead-ns": 76597,
      "exec-ns": 7524136,
      "total-ns": 7600733,
      "patts-hit": {},
      "rewritten": "train_df.head()\n"
    },
    {
      "raw": "train_df.columns[train_df.isnull().any()]",
      "rewrite-ns": 493541,
      "overhead-ns": 493541,
      "exec-ns": 1496836,
      "total-ns": 1990377,
      "patts-hit": {},
      "rewritten": "train_df.columns[train_df.isnull().any()]\n"
    },
    {
      "raw": "train_df.isnull().sum()",
      "rewrite-ns": 349509,
      "overhead-ns": 349509,
      "exec-ns": 1670064,
      "total-ns": 2019573,
      "patts-hit": {},
      "rewritten": "train_df.isnull().sum()\n"
    },
    {
      "raw": "train_df[train_df[\"Embarked\"].isnull()]",
      "rewrite-ns": 453114,
      "overhead-ns": 453114,
      "exec-ns": 7502885,
      "total-ns": 7955999,
      "patts-hit": {},
      "rewritten": "train_df[train_df['Embarked'].isnull()]\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# train_df.boxplot(column=\"Fare\",by = \"Embarked\")\n# plt.show()",
      "rewrite-ns": 12774,
      "overhead-ns": 12774,
      "exec-ns": 68602,
      "total-ns": 81376,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]",
      "rewrite-ns": 751249,
      "overhead-ns": 751249,
      "exec-ns": 1612601,
      "total-ns": 2363850,
      "patts-hit": {
        "IsInplaceUpdate": 1
      },
      "rewritten": "_DIAS_ser = train_df['Embarked']\nif type(_DIAS_ser) != pd.Series:\n    train_df['Embarked'] = train_df['Embarked'].fillna('C')\nelse:\n    train_df['Embarked'].fillna('C', inplace=True)\ntrain_df[train_df['Embarked'].isnull()]\n"
    },
    {
      "raw": "train_df[train_df[\"Fare\"].isnull()]",
      "rewrite-ns": 444172,
      "overhead-ns": 444172,
      "exec-ns": 7395499,
      "total-ns": 7839671,
      "patts-hit": {},
      "rewritten": "train_df[train_df['Fare'].isnull()]\n"
    },
    {
      "raw": "train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))",
      "rewrite-ns": 559334,
      "overhead-ns": 559334,
      "exec-ns": 1132011,
      "total-ns": 1691345,
      "patts-hit": {
        "IsInplaceUpdate": 1
      },
      "rewritten": "_DIAS_ser = train_df['Fare']\nif type(_DIAS_ser) != pd.Series:\n    train_df['Fare'] = train_df['Fare'].fillna(np.mean(train_df[train_df[\n        'Pclass'] == 3]['Fare']))\nelse:\n    train_df['Fare'].fillna(np.mean(train_df[train_df['Pclass'] == 3][\n        'Fare']), inplace=True)\n"
    },
    {
      "raw": "train_df[train_df[\"Fare\"].isnull()]",
      "rewrite-ns": 441396,
      "overhead-ns": 441396,
      "exec-ns": 1028955,
      "total-ns": 1470351,
      "patts-hit": {},
      "rewritten": "train_df[train_df['Fare'].isnull()]\n"
    },
    {
      "raw": "list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\n# ALEX: remove plotting\n# sns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\n# plt.show()\n_ = train_df[list1].corr()",
      "rewrite-ns": 735016,
      "overhead-ns": 735016,
      "exec-ns": 847170,
      "total-ns": 1582186,
      "patts-hit": {},
      "rewritten": "list1 = ['SibSp', 'Parch', 'Age', 'Fare', 'Survived']\n_ = train_df[list1].corr()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\n# g.set_ylabels(\"Survived Probability\")\n# plt.show()",
      "rewrite-ns": 12312,
      "overhead-ns": 12312,
      "exec-ns": 65269,
      "total-ns": 77581,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\n# g.set_ylabels(\"Survived Probability\")\n# plt.show()",
      "rewrite-ns": 11511,
      "overhead-ns": 11511,
      "exec-ns": 59577,
      "total-ns": 71088,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\n# g.set_ylabels(\"Survived Probability\")\n# plt.show()",
      "rewrite-ns": 10373,
      "overhead-ns": 10373,
      "exec-ns": 56866,
      "total-ns": 67239,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.FacetGrid(train_df, col = \"Survived\")\n# g.map(sns.distplot, \"Age\", bins = 25)\n# plt.show()",
      "rewrite-ns": 9954,
      "overhead-ns": 9954,
      "exec-ns": 54206,
      "total-ns": 64160,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\n# g.map(plt.hist, \"Age\", bins = 25)\n# g.add_legend()\n# plt.show()",
      "rewrite-ns": 9961,
      "overhead-ns": 9961,
      "exec-ns": 53113,
      "total-ns": 63074,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\n# g.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\n# g.add_legend()\n# plt.show()",
      "rewrite-ns": 9779,
      "overhead-ns": 9779,
      "exec-ns": 52747,
      "total-ns": 62526,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\n# g.map(sns.barplot, \"Sex\", \"Fare\")\n# g.add_legend()\n# plt.show()",
      "rewrite-ns": 10158,
      "overhead-ns": 10158,
      "exec-ns": 51828,
      "total-ns": 61986,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df[train_df[\"Age\"].isnull()]",
      "rewrite-ns": 452943,
      "overhead-ns": 452943,
      "exec-ns": 9674389,
      "total-ns": 10127332,
      "patts-hit": {},
      "rewritten": "train_df[train_df['Age'].isnull()]\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\n# plt.show()",
      "rewrite-ns": 12790,
      "overhead-ns": 12790,
      "exec-ns": 68013,
      "total-ns": 80803,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\n# plt.show()",
      "rewrite-ns": 11011,
      "overhead-ns": 11011,
      "exec-ns": 59844,
      "total-ns": 70855,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\n# sns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\n# plt.show()",
      "rewrite-ns": 10434,
      "overhead-ns": 10434,
      "exec-ns": 54562,
      "total-ns": 64996,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "#train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]",
      "rewrite-ns": 9310,
      "overhead-ns": 9310,
      "exec-ns": 53382,
      "total-ns": 62692,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\n# plt.show()\n_ = train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr()",
      "rewrite-ns": 590487,
      "overhead-ns": 590487,
      "exec-ns": 871102,
      "total-ns": 1461589,
      "patts-hit": {},
      "rewritten": "_ = train_df[['Age', 'Sex', 'SibSp', 'Parch', 'Pclass']].corr()\n"
    },
    {
      "raw": "index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med",
      "rewrite-ns": 3962885,
      "overhead-ns": 3962885,
      "exec-ns": 256391955,
      "total-ns": 260354840,
      "patts-hit": {},
      "rewritten": "index_nan_age = list(train_df['Age'][train_df['Age'].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df['Age'][(train_df['SibSp'] == train_df.iloc[i][\n        'SibSp']) & (train_df['Parch'] == train_df.iloc[i]['Parch']) & (\n        train_df['Pclass'] == train_df.iloc[i]['Pclass'])].median()\n    age_med = train_df['Age'].median()\n    if not np.isnan(age_pred):\n        train_df['Age'].iloc[i] = age_pred\n    else:\n        train_df['Age'].iloc[i] = age_med\n"
    },
    {
      "raw": "train_df[train_df[\"Age\"].isnull()]",
      "rewrite-ns": 446494,
      "overhead-ns": 446494,
      "exec-ns": 1039448,
      "total-ns": 1485942,
      "patts-hit": {},
      "rewritten": "train_df[train_df['Age'].isnull()]\n"
    },
    {
      "raw": "train_df[\"Name\"].head(10)",
      "rewrite-ns": 394571,
      "overhead-ns": 394571,
      "exec-ns": 785782,
      "total-ns": 1180353,
      "patts-hit": {},
      "rewritten": "train_df['Name'].head(10)\n"
    },
    {
      "raw": "name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]",
      "rewrite-ns": 1266430,
      "overhead-ns": 1266430,
      "exec-ns": 1104637,
      "total-ns": 2371067,
      "patts-hit": {},
      "rewritten": "name = train_df['Name']\ntrain_df['Title'] = [i.split('.')[0].split(',')[-1].strip() for i in name]\n"
    },
    {
      "raw": "train_df[\"Title\"].head(10)",
      "rewrite-ns": 394552,
      "overhead-ns": 394552,
      "exec-ns": 798823,
      "total-ns": 1193375,
      "patts-hit": {},
      "rewritten": "train_df['Title'].head(10)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.countplot(x=\"Title\", data = train_df)\n# plt.xticks(rotation = 60)\n# plt.show()",
      "rewrite-ns": 12189,
      "overhead-ns": 12189,
      "exec-ns": 66484,
      "total-ns": 78673,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)",
      "rewrite-ns": 2197603,
      "overhead-ns": 2197603,
      "exec-ns": 2505563,
      "total-ns": 4703166,
      "patts-hit": {},
      "rewritten": "train_df['Title'] = train_df['Title'].replace(['Lady', 'the Countess',\n    'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],\n    'other')\ntrain_df['Title'] = [(0 if i == 'Master' else 1 if i == 'Miss' or i == 'Ms' or\n    i == 'Mlle' or i == 'Mrs' else 2 if i == 'Mr' else 3) for i in train_df\n    ['Title']]\ntrain_df['Title'].head(20)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.countplot(x=\"Title\", data = train_df)\n# plt.xticks(rotation = 60)\n# plt.show()",
      "rewrite-ns": 12534,
      "overhead-ns": 12534,
      "exec-ns": 64710,
      "total-ns": 77244,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\n# g.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\n# g.set_ylabels(\"Survival Probability\")\n# plt.show()",
      "rewrite-ns": 11679,
      "overhead-ns": 11679,
      "exec-ns": 60199,
      "total-ns": 71878,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)",
      "rewrite-ns": 524253,
      "overhead-ns": 524253,
      "exec-ns": 664257,
      "total-ns": 1188510,
      "patts-hit": {},
      "rewritten": "train_df.drop(labels=['Name'], axis=1, inplace=True)\n"
    },
    {
      "raw": "train_df.head()",
      "rewrite-ns": 70558,
      "overhead-ns": 70558,
      "exec-ns": 7506374,
      "total-ns": 7576932,
      "patts-hit": {},
      "rewritten": "train_df.head()\n"
    },
    {
      "raw": "train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()",
      "rewrite-ns": 527117,
      "overhead-ns": 527117,
      "exec-ns": 10305810,
      "total-ns": 10832927,
      "patts-hit": {},
      "rewritten": "train_df = pd.get_dummies(train_df, columns=['Title'])\ntrain_df.head()\n"
    },
    {
      "raw": "train_df.head()",
      "rewrite-ns": 77237,
      "overhead-ns": 77237,
      "exec-ns": 8434759,
      "total-ns": 8511996,
      "patts-hit": {},
      "rewritten": "train_df.head()\n"
    },
    {
      "raw": "train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1",
      "rewrite-ns": 655327,
      "overhead-ns": 655327,
      "exec-ns": 632380,
      "total-ns": 1287707,
      "patts-hit": {},
      "rewritten": "train_df['Fsize'] = train_df['SibSp'] + train_df['Parch'] + 1\n"
    },
    {
      "raw": "train_df.head()",
      "rewrite-ns": 73380,
      "overhead-ns": 73380,
      "exec-ns": 8877542,
      "total-ns": 8950922,
      "patts-hit": {},
      "rewritten": "train_df.head()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\n# g.set_ylabels(\"Survival\")\n# plt.show()",
      "rewrite-ns": 13248,
      "overhead-ns": 13248,
      "exec-ns": 69024,
      "total-ns": 82272,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]",
      "rewrite-ns": 735014,
      "overhead-ns": 735014,
      "exec-ns": 794235,
      "total-ns": 1529249,
      "patts-hit": {},
      "rewritten": "train_df['family_size'] = [(1 if i < 5 else 0) for i in train_df['Fsize']]\n"
    },
    {
      "raw": "train_df.head(10)",
      "rewrite-ns": 86746,
      "overhead-ns": 86746,
      "exec-ns": 9901525,
      "total-ns": 9988271,
      "patts-hit": {},
      "rewritten": "train_df.head(10)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.countplot(x = \"family_size\", data = train_df)\n# plt.show()",
      "rewrite-ns": 13057,
      "overhead-ns": 13057,
      "exec-ns": 68947,
      "total-ns": 82004,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\n# g.set_ylabels(\"Survival\")\n# plt.show()",
      "rewrite-ns": 11072,
      "overhead-ns": 11072,
      "exec-ns": 59412,
      "total-ns": 70484,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()",
      "rewrite-ns": 538437,
      "overhead-ns": 538437,
      "exec-ns": 11327465,
      "total-ns": 11865902,
      "patts-hit": {},
      "rewritten": "train_df = pd.get_dummies(train_df, columns=['family_size'])\ntrain_df.head()\n"
    },
    {
      "raw": "train_df[\"Embarked\"].head()",
      "rewrite-ns": 361076,
      "overhead-ns": 361076,
      "exec-ns": 752259,
      "total-ns": 1113335,
      "patts-hit": {},
      "rewritten": "train_df['Embarked'].head()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.countplot(x = \"Embarked\", data = train_df)\n# plt.show()",
      "rewrite-ns": 11680,
      "overhead-ns": 11680,
      "exec-ns": 64151,
      "total-ns": 75831,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()",
      "rewrite-ns": 527588,
      "overhead-ns": 527588,
      "exec-ns": 12199434,
      "total-ns": 12727022,
      "patts-hit": {},
      "rewritten": "train_df = pd.get_dummies(train_df, columns=['Embarked'])\ntrain_df.head()\n"
    },
    {
      "raw": "train_df[\"Ticket\"].head(20)",
      "rewrite-ns": 399363,
      "overhead-ns": 399363,
      "exec-ns": 854110,
      "total-ns": 1253473,
      "patts-hit": {},
      "rewritten": "train_df['Ticket'].head(20)\n"
    },
    {
      "raw": "a = \"A/5. 2151\"\na.replace(\".\",\"\").replace(\"/\",\"\").strip().split(\" \")[0]",
      "rewrite-ns": 905937,
      "overhead-ns": 905937,
      "exec-ns": 506853,
      "total-ns": 1412790,
      "patts-hit": {},
      "rewritten": "a = 'A/5. 2151'\na.replace('.', '').replace('/', '').strip().split(' ')[0]\n"
    },
    {
      "raw": "tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets",
      "rewrite-ns": 2007465,
      "overhead-ns": 2007465,
      "exec-ns": 946864,
      "total-ns": 2954329,
      "patts-hit": {},
      "rewritten": "tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace('.', '').replace('/', '').strip().split(\n            ' ')[0])\n    else:\n        tickets.append('x')\ntrain_df['Ticket'] = tickets\n"
    },
    {
      "raw": "train_df[\"Ticket\"].head(20)",
      "rewrite-ns": 388719,
      "overhead-ns": 388719,
      "exec-ns": 830308,
      "total-ns": 1219027,
      "patts-hit": {},
      "rewritten": "train_df['Ticket'].head(20)\n"
    },
    {
      "raw": "train_df.head()",
      "rewrite-ns": 68014,
      "overhead-ns": 68014,
      "exec-ns": 10448400,
      "total-ns": 10516414,
      "patts-hit": {},
      "rewritten": "train_df.head()\n"
    },
    {
      "raw": "train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)",
      "rewrite-ns": 602486,
      "overhead-ns": 602486,
      "exec-ns": 26335537,
      "total-ns": 26938023,
      "patts-hit": {},
      "rewritten": "train_df = pd.get_dummies(train_df, columns=['Ticket'], prefix='T')\ntrain_df.head(10)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.countplot(x = \"Pclass\", data = train_df)\n# plt.show()",
      "rewrite-ns": 13212,
      "overhead-ns": 13212,
      "exec-ns": 69509,
      "total-ns": 82721,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()",
      "rewrite-ns": 988990,
      "overhead-ns": 988990,
      "exec-ns": 26600019,
      "total-ns": 27589009,
      "patts-hit": {},
      "rewritten": "train_df['Pclass'] = train_df['Pclass'].astype('category')\ntrain_df = pd.get_dummies(train_df, columns=['Pclass'])\ntrain_df.head()\n"
    },
    {
      "raw": "train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()",
      "rewrite-ns": 996126,
      "overhead-ns": 996126,
      "exec-ns": 26978101,
      "total-ns": 27974227,
      "patts-hit": {},
      "rewritten": "train_df['Sex'] = train_df['Sex'].astype('category')\ntrain_df = pd.get_dummies(train_df, columns=['Sex'])\ntrain_df.head()\n"
    },
    {
      "raw": "train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)",
      "rewrite-ns": 552977,
      "overhead-ns": 552977,
      "exec-ns": 700595,
      "total-ns": 1253572,
      "patts-hit": {},
      "rewritten": "train_df.drop(labels=['PassengerId', 'Cabin'], axis=1, inplace=True)\n"
    },
    {
      "raw": "train_df.columns",
      "rewrite-ns": 49190,
      "overhead-ns": 49190,
      "exec-ns": 605732,
      "total-ns": 654922,
      "patts-hit": {},
      "rewritten": "train_df.columns\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\n# from sklearn.linear_model import LogisticRegression\n# from sklearn.svm import SVC\n# from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n# from sklearn.neighbors import KNeighborsClassifier\n# from sklearn.tree import DecisionTreeClassifier\n# from sklearn.metrics import accuracy_score",
      "rewrite-ns": 13050,
      "overhead-ns": 13050,
      "exec-ns": 63421,
      "total-ns": 76471,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df_len",
      "rewrite-ns": 41477,
      "overhead-ns": 41477,
      "exec-ns": 367489,
      "total-ns": 408966,
      "patts-hit": {},
      "rewritten": "train_df_len\n"
    },
    {
      "raw": "test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)\n",
      "rewrite-ns": 792741,
      "overhead-ns": 792741,
      "exec-ns": 801627,
      "total-ns": 1594368,
      "patts-hit": {},
      "rewritten": "test = train_df[train_df_len:]\ntest.drop(labels=['Survived'], axis=1, inplace=True)\n"
    },
    {
      "raw": "test.head()",
      "rewrite-ns": 73976,
      "overhead-ns": 73976,
      "exec-ns": 23309377,
      "total-ns": 23383353,
      "patts-hit": {},
      "rewritten": "test.head()\n"
    },
    {
      "raw": "train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\n# ALEX: remove ML code\n# X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\n# print(\"X_train\",len(X_train))\n# print(\"X_test\",len(X_test))\n# print(\"y_train\",len(y_train))\n# print(\"y_test\",len(y_test))\nprint(\"test\",len(test))",
      "rewrite-ns": 1263832,
      "overhead-ns": 1263832,
      "exec-ns": 897867,
      "total-ns": 2161699,
      "patts-hit": {},
      "rewritten": "train = train_df[:train_df_len]\nX_train = train.drop(labels='Survived', axis=1)\ny_train = train['Survived']\nprint('test', len(test))\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# logreg = LogisticRegression()\n# logreg.fit(X_train, y_train)\n# acc_log_train = round(logreg.score(X_train, y_train)*100,2) \n# acc_log_test = round(logreg.score(X_test,y_test)*100,2)\n# print(\"Training Accuracy: % {}\".format(acc_log_train))\n# print(\"Testing Accuracy: % {}\".format(acc_log_test))",
      "rewrite-ns": 13201,
      "overhead-ns": 13201,
      "exec-ns": 66209,
      "total-ns": 79410,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# random_state = 42\n# classifier = [DecisionTreeClassifier(random_state = random_state),\n#              SVC(random_state = random_state),\n#              RandomForestClassifier(random_state = random_state),\n#              LogisticRegression(random_state = random_state),\n#              KNeighborsClassifier()]\n\n# dt_param_grid = {\"min_samples_split\" : range(10,500,20),\n#                 \"max_depth\": range(1,20,2)}\n\n# svc_param_grid = {\"kernel\" : [\"rbf\"],\n#                  \"gamma\": [0.001, 0.01, 0.1, 1],\n#                  \"C\": [1,10,50,100,200,300,1000]}\n\n# rf_param_grid = {\"max_features\": [1,3,10],\n#                 \"min_samples_split\":[2,3,10],\n#                 \"min_samples_leaf\":[1,3,10],\n#                 \"bootstrap\":[False],\n#                 \"n_estimators\":[100,300],\n#                 \"criterion\":[\"gini\"]}\n\n# logreg_param_grid = {\"C\":np.logspace(-3,3,7),\n#                     \"penalty\": [\"l1\",\"l2\"]}\n\n# knn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n#                  \"weights\": [\"uniform\",\"distance\"],\n#                  \"metric\":[\"euclidean\",\"manhattan\"]}\n# classifier_param = [dt_param_grid,\n#                    svc_param_grid,\n#                    rf_param_grid,\n#                    logreg_param_grid,\n#                    knn_param_grid]",
      "rewrite-ns": 17245,
      "overhead-ns": 17245,
      "exec-ns": 60721,
      "total-ns": 77966,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# cv_result = []\n# best_estimators = []\n# for i in range(len(classifier)):\n#     clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n#     clf.fit(X_train,y_train)\n#     cv_result.append(clf.best_score_)\n#     best_estimators.append(clf.best_estimator_)\n#     print(cv_result[i])",
      "rewrite-ns": 11446,
      "overhead-ns": 11446,
      "exec-ns": 57375,
      "total-ns": 68821,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n#              \"LogisticRegression\",\n#              \"KNeighborsClassifier\"]})\n\n# g = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\n# g.set_xlabel(\"Mean Accuracy\")\n# g.set_title(\"Cross Validation Scores\")",
      "rewrite-ns": 11460,
      "overhead-ns": 11460,
      "exec-ns": 55242,
      "total-ns": 66702,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n#                                         (\"rfc\",best_estimators[2]),\n#                                         (\"lr\",best_estimators[3])],\n#                                         voting = \"soft\", n_jobs = -1)\n# votingC = votingC.fit(X_train, y_train)\n# print(accuracy_score(votingC.predict(X_test),y_test))",
      "rewrite-ns": 10663,
      "overhead-ns": 10663,
      "exec-ns": 54048,
      "total-ns": 64711,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\n# results = pd.concat([test_PassengerId, test_survived],axis = 1)\n# results.to_csv(\"titanic.csv\", index = False)",
      "rewrite-ns": 10099,
      "overhead-ns": 10099,
      "exec-ns": 53708,
      "total-ns": 63807,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 0.610607742,
  "max-disk-in-mb": 0
}