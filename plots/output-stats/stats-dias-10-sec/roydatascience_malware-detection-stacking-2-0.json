{
  "max-mem-in-mb": 698,
  "max-mem-in-mb2": 734,
  "cells": [
    {
      "raw": "import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n# ALEX: remove ML code, path printing\n# from sklearn.linear_model import BayesianRidge\n# from sklearn.model_selection import RepeatedKFold\n# import os\n# print(os.listdir(\"./input\"))",
      "rewrite-ns": 690664,
      "overhead-ns": 690664,
      "exec-ns": 390084,
      "total-ns": 1080748,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\n"
    },
    {
      "raw": "#Import the Validation output and submissions\n\noof = pd.read_csv(\"./input/val_kfold.scaled.csv\")['0']\noof_2 = pd.read_csv(\"./input/val_stratfold.scaled.csv\")['0']\n\npredictions = pd.read_csv(\"./input/output_Kfold.scaled.csv\")[\"HasDetections\"]\npredictions_2 = pd.read_csv(\"./input/output_stratfold.scaled.csv\")[\"HasDetections\"]",
      "rewrite-ns": 2196023,
      "overhead-ns": 2196023,
      "exec-ns": 1194885040,
      "total-ns": 1197081063,
      "patts-hit": {},
      "rewritten": "oof = pd.read_csv('./input/val_kfold.scaled.csv')['0']\noof_2 = pd.read_csv('./input/val_stratfold.scaled.csv')['0']\npredictions = pd.read_csv('./input/output_Kfold.scaled.csv')['HasDetections']\npredictions_2 = pd.read_csv('./input/output_stratfold.scaled.csv')[\n    'HasDetections']\n"
    },
    {
      "raw": "train_stack = np.vstack([oof,oof_2]).transpose()\ntest_stack = np.vstack([predictions, predictions_2]).transpose()",
      "rewrite-ns": 1167279,
      "overhead-ns": 1167279,
      "exec-ns": 3222165,
      "total-ns": 4389444,
      "patts-hit": {},
      "rewritten": "train_stack = np.vstack([oof, oof_2]).transpose()\ntest_stack = np.vstack([predictions, predictions_2]).transpose()\n"
    },
    {
      "raw": "dtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }",
      "rewrite-ns": 6541218,
      "overhead-ns": 6541218,
      "exec-ns": 1514235,
      "total-ns": 8055453,
      "patts-hit": {},
      "rewritten": "dtypes = {'MachineIdentifier': 'category', 'ProductName': 'category',\n    'EngineVersion': 'category', 'AppVersion': 'category', 'AvSigVersion':\n    'category', 'IsBeta': 'int8', 'RtpStateBitfield': 'float16',\n    'IsSxsPassiveMode': 'int8', 'DefaultBrowsersIdentifier': 'float16',\n    'AVProductStatesIdentifier': 'float32', 'AVProductsInstalled':\n    'float16', 'AVProductsEnabled': 'float16', 'HasTpm': 'int8',\n    'CountryIdentifier': 'int16', 'CityIdentifier': 'float32',\n    'OrganizationIdentifier': 'float16', 'GeoNameIdentifier': 'float16',\n    'LocaleEnglishNameIdentifier': 'int8', 'Platform': 'category',\n    'Processor': 'category', 'OsVer': 'category', 'OsBuild': 'int16',\n    'OsSuite': 'int16', 'OsPlatformSubRelease': 'category', 'OsBuildLab':\n    'category', 'SkuEdition': 'category', 'IsProtected': 'float16',\n    'AutoSampleOptIn': 'int8', 'PuaMode': 'category', 'SMode': 'float16',\n    'IeVerIdentifier': 'float16', 'SmartScreen': 'category', 'Firewall':\n    'float16', 'UacLuaenable': 'float32', 'Census_MDC2FormFactor':\n    'category', 'Census_DeviceFamily': 'category',\n    'Census_OEMNameIdentifier': 'float16', 'Census_OEMModelIdentifier':\n    'float32', 'Census_ProcessorCoreCount': 'float16',\n    'Census_ProcessorManufacturerIdentifier': 'float16',\n    'Census_ProcessorModelIdentifier': 'float16', 'Census_ProcessorClass':\n    'category', 'Census_PrimaryDiskTotalCapacity': 'float32',\n    'Census_PrimaryDiskTypeName': 'category',\n    'Census_SystemVolumeTotalCapacity': 'float32',\n    'Census_HasOpticalDiskDrive': 'int8', 'Census_TotalPhysicalRAM':\n    'float32', 'Census_ChassisTypeName': 'category',\n    'Census_InternalPrimaryDiagonalDisplaySizeInInches': 'float16',\n    'Census_InternalPrimaryDisplayResolutionHorizontal': 'float16',\n    'Census_InternalPrimaryDisplayResolutionVertical': 'float16',\n    'Census_PowerPlatformRoleName': 'category',\n    'Census_InternalBatteryType': 'category',\n    'Census_InternalBatteryNumberOfCharges': 'float32', 'Census_OSVersion':\n    'category', 'Census_OSArchitecture': 'category', 'Census_OSBranch':\n    'category', 'Census_OSBuildNumber': 'int16', 'Census_OSBuildRevision':\n    'int32', 'Census_OSEdition': 'category', 'Census_OSSkuName': 'category',\n    'Census_OSInstallTypeName': 'category',\n    'Census_OSInstallLanguageIdentifier': 'float16',\n    'Census_OSUILocaleIdentifier': 'int16',\n    'Census_OSWUAutoUpdateOptionsName': 'category',\n    'Census_IsPortableOperatingSystem': 'int8', 'Census_GenuineStateName':\n    'category', 'Census_ActivationChannel': 'category',\n    'Census_IsFlightingInternal': 'float16', 'Census_IsFlightsDisabled':\n    'float16', 'Census_FlightRing': 'category', 'Census_ThresholdOptIn':\n    'float16', 'Census_FirmwareManufacturerIdentifier': 'float16',\n    'Census_FirmwareVersionIdentifier': 'float32',\n    'Census_IsSecureBootEnabled': 'int8', 'Census_IsWIMBootEnabled':\n    'float16', 'Census_IsVirtualDevice': 'float16', 'Census_IsTouchEnabled':\n    'int8', 'Census_IsPenCapable': 'int8',\n    'Census_IsAlwaysOnAlwaysConnectedCapable': 'float16', 'Wdft_IsGamer':\n    'float16', 'Wdft_RegionIdentifier': 'float16', 'HasDetections': 'int8'}\n"
    },
    {
      "raw": "def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() / 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() / 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))\n    return df",
      "rewrite-ns": 12933576,
      "overhead-ns": 12933576,
      "exec-ns": 2469404,
      "total-ns": 15402980,
      "patts-hit": {},
      "rewritten": "def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() / 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8\n                    ).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np\n                    .int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np\n                    .int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np\n                    .int64).max:\n                    df[col] = df[col].astype(np.int64)\n            elif c_min > np.finfo(np.float16).min and c_max < np.finfo(np.\n                float16).max:\n                df[col] = df[col].astype(np.float16)\n            elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.\n                float32).max:\n                df[col] = df[col].astype(np.float32)\n            else:\n                df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() / 1024 ** 2\n    if verbose:\n        print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.\n            format(end_mem, 100 * (start_mem - end_mem) / start_mem))\n    return df\n"
    },
    {
      "raw": "print('Download Train and Test Data.\\n')\ntrain = reduce_mem_usage(pd.read_csv('./input/train.scaled.csv', dtype=dtypes, low_memory=True))\ntrain['MachineIdentifier'] = train.index.astype('uint32')\ntest  = reduce_mem_usage(pd.read_csv('./input/test.scaled.csv',  dtype=dtypes, low_memory=True))\ntest['MachineIdentifier']  = test.index.astype('uint32')",
      "rewrite-ns": 2008043,
      "overhead-ns": 2008043,
      "exec-ns": 10874933811,
      "total-ns": 10876941854,
      "patts-hit": {},
      "rewritten": "print('Download Train and Test Data.\\n')\ntrain = reduce_mem_usage(pd.read_csv('./input/train.scaled.csv', dtype=\n    dtypes, low_memory=True))\ntrain['MachineIdentifier'] = train.index.astype('uint32')\ntest = reduce_mem_usage(pd.read_csv('./input/test.scaled.csv', dtype=dtypes,\n    low_memory=True))\ntest['MachineIdentifier'] = test.index.astype('uint32')\n"
    },
    {
      "raw": "target = train['HasDetections']",
      "rewrite-ns": 446908,
      "overhead-ns": 446908,
      "exec-ns": 511587,
      "total-ns": 958495,
      "patts-hit": {},
      "rewritten": "target = train['HasDetections']\n"
    },
    {
      "raw": "train.shape",
      "rewrite-ns": 66267,
      "overhead-ns": 66267,
      "exec-ns": 1235036,
      "total-ns": 1301303,
      "patts-hit": {},
      "rewritten": "train.shape\n"
    },
    {
      "raw": "train_stack.shape",
      "rewrite-ns": 56346,
      "overhead-ns": 56346,
      "exec-ns": 462259,
      "total-ns": 518605,
      "patts-hit": {},
      "rewritten": "train_stack.shape\n"
    },
    {
      "raw": "train_stack = np.vstack([oof,oof_2]).transpose()\ntest_stack = np.vstack([predictions, predictions_2]).transpose()\n\n# ALEX: remove ML code\n# folds_stack = RepeatedKFold(n_splits=5, n_repeats=2, random_state=15)\n# oof_stack = np.zeros(train_stack.shape[0])\npredictions_3 = np.zeros(test_stack.shape[0])\n\n# ALEX: remove ML code\n# for fold_, (trn_idx, val_idx) in enumerate(folds_stack.split(train_stack,target)):\n#     print(\"fold {}\".format(fold_))\n#     trn_data, trn_y = train_stack[trn_idx], target.iloc[trn_idx].values\n#     val_data, val_y = train_stack[val_idx], target.iloc[val_idx].values\n    \n#     clf_3 = BayesianRidge()\n#     clf_3.fit(trn_data, trn_y)\n    \n#     oof_stack[val_idx] = clf_3.predict(val_data)\n#     predictions_3 += clf_3.predict(test_stack) / 5",
      "rewrite-ns": 1546064,
      "overhead-ns": 1546064,
      "exec-ns": 6989697,
      "total-ns": 8535761,
      "patts-hit": {},
      "rewritten": "train_stack = np.vstack([oof, oof_2]).transpose()\ntest_stack = np.vstack([predictions, predictions_2]).transpose()\npredictions_3 = np.zeros(test_stack.shape[0])\n"
    },
    {
      "raw": "sample_submission = pd.read_csv('./input/sample_submission.scaled.csv')\nsample_submission['HasDetections'] = predictions_3\nsample_submission.to_csv('submission_ashish_kfold.csv', index=False)",
      "rewrite-ns": 930464,
      "overhead-ns": 930464,
      "exec-ns": 1214921762,
      "total-ns": 1215852226,
      "patts-hit": {},
      "rewritten": "sample_submission = pd.read_csv('./input/sample_submission.scaled.csv')\nsample_submission['HasDetections'] = predictions_3\nsample_submission.to_csv('submission_ashish_kfold.csv', index=False)\n"
    }
  ],
  "total-time-in-sec": 13.330117932,
  "max-disk-in-mb": 0
}