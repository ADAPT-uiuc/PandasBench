{
  "max-mem-in-mb": 1002,
  "max-mem-in-mb2": 1856,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# ALEX: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('./input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session",
      "rewrite-ns": 686979,
      "overhead-ns": 686979,
      "exec-ns": 404930,
      "total-ns": 1091909,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\n"
    },
    {
      "raw": "df = pd.read_csv(\"./input/shopping_trends_updated.scaled.csv\")\ndf.head()",
      "rewrite-ns": 594722,
      "overhead-ns": 594722,
      "exec-ns": 4221011068,
      "total-ns": 4221605790,
      "patts-hit": {},
      "rewritten": "df = pd.read_csv('./input/shopping_trends_updated.scaled.csv')\ndf.head()\n"
    },
    {
      "raw": "df.shape",
      "rewrite-ns": 106913,
      "overhead-ns": 106913,
      "exec-ns": 581177,
      "total-ns": 688090,
      "patts-hit": {},
      "rewritten": "df.shape\n"
    },
    {
      "raw": "df.columns",
      "rewrite-ns": 61261,
      "overhead-ns": 61261,
      "exec-ns": 607257,
      "total-ns": 668518,
      "patts-hit": {},
      "rewritten": "df.columns\n"
    },
    {
      "raw": "df.info()",
      "rewrite-ns": 94660,
      "overhead-ns": 94660,
      "exec-ns": 3968674,
      "total-ns": 4063334,
      "patts-hit": {},
      "rewritten": "df.info()\n"
    },
    {
      "raw": "evaluate_lazy(df.isnull().sum())",
      "rewrite-ns": 480802,
      "overhead-ns": 480802,
      "exec-ns": 3557385128,
      "total-ns": 3557865930,
      "patts-hit": {},
      "rewritten": "evaluate_lazy(df.isnull().sum())\n"
    },
    {
      "raw": "evaluate_lazy(df.duplicated().sum())",
      "rewrite-ns": 515021,
      "overhead-ns": 515021,
      "exec-ns": 1594866706,
      "total-ns": 1595381727,
      "patts-hit": {},
      "rewritten": "evaluate_lazy(df.duplicated().sum())\n"
    },
    {
      "raw": "evaluate_lazy(df.describe())",
      "rewrite-ns": 430324,
      "overhead-ns": 430324,
      "exec-ns": 376171558,
      "total-ns": 376601882,
      "patts-hit": {},
      "rewritten": "evaluate_lazy(df.describe())\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# import matplotlib.pyplot as plt\n# import seaborn as sns\n# import plotly.express as px\n\n# %matplotlib inline",
      "rewrite-ns": 21160,
      "overhead-ns": 21160,
      "exec-ns": 105640,
      "total-ns": 126800,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# fig = px.histogram(df, x=\"Age\", nbins= 20, marginal=\"rug\",text_auto = True)\n# fig.show()",
      "rewrite-ns": 15541,
      "overhead-ns": 15541,
      "exec-ns": 83478,
      "total-ns": 99019,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "gender_counts = df['Gender'].value_counts()\n# ALEX: remove plotting\n# fig = px.pie(data_frame=df, names=gender_counts.index, values=gender_counts.values)\n# fig.update_traces(textposition='inside', textinfo='percent+label')\n# fig.show()\n_ = gender_counts.index\n_ = gender_counts.values",
      "rewrite-ns": 888896,
      "overhead-ns": 888896,
      "exec-ns": 122405385,
      "total-ns": 123294281,
      "patts-hit": {},
      "rewritten": "gender_counts = df['Gender'].value_counts()\n_ = gender_counts.index\n_ = gender_counts.values\n"
    },
    {
      "raw": "category_data = df['Category'].value_counts()\n# ALEX: remove plotting\n# fig = px.pie(data_frame=df, names=category_data.index, values=category_data.values)\n# fig.update_traces(textposition='inside', textinfo='percent+label')\n# fig.show()\n_ = category_data.index\n_ = category_data.values\n",
      "rewrite-ns": 870898,
      "overhead-ns": 870898,
      "exec-ns": 123029230,
      "total-ns": 123900128,
      "patts-hit": {},
      "rewritten": "category_data = df['Category'].value_counts()\n_ = category_data.index\n_ = category_data.values\n"
    },
    {
      "raw": "df.columns",
      "rewrite-ns": 59891,
      "overhead-ns": 59891,
      "exec-ns": 679173,
      "total-ns": 739064,
      "patts-hit": {},
      "rewritten": "df.columns\n"
    },
    {
      "raw": "sold_items = df['Item Purchased'].value_counts().sort_values(ascending = False)\n\n# ALEX: remove plotting\n# fig = px.bar(sold_items, x = sold_items.index, y = sold_items.values, \n#              title=\"Highest selling Items\", labels={\"y\":\"Quantity\"})\n# fig.show()\n_ = sold_items.index\n_ = sold_items.values\n",
      "rewrite-ns": 1095465,
      "overhead-ns": 1095465,
      "exec-ns": 123160873,
      "total-ns": 124256338,
      "patts-hit": {},
      "rewritten": "sold_items = df['Item Purchased'].value_counts().sort_values(ascending=False)\n_ = sold_items.index\n_ = sold_items.values\n"
    },
    {
      "raw": "var = df.groupby(['Item Purchased', 'Gender']).size().reset_index(name='Customer Count')\nsorted_var = var.sort_values(by='Item Purchased', ascending=False)\n\n# ALEX: remove plotting\n# fig = px.bar(sorted_var, \n#              x='Item Purchased', \n#              y='Customer Count', \n#              color='Gender',\n#              title='Most Purchased Items by Gender',\n#              labels={'Customer Count': 'Count of Customers'})\n\n# fig.update_traces(hovertemplate='Item=%{x}<br>Count of Customers=%{y}', \n#                   texttemplate='%{y}', \n#                   textposition='inside')\n\n# fig.update_layout(yaxis_title='Count of Customers')\n\n# fig.show()\n",
      "rewrite-ns": 1188845,
      "overhead-ns": 1188845,
      "exec-ns": 246570697,
      "total-ns": 247759542,
      "patts-hit": {},
      "rewritten": "var = df.groupby(['Item Purchased', 'Gender']).size().reset_index(name=\n    'Customer Count')\nsorted_var = var.sort_values(by='Item Purchased', ascending=False)\n"
    },
    {
      "raw": "var = df.groupby('Category')['Purchase Amount (USD)'].sum().reset_index().sort_values(by='Purchase Amount (USD)',ascending=False)\n\n# ALEX: remove plotting\n# fig = px.bar(var, x='Category', y = 'Purchase Amount (USD)')\n\n# fig.show()",
      "rewrite-ns": 1032396,
      "overhead-ns": 1032396,
      "exec-ns": 116784221,
      "total-ns": 117816617,
      "patts-hit": {},
      "rewritten": "var = df.groupby('Category')['Purchase Amount (USD)'].sum().reset_index(\n    ).sort_values(by='Purchase Amount (USD)', ascending=False)\n"
    },
    {
      "raw": "var = df.groupby('Location')['Purchase Amount (USD)'].sum().reset_index().sort_values(by='Purchase Amount (USD)',ascending=False).head(10)\n\n# ALEX: remove plotting\n# fig = px.bar(var, x='Location', y = 'Purchase Amount (USD)')\n\n# fig.show()",
      "rewrite-ns": 491468,
      "overhead-ns": 491468,
      "exec-ns": 134559172,
      "total-ns": 135050640,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "var = dias.rewriter.sort_head(called_on=df.groupby('Location')[\n    'Purchase Amount (USD)'].sum().reset_index(), by=\n    'Purchase Amount (USD)', n=10, asc=False, orig=lambda _DIAS_x: _DIAS_x.\n    sort_values(by='Purchase Amount (USD)', ascending=False).head(10))\n"
    },
    {
      "raw": "size_count = df['Size'].value_counts()\n\n# ALEX: remove plotting\n# fig = px.bar(size_count, x=size_count.index, y=size_count.values, labels = {'y':'Number of Occurances'})\n# fig.show()\n_ = size_count.index\n_ = size_count.values",
      "rewrite-ns": 902281,
      "overhead-ns": 902281,
      "exec-ns": 101058637,
      "total-ns": 101960918,
      "patts-hit": {},
      "rewritten": "size_count = df['Size'].value_counts()\n_ = size_count.index\n_ = size_count.values\n"
    },
    {
      "raw": "color_count = df['Color'].value_counts().head(10)\n\n# ALEX: remove plotting\n# fig = px.bar(color_count, x = color_count.index, y = color_count.values, labels = {'y':'Number of Occurances'})\n# fig.show()\n_ = color_count.index\n_ = color_count.values",
      "rewrite-ns": 1000275,
      "overhead-ns": 1000275,
      "exec-ns": 123492428,
      "total-ns": 124492703,
      "patts-hit": {},
      "rewritten": "color_count = df['Color'].value_counts().head(10)\n_ = color_count.index\n_ = color_count.values\n"
    },
    {
      "raw": "df.columns",
      "rewrite-ns": 68348,
      "overhead-ns": 68348,
      "exec-ns": 868041,
      "total-ns": 936389,
      "patts-hit": {},
      "rewritten": "df.columns\n"
    },
    {
      "raw": "\nseason_data = df['Season'].value_counts()\n# ALEX: remove plotting\n# fig = px.pie(data_frame=df, names=season_data.index, values=season_data.values)\n# fig.update_traces(textposition='inside', textinfo='percent+label')\n# fig.show()\n_ = season_data.index\n_ = season_data.values\n",
      "rewrite-ns": 863091,
      "overhead-ns": 863091,
      "exec-ns": 124376084,
      "total-ns": 125239175,
      "patts-hit": {},
      "rewritten": "season_data = df['Season'].value_counts()\n_ = season_data.index\n_ = season_data.values\n"
    },
    {
      "raw": "subs_count = df['Subscription Status'].value_counts()\n\n# ALEX: remove plotting\n# fig = px.bar(subs_count, x = subs_count.index, y = subs_count.values, labels = {'y':'Number of Customers'})\n# fig.show()\n_ = subs_count.index\n_ = subs_count.values",
      "rewrite-ns": 854198,
      "overhead-ns": 854198,
      "exec-ns": 123706548,
      "total-ns": 124560746,
      "patts-hit": {},
      "rewritten": "subs_count = df['Subscription Status'].value_counts()\n_ = subs_count.index\n_ = subs_count.values\n"
    },
    {
      "raw": "shipping_count = df['Shipping Type'].value_counts()\n\n# ALEX: remove plotting\n# fig = px.bar(shipping_count, x = shipping_count.index, y = shipping_count.values, labels = {'y':'Shipped packages'})\n# fig.show()\n_ = shipping_count.index\n_ = shipping_count.values",
      "rewrite-ns": 936309,
      "overhead-ns": 936309,
      "exec-ns": 122010462,
      "total-ns": 122946771,
      "patts-hit": {},
      "rewritten": "shipping_count = df['Shipping Type'].value_counts()\n_ = shipping_count.index\n_ = shipping_count.values\n"
    },
    {
      "raw": "disc_count = df['Discount Applied'].value_counts()\n\n# ALEX: remove plotting\n# fig = px.bar(disc_count, x = disc_count.index, y = disc_count.values, labels = {'y':'Number of customers'})\n# fig.show()\n_ = disc_count.index\n_ = disc_count.values",
      "rewrite-ns": 843225,
      "overhead-ns": 843225,
      "exec-ns": 123477221,
      "total-ns": 124320446,
      "patts-hit": {},
      "rewritten": "disc_count = df['Discount Applied'].value_counts()\n_ = disc_count.index\n_ = disc_count.values\n"
    },
    {
      "raw": "df.columns",
      "rewrite-ns": 58564,
      "overhead-ns": 58564,
      "exec-ns": 682394,
      "total-ns": 740958,
      "patts-hit": {},
      "rewritten": "df.columns\n"
    },
    {
      "raw": "evaluate_lazy(df['Promo Code Used'].value_counts())",
      "rewrite-ns": 478366,
      "overhead-ns": 478366,
      "exec-ns": 123401327,
      "total-ns": 123879693,
      "patts-hit": {},
      "rewritten": "evaluate_lazy(df['Promo Code Used'].value_counts())\n"
    },
    {
      "raw": "",
      "rewrite-ns": 12813,
      "overhead-ns": 12813,
      "exec-ns": 73622,
      "total-ns": 86435,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 11.480173843,
  "max-disk-in-mb": 0
}