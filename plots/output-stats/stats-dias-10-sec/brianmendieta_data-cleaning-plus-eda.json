{
  "max-mem-in-mb": 295,
  "max-mem-in-mb2": 431,
  "cells": [
    {
      "raw": "# Import the necessary libraries\n# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\nfrom datetime import datetime\n#import zipfile\n#import kaggle",
      "rewrite-ns": 798007,
      "overhead-ns": 798007,
      "exec-ns": 445384,
      "total-ns": 1243391,
      "patts-hit": {},
      "rewritten": "exec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\nfrom datetime import datetime\n"
    },
    {
      "raw": "# Uncomment the import to extract the file from Kaggle with your key\n#!kaggle datasets download -d rashikrahmanpritom/data-science-job-posting-on-glassdoor",
      "rewrite-ns": 22396,
      "overhead-ns": 22396,
      "exec-ns": 118589,
      "total-ns": 140985,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Extract the files from the ZIP file\n#zip_name = 'data-science-job-posting-on-glassdoor.zip'\n#with zipfile.ZipFile(zip_name,'r') as file:\n#    file.extractall()",
      "rewrite-ns": 20458,
      "overhead-ns": 20458,
      "exec-ns": 102321,
      "total-ns": 122779,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Read the .csv file as a pandas dataframe\njob_data = pd.read_csv(\"./input/Uncleaned_DS_jobs.scaled.csv\")",
      "rewrite-ns": 537520,
      "overhead-ns": 537520,
      "exec-ns": 6367073643,
      "total-ns": 6367611163,
      "patts-hit": {},
      "rewritten": "job_data = pd.read_csv('./input/Uncleaned_DS_jobs.scaled.csv')\n"
    },
    {
      "raw": "# Explore the data\njob_data.info()",
      "rewrite-ns": 181528,
      "overhead-ns": 181528,
      "exec-ns": 365558366,
      "total-ns": 365739894,
      "patts-hit": {},
      "rewritten": "job_data.info()\n"
    },
    {
      "raw": "job_data.shape",
      "rewrite-ns": 76076,
      "overhead-ns": 76076,
      "exec-ns": 1042101,
      "total-ns": 1118177,
      "patts-hit": {},
      "rewritten": "job_data.shape\n"
    },
    {
      "raw": "# Check the information structure\njob_data.head()",
      "rewrite-ns": 98402,
      "overhead-ns": 98402,
      "exec-ns": 10990008,
      "total-ns": 11088410,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "# Drop the index column\njob_data.drop('index',axis=1,inplace=True)",
      "rewrite-ns": 479508,
      "overhead-ns": 479508,
      "exec-ns": 24751216,
      "total-ns": 25230724,
      "patts-hit": {},
      "rewritten": "job_data.drop('index', axis=1, inplace=True)\n"
    },
    {
      "raw": "# Check for duplicates\njob_data[job_data.duplicated()].shape\njob_data[job_data.duplicated()]",
      "rewrite-ns": 764609,
      "overhead-ns": 764609,
      "exec-ns": 2913121429,
      "total-ns": 2913886038,
      "patts-hit": {},
      "rewritten": "job_data[job_data.duplicated()].shape\njob_data[job_data.duplicated()]\n"
    },
    {
      "raw": "# Drop duplicates\njob_data.drop_duplicates(inplace=True)",
      "rewrite-ns": 413122,
      "overhead-ns": 413122,
      "exec-ns": 1425793824,
      "total-ns": 1426206946,
      "patts-hit": {},
      "rewritten": "job_data.drop_duplicates(inplace=True)\n"
    },
    {
      "raw": "# Check the shape again\njob_data.shape",
      "rewrite-ns": 79613,
      "overhead-ns": 79613,
      "exec-ns": 613343,
      "total-ns": 692956,
      "patts-hit": {},
      "rewritten": "job_data.shape\n"
    },
    {
      "raw": "# Set appropiate column names in the form of lowercase words separated by '_'\njob_data.rename(columns= lambda header: header.lower().replace(\" \",\"_\"), inplace= True)",
      "rewrite-ns": 918742,
      "overhead-ns": 918742,
      "exec-ns": 566882,
      "total-ns": 1485624,
      "patts-hit": {},
      "rewritten": "job_data.rename(columns=lambda header: header.lower().replace(' ', '_'),\n    inplace=True)\n"
    },
    {
      "raw": "# Inspect the Job title column\njob_data[\"job_title\"][:150]",
      "rewrite-ns": 404922,
      "overhead-ns": 404922,
      "exec-ns": 7033126,
      "total-ns": 7438048,
      "patts-hit": {},
      "rewritten": "job_data['job_title'][:150]\n"
    },
    {
      "raw": "# Make the replacement\njob_data[\"job_title\"]=job_data.loc[:,\"job_title\"].str.replace(\"(Sr.)\",\"sr.\")",
      "rewrite-ns": 836460,
      "overhead-ns": 836460,
      "exec-ns": 1132807,
      "total-ns": 1969267,
      "patts-hit": {},
      "rewritten": "job_data['job_title'] = job_data.loc[:, 'job_title'].str.replace('(Sr.)', 'sr.'\n    )\n"
    },
    {
      "raw": "# Delete the rest of the instances using a regex\njob_data[\"job_title\"]=job_data.loc[:,\"job_title\"].str.extract('([^()]+)')",
      "rewrite-ns": 742154,
      "overhead-ns": 742154,
      "exec-ns": 1557294,
      "total-ns": 2299448,
      "patts-hit": {},
      "rewritten": "job_data['job_title'] = job_data.loc[:, 'job_title'].str.extract('([^()]+)')\n"
    },
    {
      "raw": "#Replace the special characters with an empty value by defining a regex pattern\njob_data['job_title'] = job_data['job_title'].str.replace(r'[^a-zA-Z0-9-,/\\s]','',regex=True)",
      "rewrite-ns": 729477,
      "overhead-ns": 729477,
      "exec-ns": 934050,
      "total-ns": 1663527,
      "patts-hit": {},
      "rewritten": "job_data['job_title'] = job_data['job_title'].str.replace('[^a-zA-Z0-9-,/\\\\s]',\n    '', regex=True)\n"
    },
    {
      "raw": "#Inspect the salary estimate column\njob_data['salary_estimate'][100:200]",
      "rewrite-ns": 406077,
      "overhead-ns": 406077,
      "exec-ns": 7092170,
      "total-ns": 7498247,
      "patts-hit": {},
      "rewritten": "job_data['salary_estimate'][100:200]\n"
    },
    {
      "raw": "# Define a function to extract the salary limits\ndef extract_values(text):\n    extracted_integer = ''\n    modified_string = ''\n    \n    for i in range(len(text)):\n        if i+1 < len(text):\n            if text[i].isdigit():\n                extracted_integer += text[i]\n                if not text[i+1].isdigit():\n                    break\n        if i == len(text) - 1 and text[i].isdigit():\n            extracted_integer += text[i]\n    \n    if extracted_integer:\n        modified_string = text[:text.find(extracted_integer)] + text[text.find(extracted_integer) + len(extracted_integer):]\n        extracted_integer = int(extracted_integer)\n    \n    return extracted_integer, modified_string",
      "rewrite-ns": 4587039,
      "overhead-ns": 4587039,
      "exec-ns": 840039,
      "total-ns": 5427078,
      "patts-hit": {},
      "rewritten": "def extract_values(text):\n    extracted_integer = ''\n    modified_string = ''\n    for i in range(len(text)):\n        if i + 1 < len(text):\n            if text[i].isdigit():\n                extracted_integer += text[i]\n                if not text[i + 1].isdigit():\n                    break\n        if i == len(text) - 1 and text[i].isdigit():\n            extracted_integer += text[i]\n    if extracted_integer:\n        modified_string = text[:text.find(extracted_integer)] + text[text.\n            find(extracted_integer) + len(extracted_integer):]\n        extracted_integer = int(extracted_integer)\n    return extracted_integer, modified_string\n"
    },
    {
      "raw": "#Obtain the minimum salary in the range\njob_data['min_salary_K$'], job_data['salary_estimate'] = zip(*job_data['salary_estimate'].apply(extract_values))",
      "rewrite-ns": 911893,
      "overhead-ns": 911893,
      "exec-ns": 2028693,
      "total-ns": 2940586,
      "patts-hit": {},
      "rewritten": "job_data['min_salary_K$'], job_data['salary_estimate'] = zip(*job_data[\n    'salary_estimate'].apply(extract_values))\n"
    },
    {
      "raw": "#Obtain the maximum salary in the range\njob_data['max_salary_K$'], job_data['salary_estimate'] = zip(*job_data['salary_estimate'].apply(extract_values))",
      "rewrite-ns": 902589,
      "overhead-ns": 902589,
      "exec-ns": 2227869,
      "total-ns": 3130458,
      "patts-hit": {},
      "rewritten": "job_data['max_salary_K$'], job_data['salary_estimate'] = zip(*job_data[\n    'salary_estimate'].apply(extract_values))\n"
    },
    {
      "raw": "#Drop the old salary range column\njob_data.drop('salary_estimate', axis=1, inplace=True)",
      "rewrite-ns": 439827,
      "overhead-ns": 439827,
      "exec-ns": 774893,
      "total-ns": 1214720,
      "patts-hit": {},
      "rewritten": "job_data.drop('salary_estimate', axis=1, inplace=True)\n"
    },
    {
      "raw": "#Let's obtain the average of these ranges\njob_data['avg_salary_estimate'] = (np.round((job_data['min_salary_K$'] + job_data['max_salary_K$'])/2,decimals=0)).astype(int)\njob_data.head()",
      "rewrite-ns": 1119335,
      "overhead-ns": 1119335,
      "exec-ns": 10006997,
      "total-ns": 11126332,
      "patts-hit": {},
      "rewritten": "job_data['avg_salary_estimate'] = np.round((job_data['min_salary_K$'] +\n    job_data['max_salary_K$']) / 2, decimals=0).astype(int)\njob_data.head()\n"
    },
    {
      "raw": "#Inspect the job description column\njob_data['job_description'][:150]",
      "rewrite-ns": 366593,
      "overhead-ns": 366593,
      "exec-ns": 1226252,
      "total-ns": 1592845,
      "patts-hit": {},
      "rewritten": "job_data['job_description'][:150]\n"
    },
    {
      "raw": "job_data.loc[:,\"job_description\"]\njob_data.loc[job_data.loc[:,\"job_description\"]==\"-1\"]",
      "rewrite-ns": 946450,
      "overhead-ns": 946450,
      "exec-ns": 1551845,
      "total-ns": 2498295,
      "patts-hit": {},
      "rewritten": "job_data.loc[:, 'job_description']\njob_data.loc[job_data.loc[:, 'job_description'] == '-1']\n"
    },
    {
      "raw": "#Inspect the rating column\njob_data['rating'][:150]",
      "rewrite-ns": 364594,
      "overhead-ns": 364594,
      "exec-ns": 1269392,
      "total-ns": 1633986,
      "patts-hit": {},
      "rewritten": "job_data['rating'][:150]\n"
    },
    {
      "raw": "job_data['rating'].unique()",
      "rewrite-ns": 107983,
      "overhead-ns": 107983,
      "exec-ns": 769630,
      "total-ns": 877613,
      "patts-hit": {},
      "rewritten": "job_data['rating'].unique()\n"
    },
    {
      "raw": "# Replace rating mising values with NaN across the entire column\njob_data['rating'].replace(-1.0,np.nan,inplace=True)",
      "rewrite-ns": 629872,
      "overhead-ns": 629872,
      "exec-ns": 509705,
      "total-ns": 1139577,
      "patts-hit": {},
      "rewritten": "job_data['rating'].replace(-1.0, np.nan, inplace=True)\n"
    },
    {
      "raw": "job_data['rating'].unique()",
      "rewrite-ns": 102231,
      "overhead-ns": 102231,
      "exec-ns": 743847,
      "total-ns": 846078,
      "patts-hit": {},
      "rewritten": "job_data['rating'].unique()\n"
    },
    {
      "raw": "# Inspect the company name column\njob_data['company_name'][:10]",
      "rewrite-ns": 363643,
      "overhead-ns": 363643,
      "exec-ns": 876827,
      "total-ns": 1240470,
      "patts-hit": {},
      "rewritten": "job_data['company_name'][:10]\n"
    },
    {
      "raw": "job_data['company_name'] = job_data.loc[:,'company_name'].str.replace(r\"\\n\\d+(\\.\\d+)?\",'',regex=True)\njob_data.loc[:,\"company_name\"][:10]",
      "rewrite-ns": 1267322,
      "overhead-ns": 1267322,
      "exec-ns": 1855835,
      "total-ns": 3123157,
      "patts-hit": {},
      "rewritten": "job_data['company_name'] = job_data.loc[:, 'company_name'].str.replace(\n    '\\\\n\\\\d+(\\\\.\\\\d+)?', '', regex=True)\njob_data.loc[:, 'company_name'][:10]\n"
    },
    {
      "raw": "# Inspect the location column\njob_data['location'][:10]",
      "rewrite-ns": 366594,
      "overhead-ns": 366594,
      "exec-ns": 873674,
      "total-ns": 1240268,
      "patts-hit": {},
      "rewritten": "job_data['location'][:10]\n"
    },
    {
      "raw": "# Check the counts of each unique location state\njob_data.loc[:,\"location\"].apply(lambda x: x.split(\",\")[-1]).value_counts()",
      "rewrite-ns": 1106210,
      "overhead-ns": 1106210,
      "exec-ns": 1583462,
      "total-ns": 2689672,
      "patts-hit": {},
      "rewritten": "job_data.loc[:, 'location'].apply(lambda x: x.split(',')[-1]).value_counts()\n"
    },
    {
      "raw": "# Create the state column\njob_data['location_state'] = job_data['location'].apply(lambda x: x.split(',')[-1].strip())",
      "rewrite-ns": 1047891,
      "overhead-ns": 1047891,
      "exec-ns": 795441,
      "total-ns": 1843332,
      "patts-hit": {},
      "rewritten": "job_data['location_state'] = job_data['location'].apply(lambda x: x.split(\n    ',')[-1].strip())\n"
    },
    {
      "raw": "# Replace the inconsistencies with their correct state abbreviation\ndef clean_location(jobs):\n    return (\n        jobs.loc[:, \"location_state\"]\n        .replace(\"California\",\"CA\")\n        .replace(\"Texas\",\"TX\")\n        .replace(\"Utah\",\"UT\")\n        .replace(\"New Jersey\",\"NJ\")\n        .replace(\"Remote\",\"n/a\")\n        .replace(\"United States\",\"n/a\")\n    )\n\njob_data = job_data.assign(\n    location_state = clean_location\n)",
      "rewrite-ns": 1823293,
      "overhead-ns": 1823293,
      "exec-ns": 1521270,
      "total-ns": 3344563,
      "patts-hit": {},
      "rewritten": "def clean_location(jobs):\n    return jobs.loc[:, 'location_state'].replace('California', 'CA').replace(\n        'Texas', 'TX').replace('Utah', 'UT').replace('New Jersey', 'NJ'\n        ).replace('Remote', 'n/a').replace('United States', 'n/a')\njob_data = job_data.assign(location_state=clean_location)\n"
    },
    {
      "raw": "job_data[\"location_state\"].value_counts()",
      "rewrite-ns": 360298,
      "overhead-ns": 360298,
      "exec-ns": 1157346,
      "total-ns": 1517644,
      "patts-hit": {},
      "rewritten": "job_data['location_state'].value_counts()\n"
    },
    {
      "raw": "# Check if the location of the job and the HQ are in the place\njob_data['same_state'] = (job_data['location'] == job_data['headquarters']).astype(int)",
      "rewrite-ns": 749145,
      "overhead-ns": 749145,
      "exec-ns": 706339,
      "total-ns": 1455484,
      "patts-hit": {},
      "rewritten": "job_data['same_state'] = (job_data['location'] == job_data['headquarters']\n    ).astype(int)\n"
    },
    {
      "raw": "job_data.head()",
      "rewrite-ns": 74443,
      "overhead-ns": 74443,
      "exec-ns": 9874730,
      "total-ns": 9949173,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "# Inspect the headquarters column\njob_data['headquarters'].value_counts()",
      "rewrite-ns": 365514,
      "overhead-ns": 365514,
      "exec-ns": 1261165,
      "total-ns": 1626679,
      "patts-hit": {},
      "rewritten": "job_data['headquarters'].value_counts()\n"
    },
    {
      "raw": "job_data['headquarters'] = job_data['headquarters'].apply(lambda x: x.replace('-1','n/a'))\njob_data[\"headquarters\"].value_counts()",
      "rewrite-ns": 1142681,
      "overhead-ns": 1142681,
      "exec-ns": 1735903,
      "total-ns": 2878584,
      "patts-hit": {},
      "rewritten": "job_data['headquarters'] = job_data['headquarters'].apply(lambda x: x.\n    replace('-1', 'n/a'))\njob_data['headquarters'].value_counts()\n"
    },
    {
      "raw": "# Inspect the size column\nprint(job_data['size'][:100])\njob_data['size'].unique()",
      "rewrite-ns": 526293,
      "overhead-ns": 526293,
      "exec-ns": 1237703,
      "total-ns": 1763996,
      "patts-hit": {},
      "rewritten": "print(job_data['size'][:100])\njob_data['size'].unique()\n"
    },
    {
      "raw": "# Handle the missing values correctly\ndef size_cleaning(jobs):\n    return (\n        jobs.loc[:, \"size\"]\n        .replace(\"-1\",\"n/a\")\n        .replace(\"Unknown\",\"n/a\")\n    )\n\njob_data = job_data.assign(\n    size = size_cleaning\n)",
      "rewrite-ns": 1181080,
      "overhead-ns": 1181080,
      "exec-ns": 1069316,
      "total-ns": 2250396,
      "patts-hit": {},
      "rewritten": "def size_cleaning(jobs):\n    return jobs.loc[:, 'size'].replace('-1', 'n/a').replace('Unknown', 'n/a')\njob_data = job_data.assign(size=size_cleaning)\n"
    },
    {
      "raw": "job_data['size'].unique()",
      "rewrite-ns": 102845,
      "overhead-ns": 102845,
      "exec-ns": 598053,
      "total-ns": 700898,
      "patts-hit": {},
      "rewritten": "job_data['size'].unique()\n"
    },
    {
      "raw": "# Inspect the founded column\njob_data['founded'][:100]",
      "rewrite-ns": 362767,
      "overhead-ns": 362767,
      "exec-ns": 1017155,
      "total-ns": 1379922,
      "patts-hit": {},
      "rewritten": "job_data['founded'][:100]\n"
    },
    {
      "raw": "#Clean the missing values\njob_data['founded'].replace(-1,np.nan,inplace=True)\njob_data['founded'].unique()",
      "rewrite-ns": 681530,
      "overhead-ns": 681530,
      "exec-ns": 1498801,
      "total-ns": 2180331,
      "patts-hit": {},
      "rewritten": "job_data['founded'].replace(-1, np.nan, inplace=True)\njob_data['founded'].unique()\n"
    },
    {
      "raw": "# obtain the years the company has been in the market and drop the founed column\ncurrent_year = datetime.now().year\njob_data['years_in_market'] = current_year - job_data['founded']\njob_data.drop('founded',axis=1,inplace=True)\njob_data.head()",
      "rewrite-ns": 1197342,
      "overhead-ns": 1197342,
      "exec-ns": 11137547,
      "total-ns": 12334889,
      "patts-hit": {},
      "rewritten": "current_year = datetime.now().year\njob_data['years_in_market'] = current_year - job_data['founded']\njob_data.drop('founded', axis=1, inplace=True)\njob_data.head()\n"
    },
    {
      "raw": "# Inspect the Type of ownership column\njob_data['type_of_ownership'][:100]",
      "rewrite-ns": 370230,
      "overhead-ns": 370230,
      "exec-ns": 1098765,
      "total-ns": 1468995,
      "patts-hit": {},
      "rewritten": "job_data['type_of_ownership'][:100]\n"
    },
    {
      "raw": "job_data['type_of_ownership'].unique()",
      "rewrite-ns": 102432,
      "overhead-ns": 102432,
      "exec-ns": 567861,
      "total-ns": 670293,
      "patts-hit": {},
      "rewritten": "job_data['type_of_ownership'].unique()\n"
    },
    {
      "raw": "def ownership(jobs):\n    return (\n        jobs.loc[:, \"type_of_ownership\"]\n        .replace(\"Nonprofit Organization\",\"Nonprofit\")\n        .replace(\"-1\",\"n/a\")\n        .replace(\"Unknown\",\"n/a\")\n        .replace(\"Company - Public\",\"Public\")\n        .replace(\"Company - Private\",\"Private\")\n        .replace(\"Other Organization\",\"Other\")   \n    )\n\njob_data = job_data.assign(\n    type_of_ownership = ownership\n)",
      "rewrite-ns": 1827756,
      "overhead-ns": 1827756,
      "exec-ns": 1499355,
      "total-ns": 3327111,
      "patts-hit": {},
      "rewritten": "def ownership(jobs):\n    return jobs.loc[:, 'type_of_ownership'].replace('Nonprofit Organization',\n        'Nonprofit').replace('-1', 'n/a').replace('Unknown', 'n/a').replace(\n        'Company - Public', 'Public').replace('Company - Private', 'Private'\n        ).replace('Other Organization', 'Other')\njob_data = job_data.assign(type_of_ownership=ownership)\n"
    },
    {
      "raw": "job_data['type_of_ownership'].unique()",
      "rewrite-ns": 107451,
      "overhead-ns": 107451,
      "exec-ns": 605289,
      "total-ns": 712740,
      "patts-hit": {},
      "rewritten": "job_data['type_of_ownership'].unique()\n"
    },
    {
      "raw": "# Inspect the industry column\njob_data['industry'].value_counts()",
      "rewrite-ns": 358316,
      "overhead-ns": 358316,
      "exec-ns": 1246780,
      "total-ns": 1605096,
      "patts-hit": {},
      "rewritten": "job_data['industry'].value_counts()\n"
    },
    {
      "raw": "job_data[\"industry\"] = job_data[\"industry\"].apply(lambda x: x.replace(\"-1\",\"n/a\"))\njob_data['industry'].unique()",
      "rewrite-ns": 918807,
      "overhead-ns": 918807,
      "exec-ns": 1215852,
      "total-ns": 2134659,
      "patts-hit": {},
      "rewritten": "job_data['industry'] = job_data['industry'].apply(lambda x: x.replace('-1',\n    'n/a'))\njob_data['industry'].unique()\n"
    },
    {
      "raw": "# Inspect the sector column\njob_data['sector'].value_counts()",
      "rewrite-ns": 359502,
      "overhead-ns": 359502,
      "exec-ns": 1046264,
      "total-ns": 1405766,
      "patts-hit": {},
      "rewritten": "job_data['sector'].value_counts()\n"
    },
    {
      "raw": "job_data['sector'] = job_data['sector'].apply(lambda x: x.replace(\"-1\",\"n/a\"))\njob_data['sector'].unique()",
      "rewrite-ns": 899969,
      "overhead-ns": 899969,
      "exec-ns": 1133649,
      "total-ns": 2033618,
      "patts-hit": {},
      "rewritten": "job_data['sector'] = job_data['sector'].apply(lambda x: x.replace('-1', 'n/a'))\njob_data['sector'].unique()\n"
    },
    {
      "raw": "# Inspect the revenue column\njob_data['revenue'].value_counts()",
      "rewrite-ns": 361473,
      "overhead-ns": 361473,
      "exec-ns": 1008686,
      "total-ns": 1370159,
      "patts-hit": {},
      "rewritten": "job_data['revenue'].value_counts()\n"
    },
    {
      "raw": "def revenue_cleanup(jobs):\n    return (\n        jobs.loc[:, \"revenue\"]\n        .replace(\"-1\",\"n/a\")\n        .replace(\"Unknown / Non-Applicable\",\"n/a\")\n    )\n\njob_data = job_data.assign(\n    revenue = revenue_cleanup\n)",
      "rewrite-ns": 1273152,
      "overhead-ns": 1273152,
      "exec-ns": 1062531,
      "total-ns": 2335683,
      "patts-hit": {},
      "rewritten": "def revenue_cleanup(jobs):\n    return jobs.loc[:, 'revenue'].replace('-1', 'n/a').replace(\n        'Unknown / Non-Applicable', 'n/a')\njob_data = job_data.assign(revenue=revenue_cleanup)\n"
    },
    {
      "raw": "job_data['revenue']=job_data.loc[:,'revenue'].str.extract('([^()]+)')\njob_data['revenue'].value_counts()",
      "rewrite-ns": 1000458,
      "overhead-ns": 1000458,
      "exec-ns": 2047572,
      "total-ns": 3048030,
      "patts-hit": {},
      "rewritten": "job_data['revenue'] = job_data.loc[:, 'revenue'].str.extract('([^()]+)')\njob_data['revenue'].value_counts()\n"
    },
    {
      "raw": "# Finally inspect the competitors column\njob_data['competitors'].value_counts()\n",
      "rewrite-ns": 363953,
      "overhead-ns": 363953,
      "exec-ns": 1250997,
      "total-ns": 1614950,
      "patts-hit": {},
      "rewritten": "job_data['competitors'].value_counts()\n"
    },
    {
      "raw": "np.round((488/659)*100,decimals=2)",
      "rewrite-ns": 563973,
      "overhead-ns": 563973,
      "exec-ns": 490530,
      "total-ns": 1054503,
      "patts-hit": {},
      "rewritten": "np.round(488 / 659 * 100, decimals=2)\n"
    },
    {
      "raw": "#The percentage is too high so we drop this column\njob_data.drop('competitors',axis=1,inplace=True)",
      "rewrite-ns": 440570,
      "overhead-ns": 440570,
      "exec-ns": 667952,
      "total-ns": 1108522,
      "patts-hit": {},
      "rewritten": "job_data.drop('competitors', axis=1, inplace=True)\n"
    },
    {
      "raw": "job_data.head()",
      "rewrite-ns": 74176,
      "overhead-ns": 74176,
      "exec-ns": 10651356,
      "total-ns": 10725532,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "# Check if we have any '-1' as missing values\njob_data[job_data.eq('-1').any(axis = 1)]",
      "rewrite-ns": 615088,
      "overhead-ns": 615088,
      "exec-ns": 1870977,
      "total-ns": 2486065,
      "patts-hit": {},
      "rewritten": "job_data[job_data.eq('-1').any(axis=1)]\n"
    },
    {
      "raw": "# Check if we have a numerical missing value in any column \njob_data[job_data.eq(-1).any(axis = 1)]",
      "rewrite-ns": 627989,
      "overhead-ns": 627989,
      "exec-ns": 1543420,
      "total-ns": 2171409,
      "patts-hit": {},
      "rewritten": "job_data[job_data.eq(-1).any(axis=1)]\n"
    },
    {
      "raw": "# Define a simplification function\n\ndef role_defining(title): \n    if any(keyword in title.lower() for keyword in ['data scientist', 'data science']):\n        return 'Data Scientist'\n    elif any(keyword in title.lower() for keyword in ['data analyst', 'analyst']):\n        return 'Data Analyst'\n    elif 'data engineer' in title.lower():\n        return 'Data Engineer'\n    elif any(keyword in title.lower() for keyword in ['machine learning', 'ai']):\n        return 'Machine Learning Engineer'\n    else:\n        return 'Other'",
      "rewrite-ns": 2669825,
      "overhead-ns": 2669825,
      "exec-ns": 677825,
      "total-ns": 3347650,
      "patts-hit": {},
      "rewritten": "def role_defining(title):\n    if any(keyword in title.lower() for keyword in ['data scientist',\n        'data science']):\n        return 'Data Scientist'\n    elif any(keyword in title.lower() for keyword in ['data analyst',\n        'analyst']):\n        return 'Data Analyst'\n    elif 'data engineer' in title.lower():\n        return 'Data Engineer'\n    elif any(keyword in title.lower() for keyword in ['machine learning', 'ai']\n        ):\n        return 'Machine Learning Engineer'\n    else:\n        return 'Other'\n"
    },
    {
      "raw": "# Apply the function to the new column\njob_data['job_role']= job_data['job_title'].apply(role_defining)\njob_data['job_role'].value_counts()",
      "rewrite-ns": 840116,
      "overhead-ns": 840116,
      "exec-ns": 1997759,
      "total-ns": 2837875,
      "patts-hit": {},
      "rewritten": "job_data['job_role'] = job_data['job_title'].apply(role_defining)\njob_data['job_role'].value_counts()\n"
    },
    {
      "raw": "def seniority_defining(title,description):\n    if any(keyword in title.lower() for keyword in ['jr.','jr','junior']) or any(keyword in description.lower() for keyword in ['jr.','jr','junior']):\n        return 'Jr'\n    elif any(keyword in title.lower() for keyword in ['sr.','sr','vp','senior']) or any(keyword in description.lower() for keyword in ['sr.','sr','vp','senior']):\n        return 'Sr'\n    else:\n        return 'Mid-Level'\n    \n\njob_data['job_seniority'] = job_data.apply(lambda row: seniority_defining(row['job_title'], row['job_description']), axis=1)\njob_data['job_seniority'].value_counts()",
      "rewrite-ns": 4349485,
      "overhead-ns": 4799931,
      "exec-ns": 62743838,
      "total-ns": 67093323,
      "patts-hit": {},
      "rewritten": "def seniority_defining(title, description):\n    if any(keyword in title.lower() for keyword in ['jr.', 'jr', 'junior']\n        ) or any(keyword in description.lower() for keyword in ['jr.', 'jr',\n        'junior']):\n        return 'Jr'\n    elif any(keyword in title.lower() for keyword in ['sr.', 'sr', 'vp',\n        'senior']) or any(keyword in description.lower() for keyword in [\n        'sr.', 'sr', 'vp', 'senior']):\n        return 'Sr'\n    else:\n        return 'Mid-Level'\njob_data['job_seniority'] = job_data.apply(lambda row: seniority_defining(\n    row['job_title'], row['job_description']), axis=1)\njob_data['job_seniority'].value_counts()\n"
    },
    {
      "raw": "job_data.head()",
      "rewrite-ns": 75715,
      "overhead-ns": 75715,
      "exec-ns": 10391882,
      "total-ns": 10467597,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "# Create dummy columns for each of the skill considered.\njob_data['excel'] = job_data.apply(lambda x: 1 if 'excel' in x.job_description.lower() else 0, axis=1)\njob_data['sql'] = job_data.apply(lambda x: 1 if 'sql' in x.job_description.lower() else 0, axis=1)\njob_data['python'] = job_data.apply(lambda x: 1 if 'python' in x.job_description.lower() else 0, axis=1)\njob_data['power_bi'] = job_data.apply(lambda x: 1 if 'power bi' in x.job_description.lower() else 0, axis=1)\njob_data['tableau'] = job_data.apply(lambda x: 1 if 'tableau' in x.job_description.lower() else 0, axis=1)\njob_data['scikit'] = job_data.apply(lambda x: 1 if 'scikit' in x.job_description.lower() else 0, axis=1)\njob_data['spark'] = job_data.apply(lambda x: 1 if 'spark' in x.job_description.lower() else 0, axis=1)",
      "rewrite-ns": 6914879,
      "overhead-ns": 7079510,
      "exec-ns": 96450021,
      "total-ns": 103364900,
      "patts-hit": {},
      "rewritten": "job_data['excel'] = job_data.apply(lambda x: 1 if 'excel' in x.\n    job_description.lower() else 0, axis=1)\njob_data['sql'] = job_data.apply(lambda x: 1 if 'sql' in x.job_description.\n    lower() else 0, axis=1)\njob_data['python'] = job_data.apply(lambda x: 1 if 'python' in x.\n    job_description.lower() else 0, axis=1)\njob_data['power_bi'] = job_data.apply(lambda x: 1 if 'power bi' in x.\n    job_description.lower() else 0, axis=1)\njob_data['tableau'] = job_data.apply(lambda x: 1 if 'tableau' in x.\n    job_description.lower() else 0, axis=1)\njob_data['scikit'] = job_data.apply(lambda x: 1 if 'scikit' in x.\n    job_description.lower() else 0, axis=1)\njob_data['spark'] = job_data.apply(lambda x: 1 if 'spark' in x.\n    job_description.lower() else 0, axis=1)\n"
    },
    {
      "raw": "print(job_data['excel'].value_counts())\nprint(job_data['sql'].value_counts())\nprint(job_data['python'].value_counts())\nprint(job_data['power_bi'].value_counts())\nprint(job_data['tableau'].value_counts())\nprint(job_data['scikit'].value_counts())\nprint(job_data['spark'].value_counts())",
      "rewrite-ns": 2569158,
      "overhead-ns": 2569158,
      "exec-ns": 3018489,
      "total-ns": 5587647,
      "patts-hit": {},
      "rewritten": "print(job_data['excel'].value_counts())\nprint(job_data['sql'].value_counts())\nprint(job_data['python'].value_counts())\nprint(job_data['power_bi'].value_counts())\nprint(job_data['tableau'].value_counts())\nprint(job_data['scikit'].value_counts())\nprint(job_data['spark'].value_counts())\n"
    },
    {
      "raw": "job_data.head()",
      "rewrite-ns": 76805,
      "overhead-ns": 76805,
      "exec-ns": 13019429,
      "total-ns": 13096234,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "job_data.to_csv('Cleaned_Job_Data.csv',index= False)\njob_data.to_excel('Cleaned_Job_Data.xlsx',index=False)",
      "rewrite-ns": 689207,
      "overhead-ns": 689207,
      "exec-ns": 460599907,
      "total-ns": 461289114,
      "patts-hit": {},
      "rewritten": "job_data.to_csv('Cleaned_Job_Data.csv', index=False)\njob_data.to_excel('Cleaned_Job_Data.xlsx', index=False)\n"
    },
    {
      "raw": "# Include the necessary packages fro analysisi and visualization\n# ALEX: remove plotting\n# import matplotlib.pyplot as plt\n# import seaborn as sns\n# %matplotlib inline",
      "rewrite-ns": 17376,
      "overhead-ns": 17376,
      "exec-ns": 86249,
      "total-ns": 103625,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Obtain the basic statistics of the data frame\njob_data.describe()",
      "rewrite-ns": 94057,
      "overhead-ns": 94057,
      "exec-ns": 23294440,
      "total-ns": 23388497,
      "patts-hit": {},
      "rewritten": "job_data.describe()\n"
    },
    {
      "raw": "#Obtain the relationships between columns\n# ALEX: remove plotting\n# sns.pairplot(job_data)",
      "rewrite-ns": 13587,
      "overhead-ns": 13587,
      "exec-ns": 73432,
      "total-ns": 87019,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "industry_salary = [\n    round(job_data.loc[job_data[\"industry\"]==\"Biotech & Pharmaceuticals\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"IT Services\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"Computer Hardware & Software\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"Aerospace & Defense\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"Enterprise Software & Network Solutions\",\"avg_salary_estimate\"].mean(), 2)\n]\n\ntop_paying_industries = [\n    \"Biotech & Pharmaceuticals\",\n    \"IT Services\",\n    \"Computer Hardware & Software\",\n    \"Aerospace & Defense\",\n    \"Enterprise Software & Network Solutions\"\n]\n\n# ALEX: remove plotting\n# plt.bar(top_paying_industries, industry_salary)\n# plt.ylim(110, 140)\n# plt.xlabel(\"Job Industry\")\n# plt.ylabel(\"Average Salary\")\n\n# # Rotate the x-axis labels by 70 degrees\n# plt.xticks(rotation=70)\n\n# plt.show()",
      "rewrite-ns": 4055847,
      "overhead-ns": 4055847,
      "exec-ns": 2035716,
      "total-ns": 6091563,
      "patts-hit": {},
      "rewritten": "industry_salary = [round(job_data.loc[job_data['industry'] ==\n    'Biotech & Pharmaceuticals', 'avg_salary_estimate'].mean(), 2), round(\n    job_data.loc[job_data['industry'] == 'IT Services',\n    'avg_salary_estimate'].mean(), 2), round(job_data.loc[job_data[\n    'industry'] == 'Computer Hardware & Software', 'avg_salary_estimate'].\n    mean(), 2), round(job_data.loc[job_data['industry'] ==\n    'Aerospace & Defense', 'avg_salary_estimate'].mean(), 2), round(\n    job_data.loc[job_data['industry'] ==\n    'Enterprise Software & Network Solutions', 'avg_salary_estimate'].mean(\n    ), 2)]\ntop_paying_industries = ['Biotech & Pharmaceuticals', 'IT Services',\n    'Computer Hardware & Software', 'Aerospace & Defense',\n    'Enterprise Software & Network Solutions']\n"
    },
    {
      "raw": "# Let's start by analyzing the average salary for job postings\n# ALEX: remove plotting\n# sns.boxplot(x=job_data['avg_salary_estimate'])\n_ = job_data['avg_salary_estimate']",
      "rewrite-ns": 305724,
      "overhead-ns": 305724,
      "exec-ns": 207713,
      "total-ns": 513437,
      "patts-hit": {},
      "rewritten": "_ = job_data['avg_salary_estimate']\n"
    },
    {
      "raw": "# We can define a new data frame to fit in better inside the avg. salary range\ndf = job_data[(job_data.avg_salary_estimate > 50) & (job_data.avg_salary_estimate < 200)] ",
      "rewrite-ns": 740424,
      "overhead-ns": 740424,
      "exec-ns": 821210,
      "total-ns": 1561634,
      "patts-hit": {},
      "rewritten": "df = job_data[(job_data.avg_salary_estimate > 50) & (job_data.\n    avg_salary_estimate < 200)]\n"
    },
    {
      "raw": "df.shape",
      "rewrite-ns": 54815,
      "overhead-ns": 54815,
      "exec-ns": 436205,
      "total-ns": 491020,
      "patts-hit": {},
      "rewritten": "df.shape\n"
    },
    {
      "raw": "# Make a comparison between the years the company has been in the market and the avg. salary.\n# ALEX: remove plotting\n# sns.lmplot(x='years_in_market',y='avg_salary_estimate',data=df)\n",
      "rewrite-ns": 12288,
      "overhead-ns": 12288,
      "exec-ns": 64359,
      "total-ns": 76647,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Generate a heatmap based on the numerical columns of the dataframe\n# ALEX: remove plotting\n# fig, ax = plt.subplots(figsize=(10,10)) \nmatrix = np.triu(df.select_dtypes(include=[np.number]).corr())\n# ALEX: remove plotting\n# sns.heatmap(df.select_dtypes(include=[np.number]).corr(),annot=True, fmt='.1g', vmin=-1, vmax=1, center= 0,  ax=ax)\n_ = df.select_dtypes(include=[np.number]).corr()",
      "rewrite-ns": 1257532,
      "overhead-ns": 1257532,
      "exec-ns": 1369162,
      "total-ns": 2626694,
      "patts-hit": {},
      "rewritten": "matrix = np.triu(df.select_dtypes(include=[np.number]).corr())\n_ = df.select_dtypes(include=[np.number]).corr()\n"
    },
    {
      "raw": "# Check the sector values\n# ALEX: remove plotting\n# fig, ax = plt.subplots(figsize=(10,10)) \n# chart = sns.barplot(x=df.sector.value_counts().index, y=df.sector.value_counts())\n# _= chart.set_xticklabels(chart.get_xticklabels(), rotation=75)\n_ = df.sector.value_counts().index\n_ = df.sector.value_counts()",
      "rewrite-ns": 705160,
      "overhead-ns": 705160,
      "exec-ns": 811184,
      "total-ns": 1516344,
      "patts-hit": {},
      "rewritten": "_ = df.sector.value_counts().index\n_ = df.sector.value_counts()\n"
    },
    {
      "raw": "# Set a simpler name\ndf.rename(columns={'avg_salary_estimate':'avg_salary'}, inplace= True)",
      "rewrite-ns": 492815,
      "overhead-ns": 492815,
      "exec-ns": 593939,
      "total-ns": 1086754,
      "patts-hit": {},
      "rewritten": "df.rename(columns={'avg_salary_estimate': 'avg_salary'}, inplace=True)\n"
    },
    {
      "raw": "# Obtain the avg. salary for each type of role\npd.pivot_table(df,index='job_role', values='avg_salary')",
      "rewrite-ns": 446615,
      "overhead-ns": 446615,
      "exec-ns": 4594167,
      "total-ns": 5040782,
      "patts-hit": {},
      "rewritten": "pd.pivot_table(df, index='job_role', values='avg_salary')\n"
    },
    {
      "raw": "# Obtain the avg. salary based on the seniority of the roles\npd.pivot_table(df, index=['job_role','job_seniority'], values='avg_salary').sort_values('avg_salary', ascending =False)",
      "rewrite-ns": 759397,
      "overhead-ns": 759397,
      "exec-ns": 5977712,
      "total-ns": 6737109,
      "patts-hit": {},
      "rewritten": "pd.pivot_table(df, index=['job_role', 'job_seniority'], values='avg_salary'\n    ).sort_values('avg_salary', ascending=False)\n"
    },
    {
      "raw": "df.head()",
      "rewrite-ns": 78722,
      "overhead-ns": 78722,
      "exec-ns": 13014428,
      "total-ns": 13093150,
      "patts-hit": {},
      "rewritten": "df.head()\n"
    },
    {
      "raw": "\n# Define a custom aggregation function to get the percentage of descriptions that include certain skill.\ndef ones_percentage(x):\n    return round((sum(1 for value in x if value == 1)/len(x))*100,2)\n\n# Create the pivot table with the custom aggregation function\npivot_table = pd.pivot_table(df, index='job_role', values=['excel', 'sql', 'python', 'power_bi', 'tableau', 'scikit', 'spark'], aggfunc=ones_percentage)\n\nprint(pivot_table)",
      "rewrite-ns": 1932759,
      "overhead-ns": 1932759,
      "exec-ns": 15177666,
      "total-ns": 17110425,
      "patts-hit": {},
      "rewritten": "def ones_percentage(x):\n    return round(sum(1 for value in x if value == 1) / len(x) * 100, 2)\npivot_table = pd.pivot_table(df, index='job_role', values=['excel', 'sql',\n    'python', 'power_bi', 'tableau', 'scikit', 'spark'], aggfunc=\n    ones_percentage)\nprint(pivot_table)\n"
    }
  ],
  "total-time-in-sec": 12.005264821,
  "max-disk-in-mb": 0
}