{
  "max-mem-in-mb": 835,
  "max-mem-in-mb2": 1079,
  "cells": [
    {
      "raw": "# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\n# FIRST-AUTHOR: remove plotting\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n# %matplotlib inline",
      "rewrite-ns": 692198,
      "overhead-ns": 692198,
      "exec-ns": 402948,
      "total-ns": 1095146,
      "patts-hit": {},
      "rewritten": "exec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\n"
    },
    {
      "raw": "df = pd.read_csv('./input/train.scaled.csv')\ndf_test = pd.read_csv('./input/test.scaled.csv')",
      "rewrite-ns": 927073,
      "overhead-ns": 927073,
      "exec-ns": 1840649816,
      "total-ns": 1841576889,
      "patts-hit": {},
      "rewritten": "df = pd.read_csv('./input/train.scaled.csv')\ndf_test = pd.read_csv('./input/test.scaled.csv')\n"
    },
    {
      "raw": "train_size = len(df)",
      "rewrite-ns": 427371,
      "overhead-ns": 427371,
      "exec-ns": 382957,
      "total-ns": 810328,
      "patts-hit": {},
      "rewritten": "train_size = len(df)\n"
    },
    {
      "raw": "features = pd.concat([df.drop('SalePrice',axis=1),df_test],sort=False).reset_index(drop=True)\ntarget = df['SalePrice'].copy()",
      "rewrite-ns": 1392481,
      "overhead-ns": 1392481,
      "exec-ns": 599085386,
      "total-ns": 600477867,
      "patts-hit": {},
      "rewritten": "features = pd.concat([df.drop('SalePrice', axis=1), df_test], sort=False\n    ).reset_index(drop=True)\ntarget = df['SalePrice'].copy()\n"
    },
    {
      "raw": "df.head()",
      "rewrite-ns": 126897,
      "overhead-ns": 126897,
      "exec-ns": 39928477,
      "total-ns": 40055374,
      "patts-hit": {},
      "rewritten": "df.head()\n"
    },
    {
      "raw": "print('number of numeric columns: ' + str(len(df.select_dtypes(['int64','float64']).columns)))\nprint('number of categorical columns: ' + str(len(df.select_dtypes(['object']).columns)))",
      "rewrite-ns": 1599711,
      "overhead-ns": 1599711,
      "exec-ns": 34388877,
      "total-ns": 35988588,
      "patts-hit": {},
      "rewritten": "print('number of numeric columns: ' + str(len(df.select_dtypes(['int64',\n    'float64']).columns)))\nprint('number of categorical columns: ' + str(len(df.select_dtypes([\n    'object']).columns)))\n"
    },
    {
      "raw": "#correlation to SalePrice\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(12,6))\n# df.corr()['SalePrice'].drop('SalePrice').sort_values().plot(kind='bar')\ndf.corr()['SalePrice'].drop('SalePrice').sort_values()",
      "rewrite-ns": 672187,
      "overhead-ns": 672187,
      "exec-ns": 534659302,
      "total-ns": 535331489,
      "patts-hit": {},
      "rewritten": "df.corr()['SalePrice'].drop('SalePrice').sort_values()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.jointplot(x='OverallQual', y='SalePrice', data=df)\n\n# sns.jointplot(x='GrLivArea', y='SalePrice', data=df)",
      "rewrite-ns": 24448,
      "overhead-ns": 24448,
      "exec-ns": 115101,
      "total-ns": 139549,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "#23 catergorical columns with missing values\nmissing_str = features.select_dtypes('object').isnull().sum().sort_values(ascending=False)\nmissing_str[missing_str>0]",
      "rewrite-ns": 1154623,
      "overhead-ns": 1154623,
      "exec-ns": 1242422806,
      "total-ns": 1243577429,
      "patts-hit": {},
      "rewritten": "missing_str = features.select_dtypes('object').isnull().sum().sort_values(\n    ascending=False)\nmissing_str[missing_str > 0]\n"
    },
    {
      "raw": "fill_none = ['MiscFeature','Alley','Fence','FireplaceQu','GarageType','GarageCond', 'GarageQual','GarageFinish','BsmtCond','BsmtFinType1', 'BsmtFinType2', 'BsmtExposure', 'BsmtQual','MasVnrType']\nfeatures[fill_none] = features[fill_none].fillna('None',inplace=False)",
      "rewrite-ns": 1387249,
      "overhead-ns": 1387249,
      "exec-ns": 1506363265,
      "total-ns": 1507750514,
      "patts-hit": {},
      "rewritten": "fill_none = ['MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'GarageType',\n    'GarageCond', 'GarageQual', 'GarageFinish', 'BsmtCond', 'BsmtFinType1',\n    'BsmtFinType2', 'BsmtExposure', 'BsmtQual', 'MasVnrType']\nfeatures[fill_none] = features[fill_none].fillna('None', inplace=False)\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.scatterplot(x='PoolArea',y='SalePrice',data=df.fillna('Missing'),hue='PoolQC')\n_ = df.fillna('Missing')",
      "rewrite-ns": 438223,
      "overhead-ns": 438223,
      "exec-ns": 648741928,
      "total-ns": 649180151,
      "patts-hit": {},
      "rewritten": "_ = df.fillna('Missing')\n"
    },
    {
      "raw": "features['PoolQC'].fillna('N',inplace=True)\nfeatures['PoolQC'].replace({'Ex':'Y','Fa':'Y','Gd':'Y'},inplace=True)\nfeatures.drop('PoolArea',axis=1,inplace=True)",
      "rewrite-ns": 1557358,
      "overhead-ns": 1557358,
      "exec-ns": 173669910,
      "total-ns": 175227268,
      "patts-hit": {},
      "rewritten": "features['PoolQC'].fillna('N', inplace=True)\nfeatures['PoolQC'].replace({'Ex': 'Y', 'Fa': 'Y', 'Gd': 'Y'}, inplace=True)\nfeatures.drop('PoolArea', axis=1, inplace=True)\n"
    },
    {
      "raw": "otr_cate = ['MSZoning', 'Utilities', 'Functional', 'Electrical', 'SaleType', 'Exterior2nd', 'Exterior1st', 'KitchenQual']\nfor c in otr_cate:\n    features[c] = features[c].fillna(features[c].mode()[0],inplace=False)",
      "rewrite-ns": 1631143,
      "overhead-ns": 1631143,
      "exec-ns": 652485530,
      "total-ns": 654116673,
      "patts-hit": {},
      "rewritten": "otr_cate = ['MSZoning', 'Utilities', 'Functional', 'Electrical', 'SaleType',\n    'Exterior2nd', 'Exterior1st', 'KitchenQual']\nfor c in otr_cate:\n    features[c] = features[c].fillna(features[c].mode()[0], inplace=False)\n"
    },
    {
      "raw": "#11 catergorical columns with missing values\nmissing_num = features.select_dtypes(['int64','float64']).isnull().sum().sort_values(ascending=False)\nmissing_num[missing_num>0]",
      "rewrite-ns": 1253717,
      "overhead-ns": 1253717,
      "exec-ns": 38370577,
      "total-ns": 39624294,
      "patts-hit": {},
      "rewritten": "missing_num = features.select_dtypes(['int64', 'float64']).isnull().sum(\n    ).sort_values(ascending=False)\nmissing_num[missing_num > 0]\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# df.plot(x='LotFrontage',y='LotArea',kind='scatter')",
      "rewrite-ns": 20126,
      "overhead-ns": 20126,
      "exec-ns": 104189,
      "total-ns": 124315,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "features['LotFrontage'].fillna(features['LotFrontage'].median(),inplace=True)",
      "rewrite-ns": 747840,
      "overhead-ns": 747840,
      "exec-ns": 5418440,
      "total-ns": 6166280,
      "patts-hit": {},
      "rewritten": "features['LotFrontage'].fillna(features['LotFrontage'].median(), inplace=True)\n"
    },
    {
      "raw": "features[features['GarageCond']=='None']['GarageYrBlt'].isnull().sum()",
      "rewrite-ns": 770658,
      "overhead-ns": 770658,
      "exec-ns": 235368344,
      "total-ns": 236139002,
      "patts-hit": {},
      "rewritten": "features[features['GarageCond'] == 'None']['GarageYrBlt'].isnull().sum()\n"
    },
    {
      "raw": "features['GarageYrBlt'].fillna(0,inplace=True)",
      "rewrite-ns": 534671,
      "overhead-ns": 534671,
      "exec-ns": 1311629,
      "total-ns": 1846300,
      "patts-hit": {},
      "rewritten": "features['GarageYrBlt'].fillna(0, inplace=True)\n"
    },
    {
      "raw": "fill_zero = ['GarageArea','GarageCars','MasVnrArea','BsmtFullBath','BsmtHalfBath','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF']\nfeatures[fill_zero] = features[fill_zero].fillna(0)",
      "rewrite-ns": 1082153,
      "overhead-ns": 1082153,
      "exec-ns": 31329519,
      "total-ns": 32411672,
      "patts-hit": {},
      "rewritten": "fill_zero = ['GarageArea', 'GarageCars', 'MasVnrArea', 'BsmtFullBath',\n    'BsmtHalfBath', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF']\nfeatures[fill_zero] = features[fill_zero].fillna(0)\n"
    },
    {
      "raw": "# focusing on first row, and found some point does not follow the trend\n# FIRST-AUTHOR: remove plotting\n# sns.pairplot(df[['SalePrice','GrLivArea','1stFlrSF','TotalBsmtSF','LotFrontage','LotArea']].dropna())\n_ = df[['SalePrice','GrLivArea','1stFlrSF','TotalBsmtSF','LotFrontage','LotArea']].dropna()",
      "rewrite-ns": 742350,
      "overhead-ns": 742350,
      "exec-ns": 19954715,
      "total-ns": 20697065,
      "patts-hit": {},
      "rewritten": "_ = df[['SalePrice', 'GrLivArea', '1stFlrSF', 'TotalBsmtSF', 'LotFrontage',\n    'LotArea']].dropna()\n"
    },
    {
      "raw": "drop_index = [] # list to contain all rows should be excluded\ndrop_index.append(df[(df['GrLivArea']>4500) & (df['SalePrice']<400000)].loc[:train_size].index)\ndrop_index.append(df[(df['1stFlrSF']>4000) & (df['SalePrice']<400000)].loc[:train_size].index)\ndrop_index.append(df[(df['TotalBsmtSF']>6000) & (df['SalePrice']<400000)].loc[:train_size].index)\ndrop_index.append(df[df['LotArea']>100000].index)\ndrop_index.append(df[df['LotFrontage']>300].index)\n\ndrop_index = list(map(list,drop_index)) # IndexObject -> python list\ntmp = []\nfor sublist in drop_index:\n    for item in sublist:\n        tmp.append(item)\ndrop_index = list(set(tmp))  # merge into single list and take set() to remove the duplicated\n\nfeatures.drop(drop_index,inplace=True)\ntarget.drop(drop_index,inplace=True)",
      "rewrite-ns": 6579343,
      "overhead-ns": 6579343,
      "exec-ns": 153895780,
      "total-ns": 160475123,
      "patts-hit": {},
      "rewritten": "drop_index = []\ndrop_index.append(df[(df['GrLivArea'] > 4500) & (df['SalePrice'] < 400000)]\n    .loc[:train_size].index)\ndrop_index.append(df[(df['1stFlrSF'] > 4000) & (df['SalePrice'] < 400000)].\n    loc[:train_size].index)\ndrop_index.append(df[(df['TotalBsmtSF'] > 6000) & (df['SalePrice'] < 400000\n    )].loc[:train_size].index)\ndrop_index.append(df[df['LotArea'] > 100000].index)\ndrop_index.append(df[df['LotFrontage'] > 300].index)\ndrop_index = list(map(list, drop_index))\ntmp = []\nfor sublist in drop_index:\n    for item in sublist:\n        tmp.append(item)\ndrop_index = list(set(tmp))\nfeatures.drop(drop_index, inplace=True)\ntarget.drop(drop_index, inplace=True)\n"
    },
    {
      "raw": "features['MSSubClass'] = features['MSSubClass'].astype('object')",
      "rewrite-ns": 618137,
      "overhead-ns": 618137,
      "exec-ns": 21094718,
      "total-ns": 21712855,
      "patts-hit": {},
      "rewritten": "features['MSSubClass'] = features['MSSubClass'].astype('object')\n"
    },
    {
      "raw": "features['Utilities'].value_counts()",
      "rewrite-ns": 402537,
      "overhead-ns": 402537,
      "exec-ns": 14141269,
      "total-ns": 14543806,
      "patts-hit": {},
      "rewritten": "features['Utilities'].value_counts()\n"
    },
    {
      "raw": "features.drop('Utilities',axis=1,inplace=True)",
      "rewrite-ns": 487008,
      "overhead-ns": 487008,
      "exec-ns": 132956000,
      "total-ns": 133443008,
      "patts-hit": {},
      "rewritten": "features.drop('Utilities', axis=1, inplace=True)\n"
    },
    {
      "raw": "features.drop('Id',axis=1,inplace=True)",
      "rewrite-ns": 507510,
      "overhead-ns": 507510,
      "exec-ns": 140123887,
      "total-ns": 140631397,
      "patts-hit": {},
      "rewritten": "features.drop('Id', axis=1, inplace=True)\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# df.plot(x='LowQualFinSF',y='SalePrice',kind='scatter')",
      "rewrite-ns": 24805,
      "overhead-ns": 24805,
      "exec-ns": 115277,
      "total-ns": 140082,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "features['LowQualFinSF'] = features['LowQualFinSF'].apply(lambda x: 'Y' if x>0 else 'N')",
      "rewrite-ns": 998383,
      "overhead-ns": 998383,
      "exec-ns": 34135301,
      "total-ns": 35133684,
      "patts-hit": {},
      "rewritten": "features['LowQualFinSF'] = features['LowQualFinSF'].apply(lambda x: 'Y' if \n    x > 0 else 'N')\n"
    },
    {
      "raw": "#before take square root\n# FIRST-AUTHOR: remove plotting\n# sns.jointplot(x=df['GrLivArea'],y=df['SalePrice'].apply(np.log1p),data=df,kind='reg')\n_ = df['GrLivArea']\n_ = df['SalePrice'].apply(np.log1p)",
      "rewrite-ns": 819292,
      "overhead-ns": 819292,
      "exec-ns": 903043,
      "total-ns": 1722335,
      "patts-hit": {},
      "rewritten": "_ = df['GrLivArea']\n_ = df['SalePrice'].apply(np.log1p)\n"
    },
    {
      "raw": "#after take square root\n# FIRST-AUTHOR: remove plotting\n# sns.jointplot(x=df['GrLivArea']**0.5,y=df['SalePrice'].apply(np.log1p),data=df,kind='reg')\n_ = df['GrLivArea']**0.5\n_ = df['SalePrice'].apply(np.log1p)",
      "rewrite-ns": 894603,
      "overhead-ns": 894603,
      "exec-ns": 3585538,
      "total-ns": 4480141,
      "patts-hit": {},
      "rewritten": "_ = df['GrLivArea'] ** 0.5\n_ = df['SalePrice'].apply(np.log1p)\n"
    },
    {
      "raw": "features['GrLivArea'] = features['GrLivArea']**0.5",
      "rewrite-ns": 508551,
      "overhead-ns": 508551,
      "exec-ns": 11134697,
      "total-ns": 11643248,
      "patts-hit": {},
      "rewritten": "features['GrLivArea'] = features['GrLivArea'] ** 0.5\n"
    },
    {
      "raw": "#predictor pairwise correlation check\ncorr_matrix = features.corr()\ncolinearity = {}\nfor column in corr_matrix.columns:\n    index = corr_matrix[corr_matrix[column]>0.6].index\n    for indice in index:\n        if not column == indice:\n            if not indice+' '+column in colinearity.keys():\n                colinearity[column+' '+indice]=corr_matrix.loc[indice,column]\ncolinearity",
      "rewrite-ns": 2795886,
      "overhead-ns": 2795886,
      "exec-ns": 828786564,
      "total-ns": 831582450,
      "patts-hit": {},
      "rewritten": "corr_matrix = features.corr()\ncolinearity = {}\nfor column in corr_matrix.columns:\n    index = corr_matrix[corr_matrix[column] > 0.6].index\n    for indice in index:\n        if not column == indice:\n            if not indice + ' ' + column in colinearity.keys():\n                colinearity[column + ' ' + indice] = corr_matrix.loc[indice,\n                    column]\ncolinearity\n"
    },
    {
      "raw": "high_collinerarity = ['GarageArea','TotRmsAbvGrd','1stFlrSF','2ndFlrSF','BsmtFinSF1','BsmtFinSF2','FullBath']\nfeatures = features.drop(high_collinerarity,axis=1)",
      "rewrite-ns": 934267,
      "overhead-ns": 934267,
      "exec-ns": 131227792,
      "total-ns": 132162059,
      "patts-hit": {},
      "rewritten": "high_collinerarity = ['GarageArea', 'TotRmsAbvGrd', '1stFlrSF', '2ndFlrSF',\n    'BsmtFinSF1', 'BsmtFinSF2', 'FullBath']\nfeatures = features.drop(high_collinerarity, axis=1)\n"
    },
    {
      "raw": "categorical_cols = list(features.select_dtypes('object').columns)\ndummies = pd.get_dummies(features[categorical_cols],drop_first=True)\nfeatures = pd.concat([features.drop(categorical_cols,axis=1),dummies],axis=1)",
      "rewrite-ns": 1740166,
      "overhead-ns": 1740166,
      "exec-ns": 1540151578,
      "total-ns": 1541891744,
      "patts-hit": {},
      "rewritten": "categorical_cols = list(features.select_dtypes('object').columns)\ndummies = pd.get_dummies(features[categorical_cols], drop_first=True)\nfeatures = pd.concat([features.drop(categorical_cols, axis=1), dummies], axis=1\n    )\n"
    },
    {
      "raw": "X_train = features.loc[0:train_size-1]\ny_train = target\nX_test = features.loc[train_size:]",
      "rewrite-ns": 1117376,
      "overhead-ns": 1117376,
      "exec-ns": 6297311,
      "total-ns": 7414687,
      "patts-hit": {},
      "rewritten": "X_train = features.loc[0:train_size - 1]\ny_train = target\nX_test = features.loc[train_size:]\n"
    },
    {
      "raw": "X_train.shape",
      "rewrite-ns": 73560,
      "overhead-ns": 73560,
      "exec-ns": 704640,
      "total-ns": 778200,
      "patts-hit": {},
      "rewritten": "X_train.shape\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.linear_model import RidgeCV\n# reg = RidgeCV()\n# reg.fit(X_train,np.log1p(y_train))\n_ = np.log1p(y_train)\n#reg.fit(X_train,y_train)",
      "rewrite-ns": 400801,
      "overhead-ns": 400801,
      "exec-ns": 763460,
      "total-ns": 1164261,
      "patts-hit": {},
      "rewritten": "_ = np.log1p(y_train)\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.model_selection import cross_val_score\n# log_rms = np.sqrt(-np.mean(cross_val_score(reg, X_train,np.log1p(y_train), cv=5,scoring='neg_mean_squared_error')))\n# #log_rms = np.sqrt(-np.mean(cross_val_score(reg, X_train,y_train, cv=5,scoring='neg_mean_squared_log_error')))\n# print(f'RMLS : {log_rms}')\n_ = np.log1p(y_train)",
      "rewrite-ns": 376593,
      "overhead-ns": 376593,
      "exec-ns": 707383,
      "total-ns": 1083976,
      "patts-hit": {},
      "rewritten": "_ = np.log1p(y_train)\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# pred = np.expm1(reg.predict(X_train))\npred = np.expm1(y_train.to_numpy())\n#pred = reg.predict(X_train)",
      "rewrite-ns": 461395,
      "overhead-ns": 461395,
      "exec-ns": 1030642,
      "total-ns": 1492037,
      "patts-hit": {},
      "rewritten": "pred = np.expm1(y_train.to_numpy())\n"
    },
    {
      "raw": "comparison = pd.DataFrame({'prediction':pred.reshape(pred.shape[0],),'actual':y_train,'error':pred.reshape(pred.shape[0],)-y_train})\n# FIRST-AUTHOR: remove plotting\n# sns.distplot(comparison['error'])\n_ = comparison['error']",
      "rewrite-ns": 1558981,
      "overhead-ns": 1558981,
      "exec-ns": 2448894,
      "total-ns": 4007875,
      "patts-hit": {},
      "rewritten": "comparison = pd.DataFrame({'prediction': pred.reshape(pred.shape[0]),\n    'actual': y_train, 'error': pred.reshape(pred.shape[0]) - y_train})\n_ = comparison['error']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# comparison.plot(x='prediction',y='error',kind='scatter')",
      "rewrite-ns": 13427,
      "overhead-ns": 13427,
      "exec-ns": 73322,
      "total-ns": 86749,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# comparison.plot(x='prediction',y='actual',kind='scatter')",
      "rewrite-ns": 11335,
      "overhead-ns": 11335,
      "exec-ns": 63133,
      "total-ns": 74468,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# output result for submission\n# FIRST-AUTHOR: remove ML code\n# pred = np.expm1(reg.predict(X_test))\npred = np.expm1(y_train.to_numpy())\n# FIRST-AUTHOR: make notebook run\n# pred = pd.DataFrame(pred.reshape(1459, ))\npred = pd.DataFrame(pred.reshape(pred.shape[0], ))\noutput = pd.concat([df_test['Id'],pred],axis=1).rename(columns={0:'SalePrice'})\noutput.to_csv('submission.csv',index=False)",
      "rewrite-ns": 2171634,
      "overhead-ns": 2171634,
      "exec-ns": 143449272,
      "total-ns": 145620906,
      "patts-hit": {},
      "rewritten": "pred = np.expm1(y_train.to_numpy())\npred = pd.DataFrame(pred.reshape(pred.shape[0]))\noutput = pd.concat([df_test['Id'], pred], axis=1).rename(columns={(0):\n    'SalePrice'})\noutput.to_csv('submission.csv', index=False)\n"
    },
    {
      "raw": "steps = ['Control','Outliers','Log_y','Modification','Non-linearity','Collinearity']\nrmls = [0.15494899171649665,0.14154336306738766,0.11543537404168344,0.11479554199015254,0.11394995795225088,0.11326714995779572]\nscores = pd.DataFrame({'steps':steps,'rmls':rmls})\n\n# FIRST-AUTHOR: remove plotting\n# scores.plot(x='steps',y='rmls',marker='o',rot=90)\n# plt.xlabel('Preprocessing Actions',fontsize=14)\n# plt.ylabel('RMLS',fontsize=14)\n# plt.title('RMLS Changing wrt to Preprocessing Actions',fontsize=16)",
      "rewrite-ns": 1343731,
      "overhead-ns": 1343731,
      "exec-ns": 679932,
      "total-ns": 2023663,
      "patts-hit": {},
      "rewritten": "steps = ['Control', 'Outliers', 'Log_y', 'Modification', 'Non-linearity',\n    'Collinearity']\nrmls = [0.15494899171649665, 0.14154336306738766, 0.11543537404168344, \n    0.11479554199015254, 0.11394995795225088, 0.11326714995779572]\nscores = pd.DataFrame({'steps': steps, 'rmls': rmls})\n"
    }
  ],
  "total-time-in-sec": 10.815644947,
  "max-disk-in-mb": 0
}