{
  "max-mem-in-mb": 1548,
  "max-mem-in-mb2": 1606,
  "cells": [
    {
      "raw": "import numpy as np\n# import pandas as pd\nimport os\nexec(os.environ['IREWR_IMPORTS'])\n# FIRST-AUTHOR: remove plotting\n# from matplotlib import pyplot as plt\n# import seaborn as sns\n# %matplotlib inline",
      "rewrite-ns": 576121,
      "overhead-ns": 576121,
      "exec-ns": 311972,
      "total-ns": 888093,
      "patts-hit": {},
      "rewritten": "import numpy as np\nimport os\nexec(os.environ['IREWR_IMPORTS'])\n"
    },
    {
      "raw": "#Loading the Data\ntrain = pd.read_csv('./input/train.scaled.csv')",
      "rewrite-ns": 376837,
      "overhead-ns": 376837,
      "exec-ns": 1050502313,
      "total-ns": 1050879150,
      "patts-hit": {},
      "rewritten": "train = pd.read_csv('./input/train.scaled.csv')\n"
    },
    {
      "raw": "nulls = train.isnull().sum().sort_values(ascending=False)\nnulls.head(20)",
      "rewrite-ns": 733697,
      "overhead-ns": 733697,
      "exec-ns": 770878576,
      "total-ns": 771612273,
      "patts-hit": {},
      "rewritten": "nulls = train.isnull().sum().sort_values(ascending=False)\nnulls.head(20)\n"
    },
    {
      "raw": "train = train.drop(['Id','PoolQC','MiscFeature','Alley','Fence'],axis = 1)",
      "rewrite-ns": 767046,
      "overhead-ns": 767046,
      "exec-ns": 91993845,
      "total-ns": 92760891,
      "patts-hit": {},
      "rewritten": "train = train.drop(['Id', 'PoolQC', 'MiscFeature', 'Alley', 'Fence'], axis=1)\n"
    },
    {
      "raw": "train[['Fireplaces','FireplaceQu']].head(10)",
      "rewrite-ns": 577224,
      "overhead-ns": 577224,
      "exec-ns": 5707533,
      "total-ns": 6284757,
      "patts-hit": {},
      "rewritten": "train[['Fireplaces', 'FireplaceQu']].head(10)\n"
    },
    {
      "raw": "train['FireplaceQu'].isnull().sum()",
      "rewrite-ns": 511222,
      "overhead-ns": 511222,
      "exec-ns": 6497590,
      "total-ns": 7008812,
      "patts-hit": {},
      "rewritten": "train['FireplaceQu'].isnull().sum()\n"
    },
    {
      "raw": "train['Fireplaces'].value_counts()",
      "rewrite-ns": 366145,
      "overhead-ns": 366145,
      "exec-ns": 1800035,
      "total-ns": 2166180,
      "patts-hit": {},
      "rewritten": "train['Fireplaces'].value_counts()\n"
    },
    {
      "raw": "train['FireplaceQu']=train['FireplaceQu'].fillna('NF')",
      "rewrite-ns": 399254,
      "overhead-ns": 399254,
      "exec-ns": 7682382,
      "total-ns": 8081636,
      "patts-hit": {
        "IsInplaceUpdate": 1
      },
      "rewritten": "_DIAS_ser = train['FireplaceQu']\nif type(_DIAS_ser) != pd.Series:\n    train['FireplaceQu'] = train['FireplaceQu'].fillna('NF')\nelse:\n    train['FireplaceQu'].fillna('NF', inplace=True)\n"
    },
    {
      "raw": "train['LotFrontage'] =train['LotFrontage'].fillna(value=train['LotFrontage'].mean())",
      "rewrite-ns": 468876,
      "overhead-ns": 468876,
      "exec-ns": 2244425,
      "total-ns": 2713301,
      "patts-hit": {
        "IsInplaceUpdate": 1
      },
      "rewritten": "_DIAS_ser = train['LotFrontage']\nif type(_DIAS_ser) != pd.Series:\n    train['LotFrontage'] = train['LotFrontage'].fillna(value=train[\n        'LotFrontage'].mean())\nelse:\n    train['LotFrontage'].fillna(value=train['LotFrontage'].mean(), inplace=True\n        )\n"
    },
    {
      "raw": "train['GarageType'].isnull().sum()",
      "rewrite-ns": 461295,
      "overhead-ns": 461295,
      "exec-ns": 6477668,
      "total-ns": 6938963,
      "patts-hit": {},
      "rewritten": "train['GarageType'].isnull().sum()\n"
    },
    {
      "raw": "train['GarageCond'].isnull().sum()",
      "rewrite-ns": 466754,
      "overhead-ns": 466754,
      "exec-ns": 6338415,
      "total-ns": 6805169,
      "patts-hit": {},
      "rewritten": "train['GarageCond'].isnull().sum()\n"
    },
    {
      "raw": "train['GarageFinish'].isnull().sum()",
      "rewrite-ns": 468858,
      "overhead-ns": 468858,
      "exec-ns": 6293642,
      "total-ns": 6762500,
      "patts-hit": {},
      "rewritten": "train['GarageFinish'].isnull().sum()\n"
    },
    {
      "raw": "train['GarageYrBlt'].isnull().sum()",
      "rewrite-ns": 461952,
      "overhead-ns": 461952,
      "exec-ns": 880507,
      "total-ns": 1342459,
      "patts-hit": {},
      "rewritten": "train['GarageYrBlt'].isnull().sum()\n"
    },
    {
      "raw": "train['GarageQual'].isnull().sum()",
      "rewrite-ns": 451115,
      "overhead-ns": 451115,
      "exec-ns": 6282372,
      "total-ns": 6733487,
      "patts-hit": {},
      "rewritten": "train['GarageQual'].isnull().sum()\n"
    },
    {
      "raw": "train['GarageArea'].value_counts().head()",
      "rewrite-ns": 468130,
      "overhead-ns": 468130,
      "exec-ns": 1900356,
      "total-ns": 2368486,
      "patts-hit": {},
      "rewritten": "train['GarageArea'].value_counts().head()\n"
    },
    {
      "raw": "train['GarageType']=train['GarageType'].fillna('NG')\ntrain['GarageCond']=train['GarageCond'].fillna('NG')\ntrain['GarageFinish']=train['GarageFinish'].fillna('NG')\ntrain['GarageYrBlt']=train['GarageYrBlt'].fillna('NG')\ntrain['GarageQual']=train['GarageQual'].fillna('NG')",
      "rewrite-ns": 2139060,
      "overhead-ns": 2139060,
      "exec-ns": 34715010,
      "total-ns": 36854070,
      "patts-hit": {
        "IsInplaceUpdate": 1
      },
      "rewritten": "_DIAS_ser = train['GarageType']\nif type(_DIAS_ser) != pd.Series:\n    train['GarageType'] = train['GarageType'].fillna('NG')\nelse:\n    train['GarageType'].fillna('NG', inplace=True)\n_DIAS_ser = train['GarageCond']\nif type(_DIAS_ser) != pd.Series:\n    train['GarageCond'] = train['GarageCond'].fillna('NG')\nelse:\n    train['GarageCond'].fillna('NG', inplace=True)\n_DIAS_ser = train['GarageFinish']\nif type(_DIAS_ser) != pd.Series:\n    train['GarageFinish'] = train['GarageFinish'].fillna('NG')\nelse:\n    train['GarageFinish'].fillna('NG', inplace=True)\n_DIAS_ser = train['GarageYrBlt']\nif type(_DIAS_ser) != pd.Series:\n    train['GarageYrBlt'] = train['GarageYrBlt'].fillna('NG')\nelse:\n    train['GarageYrBlt'].fillna('NG', inplace=True)\n_DIAS_ser = train['GarageQual']\nif type(_DIAS_ser) != pd.Series:\n    train['GarageQual'] = train['GarageQual'].fillna('NG')\nelse:\n    train['GarageQual'].fillna('NG', inplace=True)\n"
    },
    {
      "raw": "train.BsmtExposure.isnull().sum()",
      "rewrite-ns": 414928,
      "overhead-ns": 414928,
      "exec-ns": 6252373,
      "total-ns": 6667301,
      "patts-hit": {},
      "rewritten": "train.BsmtExposure.isnull().sum()\n"
    },
    {
      "raw": "train.BsmtFinType2.isnull().sum()",
      "rewrite-ns": 404372,
      "overhead-ns": 404372,
      "exec-ns": 6343924,
      "total-ns": 6748296,
      "patts-hit": {},
      "rewritten": "train.BsmtFinType2.isnull().sum()\n"
    },
    {
      "raw": "train.BsmtFinType1.isnull().sum()",
      "rewrite-ns": 409907,
      "overhead-ns": 409907,
      "exec-ns": 6322856,
      "total-ns": 6732763,
      "patts-hit": {},
      "rewritten": "train.BsmtFinType1.isnull().sum()\n"
    },
    {
      "raw": "train.BsmtCond.isnull().sum() ",
      "rewrite-ns": 413525,
      "overhead-ns": 413525,
      "exec-ns": 6352819,
      "total-ns": 6766344,
      "patts-hit": {},
      "rewritten": "train.BsmtCond.isnull().sum()\n"
    },
    {
      "raw": "train.BsmtQual.isnull().sum()",
      "rewrite-ns": 408312,
      "overhead-ns": 408312,
      "exec-ns": 6291893,
      "total-ns": 6700205,
      "patts-hit": {},
      "rewritten": "train.BsmtQual.isnull().sum()\n"
    },
    {
      "raw": "train.TotalBsmtSF.value_counts().head()",
      "rewrite-ns": 418845,
      "overhead-ns": 418845,
      "exec-ns": 2107176,
      "total-ns": 2526021,
      "patts-hit": {},
      "rewritten": "train.TotalBsmtSF.value_counts().head()\n"
    },
    {
      "raw": "train['BsmtExposure']=train['BsmtExposure'].fillna('NB')\ntrain['BsmtFinType2']=train['BsmtFinType2'].fillna('NB')\ntrain['BsmtFinType1']=train['BsmtFinType1'].fillna('NB')\ntrain['BsmtCond']=train['BsmtCond'].fillna('NB')\ntrain['BsmtQual']=train['BsmtQual'].fillna('NB')",
      "rewrite-ns": 1445129,
      "overhead-ns": 1445129,
      "exec-ns": 34797129,
      "total-ns": 36242258,
      "patts-hit": {
        "IsInplaceUpdate": 1
      },
      "rewritten": "_DIAS_ser = train['BsmtExposure']\nif type(_DIAS_ser) != pd.Series:\n    train['BsmtExposure'] = train['BsmtExposure'].fillna('NB')\nelse:\n    train['BsmtExposure'].fillna('NB', inplace=True)\n_DIAS_ser = train['BsmtFinType2']\nif type(_DIAS_ser) != pd.Series:\n    train['BsmtFinType2'] = train['BsmtFinType2'].fillna('NB')\nelse:\n    train['BsmtFinType2'].fillna('NB', inplace=True)\n_DIAS_ser = train['BsmtFinType1']\nif type(_DIAS_ser) != pd.Series:\n    train['BsmtFinType1'] = train['BsmtFinType1'].fillna('NB')\nelse:\n    train['BsmtFinType1'].fillna('NB', inplace=True)\n_DIAS_ser = train['BsmtCond']\nif type(_DIAS_ser) != pd.Series:\n    train['BsmtCond'] = train['BsmtCond'].fillna('NB')\nelse:\n    train['BsmtCond'].fillna('NB', inplace=True)\n_DIAS_ser = train['BsmtQual']\nif type(_DIAS_ser) != pd.Series:\n    train['BsmtQual'] = train['BsmtQual'].fillna('NB')\nelse:\n    train['BsmtQual'].fillna('NB', inplace=True)\n"
    },
    {
      "raw": "train['MasVnrArea'] = train['MasVnrArea'].fillna(train['MasVnrArea'].mean())",
      "rewrite-ns": 427038,
      "overhead-ns": 427038,
      "exec-ns": 1711906,
      "total-ns": 2138944,
      "patts-hit": {
        "IsInplaceUpdate": 1
      },
      "rewritten": "_DIAS_ser = train['MasVnrArea']\nif type(_DIAS_ser) != pd.Series:\n    train['MasVnrArea'] = train['MasVnrArea'].fillna(train['MasVnrArea'].mean()\n        )\nelse:\n    train['MasVnrArea'].fillna(train['MasVnrArea'].mean(), inplace=True)\n"
    },
    {
      "raw": "train['MasVnrType'] = train['MasVnrType'].fillna('none')",
      "rewrite-ns": 349904,
      "overhead-ns": 349904,
      "exec-ns": 7114641,
      "total-ns": 7464545,
      "patts-hit": {
        "IsInplaceUpdate": 1
      },
      "rewritten": "_DIAS_ser = train['MasVnrType']\nif type(_DIAS_ser) != pd.Series:\n    train['MasVnrType'] = train['MasVnrType'].fillna('none')\nelse:\n    train['MasVnrType'].fillna('none', inplace=True)\n"
    },
    {
      "raw": "train.Electrical = train.Electrical.fillna('SBrkr')",
      "rewrite-ns": 463600,
      "overhead-ns": 463600,
      "exec-ns": 48859540,
      "total-ns": 49323140,
      "patts-hit": {},
      "rewritten": "train.Electrical = train.Electrical.fillna('SBrkr')\n"
    },
    {
      "raw": "train.isnull().sum().sum()",
      "rewrite-ns": 500160,
      "overhead-ns": 500160,
      "exec-ns": 709670302,
      "total-ns": 710170462,
      "patts-hit": {},
      "rewritten": "train.isnull().sum().sum()\n"
    },
    {
      "raw": "num_train = train._get_numeric_data()",
      "rewrite-ns": 377869,
      "overhead-ns": 377869,
      "exec-ns": 352103,
      "total-ns": 729972,
      "patts-hit": {},
      "rewritten": "num_train = train._get_numeric_data()\n"
    },
    {
      "raw": "num_train.columns",
      "rewrite-ns": 57179,
      "overhead-ns": 57179,
      "exec-ns": 721487,
      "total-ns": 778666,
      "patts-hit": {},
      "rewritten": "num_train.columns\n"
    },
    {
      "raw": "def var_summary(x):\n    return pd.Series([x.count(), x.isnull().sum(), x.sum(), x.mean(), x.median(),  x.std(), x.var(), x.min(), x.quantile(0.01), x.quantile(0.05),x.quantile(0.10),x.quantile(0.25),x.quantile(0.50),x.quantile(0.75), x.quantile(0.90),x.quantile(0.95), x.quantile(0.99),x.max()], \n                  index=['N', 'NMISS', 'SUM', 'MEAN','MEDIAN', 'STD', 'VAR', 'MIN', 'P1' , 'P5' ,'P10' ,'P25' ,'P50' ,'P75' ,'P90' ,'P95' ,'P99' ,'MAX'])\n\nnum_train.apply(lambda x: var_summary(x)).T\n",
      "rewrite-ns": 4782835,
      "overhead-ns": 4787857,
      "exec-ns": 877903716,
      "total-ns": 882686551,
      "patts-hit": {},
      "rewritten": "def var_summary(x):\n    return pd.Series([x.count(), x.isnull().sum(), x.sum(), x.mean(), x.\n        median(), x.std(), x.var(), x.min(), x.quantile(0.01), x.quantile(\n        0.05), x.quantile(0.1), x.quantile(0.25), x.quantile(0.5), x.\n        quantile(0.75), x.quantile(0.9), x.quantile(0.95), x.quantile(0.99),\n        x.max()], index=['N', 'NMISS', 'SUM', 'MEAN', 'MEDIAN', 'STD',\n        'VAR', 'MIN', 'P1', 'P5', 'P10', 'P25', 'P50', 'P75', 'P90', 'P95',\n        'P99', 'MAX'])\nnum_train.apply(lambda x: var_summary(x)).T\n"
    },
    {
      "raw": "",
      "rewrite-ns": 20532,
      "overhead-ns": 20532,
      "exec-ns": 105493,
      "total-ns": 126025,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot([num_train.LotFrontage])\n_ = [num_train.LotFrontage]",
      "rewrite-ns": 359483,
      "overhead-ns": 359483,
      "exec-ns": 325946,
      "total-ns": 685429,
      "patts-hit": {},
      "rewritten": "_ = [num_train.LotFrontage]\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['LotFrontage']= train['LotFrontage'].clip_upper(train['LotFrontage'].quantile(0.99))\ntrain['LotFrontage']= train['LotFrontage'].clip(upper=train['LotFrontage'].quantile(0.99))",
      "rewrite-ns": 871193,
      "overhead-ns": 871193,
      "exec-ns": 4781672,
      "total-ns": 5652865,
      "patts-hit": {},
      "rewritten": "train['LotFrontage'] = train['LotFrontage'].clip(upper=train['LotFrontage']\n    .quantile(0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(num_train.LotArea)\n_ = num_train.LotArea",
      "rewrite-ns": 264992,
      "overhead-ns": 264992,
      "exec-ns": 263098,
      "total-ns": 528090,
      "patts-hit": {},
      "rewritten": "_ = num_train.LotArea\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['LotArea']= train['LotArea'].clip_upper(train['LotArea'].quantile(0.99))\ntrain['LotArea']= train['LotArea'].clip(upper=train['LotArea'].quantile(0.99))",
      "rewrite-ns": 809795,
      "overhead-ns": 809795,
      "exec-ns": 19656569,
      "total-ns": 20466364,
      "patts-hit": {},
      "rewritten": "train['LotArea'] = train['LotArea'].clip(upper=train['LotArea'].quantile(0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['MasVnrArea'])\n_ = train['MasVnrArea']",
      "rewrite-ns": 338417,
      "overhead-ns": 338417,
      "exec-ns": 307576,
      "total-ns": 645993,
      "patts-hit": {},
      "rewritten": "_ = train['MasVnrArea']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['MasVnrArea']= train['MasVnrArea'].clip_upper(train['MasVnrArea'].quantile(0.99))\ntrain['MasVnrArea']= train['MasVnrArea'].clip(upper=train['MasVnrArea'].quantile(0.99))",
      "rewrite-ns": 854434,
      "overhead-ns": 854434,
      "exec-ns": 3600149,
      "total-ns": 4454583,
      "patts-hit": {},
      "rewritten": "train['MasVnrArea'] = train['MasVnrArea'].clip(upper=train['MasVnrArea'].\n    quantile(0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['BsmtFinSF1'])\n_ = train['BsmtFinSF1']",
      "rewrite-ns": 307113,
      "overhead-ns": 307113,
      "exec-ns": 266167,
      "total-ns": 573280,
      "patts-hit": {},
      "rewritten": "_ = train['BsmtFinSF1']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['BsmtFinSF2'])\n_ = train['BsmtFinSF2']",
      "rewrite-ns": 280819,
      "overhead-ns": 280819,
      "exec-ns": 226409,
      "total-ns": 507228,
      "patts-hit": {},
      "rewritten": "_ = train['BsmtFinSF2']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['BsmtFinSF1']= train['BsmtFinSF1'].clip_upper(train['BsmtFinSF1'].quantile(0.99)) \n# train['BsmtFinSF2']= train['BsmtFinSF2'].clip_upper(train['BsmtFinSF2'].quantile(0.99))\ntrain['BsmtFinSF1']= train['BsmtFinSF1'].clip(upper=train['BsmtFinSF1'].quantile(0.99)) \ntrain['BsmtFinSF2']= train['BsmtFinSF2'].clip(upper=train['BsmtFinSF2'].quantile(0.99))",
      "rewrite-ns": 1553445,
      "overhead-ns": 1553445,
      "exec-ns": 37408556,
      "total-ns": 38962001,
      "patts-hit": {},
      "rewritten": "train['BsmtFinSF1'] = train['BsmtFinSF1'].clip(upper=train['BsmtFinSF1'].\n    quantile(0.99))\ntrain['BsmtFinSF2'] = train['BsmtFinSF2'].clip(upper=train['BsmtFinSF2'].\n    quantile(0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['TotalBsmtSF'])\n_ = train['TotalBsmtSF']",
      "rewrite-ns": 342321,
      "overhead-ns": 342321,
      "exec-ns": 478385,
      "total-ns": 820706,
      "patts-hit": {},
      "rewritten": "_ = train['TotalBsmtSF']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['TotalBsmtSF']= train['TotalBsmtSF'].clip_upper(train['TotalBsmtSF'].quantile(0.99))\ntrain['TotalBsmtSF']= train['TotalBsmtSF'].clip(upper=train['TotalBsmtSF'].quantile(0.99))",
      "rewrite-ns": 855515,
      "overhead-ns": 855515,
      "exec-ns": 18821861,
      "total-ns": 19677376,
      "patts-hit": {},
      "rewritten": "train['TotalBsmtSF'] = train['TotalBsmtSF'].clip(upper=train['TotalBsmtSF']\n    .quantile(0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['1stFlrSF'])\n_ = train['1stFlrSF']",
      "rewrite-ns": 337778,
      "overhead-ns": 337778,
      "exec-ns": 533264,
      "total-ns": 871042,
      "patts-hit": {},
      "rewritten": "_ = train['1stFlrSF']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['1stFlrSF']= train['1stFlrSF'].clip_upper(train['1stFlrSF'].quantile(0.99))\ntrain['1stFlrSF']= train['1stFlrSF'].clip(upper=train['1stFlrSF'].quantile(0.99))",
      "rewrite-ns": 847350,
      "overhead-ns": 847350,
      "exec-ns": 17352304,
      "total-ns": 18199654,
      "patts-hit": {},
      "rewritten": "train['1stFlrSF'] = train['1stFlrSF'].clip(upper=train['1stFlrSF'].quantile\n    (0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['2ndFlrSF'])\n_ = train['2ndFlrSF']",
      "rewrite-ns": 329856,
      "overhead-ns": 329856,
      "exec-ns": 504295,
      "total-ns": 834151,
      "patts-hit": {},
      "rewritten": "_ = train['2ndFlrSF']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['2ndFlrSF']= train['2ndFlrSF'].clip_upper(train['2ndFlrSF'].quantile(0.99))\ntrain['2ndFlrSF']= train['2ndFlrSF'].clip(upper=train['2ndFlrSF'].quantile(0.99))",
      "rewrite-ns": 852768,
      "overhead-ns": 852768,
      "exec-ns": 16093414,
      "total-ns": 16946182,
      "patts-hit": {},
      "rewritten": "train['2ndFlrSF'] = train['2ndFlrSF'].clip(upper=train['2ndFlrSF'].quantile\n    (0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['GrLivArea'])\n_ = train['GrLivArea']",
      "rewrite-ns": 326369,
      "overhead-ns": 326369,
      "exec-ns": 427185,
      "total-ns": 753554,
      "patts-hit": {},
      "rewritten": "_ = train['GrLivArea']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['GrLivArea']= train['GrLivArea'].clip_upper(train['GrLivArea'].quantile(0.99))\ntrain['GrLivArea']= train['GrLivArea'].clip(upper=train['GrLivArea'].quantile(0.99))",
      "rewrite-ns": 843760,
      "overhead-ns": 843760,
      "exec-ns": 17374234,
      "total-ns": 18217994,
      "patts-hit": {},
      "rewritten": "train['GrLivArea'] = train['GrLivArea'].clip(upper=train['GrLivArea'].\n    quantile(0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['BedroomAbvGr'])\n_ = train['BedroomAbvGr']",
      "rewrite-ns": 313953,
      "overhead-ns": 313953,
      "exec-ns": 400271,
      "total-ns": 714224,
      "patts-hit": {},
      "rewritten": "_ = train['BedroomAbvGr']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['BedroomAbvGr']= train['BedroomAbvGr'].clip_upper(train['BedroomAbvGr'].quantile(0.99))\n# train['BedroomAbvGr']= train['BedroomAbvGr'].clip_lower(train['BedroomAbvGr'].quantile(0.01))\ntrain['BedroomAbvGr']= train['BedroomAbvGr'].clip(upper=train['BedroomAbvGr'].quantile(0.99))\ntrain['BedroomAbvGr']= train['BedroomAbvGr'].clip(lower=train['BedroomAbvGr'].quantile(0.01))",
      "rewrite-ns": 1689072,
      "overhead-ns": 1689072,
      "exec-ns": 21162152,
      "total-ns": 22851224,
      "patts-hit": {},
      "rewritten": "train['BedroomAbvGr'] = train['BedroomAbvGr'].clip(upper=train[\n    'BedroomAbvGr'].quantile(0.99))\ntrain['BedroomAbvGr'] = train['BedroomAbvGr'].clip(lower=train[\n    'BedroomAbvGr'].quantile(0.01))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['GarageCars'])\n_ = train['GarageCars']",
      "rewrite-ns": 308432,
      "overhead-ns": 308432,
      "exec-ns": 437986,
      "total-ns": 746418,
      "patts-hit": {},
      "rewritten": "_ = train['GarageCars']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['GarageCars']= train['GarageCars'].clip_upper(train['GarageCars'].quantile(0.99))\ntrain['GarageCars']= train['GarageCars'].clip(upper=train['GarageCars'].quantile(0.99))",
      "rewrite-ns": 835901,
      "overhead-ns": 835901,
      "exec-ns": 15032761,
      "total-ns": 15868662,
      "patts-hit": {},
      "rewritten": "train['GarageCars'] = train['GarageCars'].clip(upper=train['GarageCars'].\n    quantile(0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['GarageArea'])\n_ = train['GarageArea']",
      "rewrite-ns": 309277,
      "overhead-ns": 309277,
      "exec-ns": 392164,
      "total-ns": 701441,
      "patts-hit": {},
      "rewritten": "_ = train['GarageArea']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['GarageArea']= train['GarageArea'].clip_upper(train['GarageArea'].quantile(0.99))\ntrain['GarageArea']= train['GarageArea'].clip(upper=train['GarageArea'].quantile(0.99))",
      "rewrite-ns": 837786,
      "overhead-ns": 837786,
      "exec-ns": 15676248,
      "total-ns": 16514034,
      "patts-hit": {},
      "rewritten": "train['GarageArea'] = train['GarageArea'].clip(upper=train['GarageArea'].\n    quantile(0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['WoodDeckSF'])\n_ = train['WoodDeckSF']",
      "rewrite-ns": 307976,
      "overhead-ns": 307976,
      "exec-ns": 395218,
      "total-ns": 703194,
      "patts-hit": {},
      "rewritten": "_ = train['WoodDeckSF']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['WoodDeckSF']= train['WoodDeckSF'].clip_upper(train['WoodDeckSF'].quantile(0.99))\ntrain['WoodDeckSF']= train['WoodDeckSF'].clip(upper=train['WoodDeckSF'].quantile(0.99))",
      "rewrite-ns": 983039,
      "overhead-ns": 983039,
      "exec-ns": 14628886,
      "total-ns": 15611925,
      "patts-hit": {},
      "rewritten": "train['WoodDeckSF'] = train['WoodDeckSF'].clip(upper=train['WoodDeckSF'].\n    quantile(0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['OpenPorchSF'])\n_ = train['OpenPorchSF']",
      "rewrite-ns": 308123,
      "overhead-ns": 308123,
      "exec-ns": 390897,
      "total-ns": 699020,
      "patts-hit": {},
      "rewritten": "_ = train['OpenPorchSF']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['OpenPorchSF']= train['OpenPorchSF'].clip_upper(train['OpenPorchSF'].quantile(0.99))\ntrain['OpenPorchSF']= train['OpenPorchSF'].clip(upper=train['OpenPorchSF'].quantile(0.99))",
      "rewrite-ns": 835760,
      "overhead-ns": 835760,
      "exec-ns": 14117767,
      "total-ns": 14953527,
      "patts-hit": {},
      "rewritten": "train['OpenPorchSF'] = train['OpenPorchSF'].clip(upper=train['OpenPorchSF']\n    .quantile(0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['EnclosedPorch'])\n_ = train['EnclosedPorch']",
      "rewrite-ns": 305262,
      "overhead-ns": 305262,
      "exec-ns": 348491,
      "total-ns": 653753,
      "patts-hit": {},
      "rewritten": "_ = train['EnclosedPorch']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['EnclosedPorch']= train['EnclosedPorch'].clip_upper(train['EnclosedPorch'].quantile(0.99))\ntrain['EnclosedPorch']= train['EnclosedPorch'].clip(upper=train['EnclosedPorch'].quantile(0.99))",
      "rewrite-ns": 821237,
      "overhead-ns": 821237,
      "exec-ns": 13267795,
      "total-ns": 14089032,
      "patts-hit": {},
      "rewritten": "train['EnclosedPorch'] = train['EnclosedPorch'].clip(upper=train[\n    'EnclosedPorch'].quantile(0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['3SsnPorch'])\n_ = train['3SsnPorch']",
      "rewrite-ns": 305541,
      "overhead-ns": 305541,
      "exec-ns": 346768,
      "total-ns": 652309,
      "patts-hit": {},
      "rewritten": "_ = train['3SsnPorch']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['3SsnPorch']= train['3SsnPorch'].clip_upper(train['3SsnPorch'].quantile(0.99))\ntrain['3SsnPorch']= train['3SsnPorch'].clip(upper=train['3SsnPorch'].quantile(0.99))",
      "rewrite-ns": 822114,
      "overhead-ns": 822114,
      "exec-ns": 12249768,
      "total-ns": 13071882,
      "patts-hit": {},
      "rewritten": "train['3SsnPorch'] = train['3SsnPorch'].clip(upper=train['3SsnPorch'].\n    quantile(0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['ScreenPorch'])\n_ = train['ScreenPorch']",
      "rewrite-ns": 316475,
      "overhead-ns": 316475,
      "exec-ns": 407345,
      "total-ns": 723820,
      "patts-hit": {},
      "rewritten": "_ = train['ScreenPorch']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['ScreenPorch']= train['ScreenPorch'].clip_upper(train['ScreenPorch'].quantile(0.99))\ntrain['ScreenPorch']= train['ScreenPorch'].clip(upper=train['ScreenPorch'].quantile(0.99))",
      "rewrite-ns": 832852,
      "overhead-ns": 832852,
      "exec-ns": 11801787,
      "total-ns": 12634639,
      "patts-hit": {},
      "rewritten": "train['ScreenPorch'] = train['ScreenPorch'].clip(upper=train['ScreenPorch']\n    .quantile(0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['PoolArea'])\n_ = train['PoolArea']",
      "rewrite-ns": 310151,
      "overhead-ns": 310151,
      "exec-ns": 372410,
      "total-ns": 682561,
      "patts-hit": {},
      "rewritten": "_ = train['PoolArea']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['PoolArea']= train['PoolArea'].clip_upper(train['PoolArea'].quantile(0.99))\ntrain['PoolArea']= train['PoolArea'].clip(upper=train['PoolArea'].quantile(0.99))",
      "rewrite-ns": 837008,
      "overhead-ns": 837008,
      "exec-ns": 11487555,
      "total-ns": 12324563,
      "patts-hit": {},
      "rewritten": "train['PoolArea'] = train['PoolArea'].clip(upper=train['PoolArea'].quantile\n    (0.99))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train['MiscVal'])\n_ = train['MiscVal']",
      "rewrite-ns": 311272,
      "overhead-ns": 311272,
      "exec-ns": 375901,
      "total-ns": 687173,
      "patts-hit": {},
      "rewritten": "_ = train['MiscVal']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.boxplot(train.SalePrice)\n_ = train.SalePrice",
      "rewrite-ns": 250235,
      "overhead-ns": 250235,
      "exec-ns": 237613,
      "total-ns": 487848,
      "patts-hit": {},
      "rewritten": "_ = train.SalePrice\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['SalePrice']= train['SalePrice'].clip_upper(train['SalePrice'].quantile(0.99))\n# train['SalePrice']= train['SalePrice'].clip_lower(train['SalePrice'].quantile(0.01))\ntrain['SalePrice']= train['SalePrice'].clip(upper=train['SalePrice'].quantile(0.99))\ntrain['SalePrice']= train['SalePrice'].clip(lower=train['SalePrice'].quantile(0.01))",
      "rewrite-ns": 1561932,
      "overhead-ns": 1561932,
      "exec-ns": 16818372,
      "total-ns": 18380304,
      "patts-hit": {},
      "rewritten": "train['SalePrice'] = train['SalePrice'].clip(upper=train['SalePrice'].\n    quantile(0.99))\ntrain['SalePrice'] = train['SalePrice'].clip(lower=train['SalePrice'].\n    quantile(0.01))\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# train['MiscVal']= train['MiscVal'].clip_upper(train['MiscVal'].quantile(0.99))\ntrain['MiscVal']= train['MiscVal'].clip(upper=train['MiscVal'].quantile(0.99))",
      "rewrite-ns": 824904,
      "overhead-ns": 824904,
      "exec-ns": 10932155,
      "total-ns": 11757059,
      "patts-hit": {},
      "rewritten": "train['MiscVal'] = train['MiscVal'].clip(upper=train['MiscVal'].quantile(0.99))\n"
    },
    {
      "raw": "num_corr=num_train .corr()\n# FIRST-AUTHOR: remove plotting\n# plt.subplots(figsize=(13,10))\n# sns.heatmap(num_corr,vmax =.8 ,square = True)",
      "rewrite-ns": 333630,
      "overhead-ns": 333630,
      "exec-ns": 607278110,
      "total-ns": 607611740,
      "patts-hit": {},
      "rewritten": "num_corr = num_train.corr()\n"
    },
    {
      "raw": "k = 14\ncols = num_corr.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(num_train[cols].values.T)\n# FIRST-AUTHOR: remove plotting\n# sns.set(font_scale=1.35)\n# f, ax = plt.subplots(figsize=(10,10))\n# hm=sns.heatmap(cm, annot = True,vmax =.8, yticklabels=cols.values, xticklabels = cols.values)\n_ = cols.values\n_ = cols.values",
      "rewrite-ns": 1645259,
      "overhead-ns": 1645259,
      "exec-ns": 21880473,
      "total-ns": 23525732,
      "patts-hit": {},
      "rewritten": "k = 14\ncols = num_corr.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(num_train[cols].values.T)\n_ = cols.values\n_ = cols.values\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# import statsmodels.api as sm\n# import statsmodels.formula.api as smf",
      "rewrite-ns": 22229,
      "overhead-ns": 22229,
      "exec-ns": 111873,
      "total-ns": 134102,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train.info()",
      "rewrite-ns": 116375,
      "overhead-ns": 116375,
      "exec-ns": 707144007,
      "total-ns": 707260382,
      "patts-hit": {},
      "rewritten": "train.info()\n"
    },
    {
      "raw": "train.columns",
      "rewrite-ns": 77076,
      "overhead-ns": 77076,
      "exec-ns": 870144,
      "total-ns": 947220,
      "patts-hit": {},
      "rewritten": "train.columns\n"
    },
    {
      "raw": "s1 = set(train.columns)\ns2 = set(['SalePrice'])",
      "rewrite-ns": 676722,
      "overhead-ns": 676722,
      "exec-ns": 282542,
      "total-ns": 959264,
      "patts-hit": {},
      "rewritten": "s1 = set(train.columns)\ns2 = set(['SalePrice'])\n"
    },
    {
      "raw": "features = \"+\".join((set(s1)-s2))\nfeatures",
      "rewrite-ns": 617135,
      "overhead-ns": 617135,
      "exec-ns": 507749,
      "total-ns": 1124884,
      "patts-hit": {},
      "rewritten": "features = '+'.join(set(s1) - s2)\nfeatures\n"
    },
    {
      "raw": "train = train.rename(columns ={'1stFlrSF':'firstFlrSF','2ndFlrSF':'iindFlrSF','3SsnPorch':'iiiSsnPorch'})",
      "rewrite-ns": 622055,
      "overhead-ns": 622055,
      "exec-ns": 226000819,
      "total-ns": 226622874,
      "patts-hit": {},
      "rewritten": "train = train.rename(columns={'1stFlrSF': 'firstFlrSF', '2ndFlrSF':\n    'iindFlrSF', '3SsnPorch': 'iiiSsnPorch'})\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# lm=smf.ols('SalePrice~firstFlrSF+MasVnrType+GarageFinish+KitchenAbvGr+WoodDeckSF+LandContour+LandSlope+GarageCars+Street+Exterior1st+iindFlrSF+SaleCondition+Electrical+LotConfig+HeatingQC+PavedDrive+LotArea+BsmtUnfSF+RoofMatl+TotRmsAbvGrd+BsmtFullBath+ExterQual+BedroomAbvGr+EnclosedPorch+BsmtQual+BsmtFinSF2+GarageCond+HouseStyle+GrLivArea+PoolArea+Utilities+BsmtExposure+HalfBath+Condition1+YrSold+MasVnrArea+BldgType+MSZoning+Fireplaces+FireplaceQu+BsmtFinType1+YearBuilt+BsmtHalfBath+Heating+SaleType+BsmtCond+MSSubClass+ScreenPorch+OpenPorchSF+FullBath+BsmtFinSF1+MoSold+LowQualFinSF+GarageType+Exterior2nd+iiiSsnPorch+TotalBsmtSF+ExterCond+Neighborhood+OverallQual+GarageArea+LotShape+MiscVal+YearRemodAdd+OverallCond+BsmtFinType2+Condition2+CentralAir+LotFrontage+Functional+RoofStyle+GarageYrBlt+KitchenQual+Foundation+GarageQual',data = train).fit()",
      "rewrite-ns": 27409,
      "overhead-ns": 27409,
      "exec-ns": 117212,
      "total-ns": 144621,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# lm.summary()",
      "rewrite-ns": 14926,
      "overhead-ns": 14926,
      "exec-ns": 77912,
      "total-ns": 92838,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "",
      "rewrite-ns": 10845,
      "overhead-ns": 10845,
      "exec-ns": 60779,
      "total-ns": 71624,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# imc = pd.DataFrame(lm.pvalues)\n# imc\nimc = pd.DataFrame(pd.Series(0, index=['firstFlrSF', 'MasVnrType', 'GarageFinish+KitchenAbvGr',\n                                       'WoodDeckSF', 'LandContour', 'LandSlope', 'GarageCars',\n                                       'Street', 'Exterior1st', 'iindFlrSF', 'SaleCondition',\n                                       'Electrical', 'LotConfig', 'HeatingQC', 'PavedDrive', 'LotArea',\n                                       'BsmtUnfSF', 'RoofMatl', 'TotRmsAbvGrd', 'BsmtFullBath', 'ExterQual',\n                                       'BedroomAbvGr', 'EnclosedPorch', 'BsmtQual', 'BsmtFinSF2', 'GarageCond',\n                                       'HouseStyle', 'GrLivArea', 'PoolArea', 'Utilities', 'BsmtExposure',\n                                       'HalfBath', 'Condition1', 'YrSold', 'MasVnrArea', 'BldgType',\n                                       'MSZoning', 'Fireplaces', 'FireplaceQu', 'BsmtFinType1', 'YearBuilt',\n                                       'BsmtHalfBath', 'Heating', 'SaleType', 'BsmtCond', 'MSSubClass',\n                                       'ScreenPorch', 'OpenPorchSF', 'FullBath', 'BsmtFinSF1', 'MoSold',\n                                       'LowQualFinSF', 'GarageType', 'Exterior2nd', 'iiiSsnPorch',\n                                       'TotalBsmtSF', 'ExterCond', 'Neighborhood', 'OverallQual',\n                                       'GarageArea', 'LotShape', 'MiscVal', 'YearRemodAdd',\n                                       'OverallCond', 'BsmtFinType2', 'Condition2', 'CentralAir',\n                                       'LotFrontage', 'Functional', 'RoofStyle', 'GarageYrBlt', 'KitchenQual',\n                                       'Foundation', 'GarageQual']))\nimc",
      "rewrite-ns": 3322348,
      "overhead-ns": 3322348,
      "exec-ns": 4017918,
      "total-ns": 7340266,
      "patts-hit": {},
      "rewritten": "imc = pd.DataFrame(pd.Series(0, index=['firstFlrSF', 'MasVnrType',\n    'GarageFinish+KitchenAbvGr', 'WoodDeckSF', 'LandContour', 'LandSlope',\n    'GarageCars', 'Street', 'Exterior1st', 'iindFlrSF', 'SaleCondition',\n    'Electrical', 'LotConfig', 'HeatingQC', 'PavedDrive', 'LotArea',\n    'BsmtUnfSF', 'RoofMatl', 'TotRmsAbvGrd', 'BsmtFullBath', 'ExterQual',\n    'BedroomAbvGr', 'EnclosedPorch', 'BsmtQual', 'BsmtFinSF2', 'GarageCond',\n    'HouseStyle', 'GrLivArea', 'PoolArea', 'Utilities', 'BsmtExposure',\n    'HalfBath', 'Condition1', 'YrSold', 'MasVnrArea', 'BldgType',\n    'MSZoning', 'Fireplaces', 'FireplaceQu', 'BsmtFinType1', 'YearBuilt',\n    'BsmtHalfBath', 'Heating', 'SaleType', 'BsmtCond', 'MSSubClass',\n    'ScreenPorch', 'OpenPorchSF', 'FullBath', 'BsmtFinSF1', 'MoSold',\n    'LowQualFinSF', 'GarageType', 'Exterior2nd', 'iiiSsnPorch',\n    'TotalBsmtSF', 'ExterCond', 'Neighborhood', 'OverallQual', 'GarageArea',\n    'LotShape', 'MiscVal', 'YearRemodAdd', 'OverallCond', 'BsmtFinType2',\n    'Condition2', 'CentralAir', 'LotFrontage', 'Functional', 'RoofStyle',\n    'GarageYrBlt', 'KitchenQual', 'Foundation', 'GarageQual']))\nimc\n"
    },
    {
      "raw": "best_features = imc[imc[0] <= 0.05].index\nbest_features",
      "rewrite-ns": 593135,
      "overhead-ns": 593135,
      "exec-ns": 1127115,
      "total-ns": 1720250,
      "patts-hit": {},
      "rewritten": "best_features = imc[imc[0] <= 0.05].index\nbest_features\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from statsmodels.stats.outliers_influence import variance_inflation_factor as vif",
      "rewrite-ns": 13225,
      "overhead-ns": 13225,
      "exec-ns": 68539,
      "total-ns": 81764,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# train['intercept'] = lm.params[0]\ntrain['intercept'] = 210016.3483272409",
      "rewrite-ns": 289890,
      "overhead-ns": 289890,
      "exec-ns": 659314,
      "total-ns": 949204,
      "patts-hit": {},
      "rewritten": "train['intercept'] = 210016.3483272409\n"
    },
    {
      "raw": "for i in range(18):\n# FIRST-AUTHOR: make notebook run, remove ML code\n#     print (vif(train[['firstFlrSF', 'WoodDeckSF', 'GarageCars', 'iindFlrSF', 'LotArea',\n#        'BsmtUnfSF', 'GrLivArea', 'PoolArea', 'Fireplaces', 'YearBuilt',\n#        'ScreenPorch', 'LowQualFinSF', 'TotalBsmtSF', 'OverallQual',\n#        'GarageArea', 'YearRemodAdd', 'OverallCond','intercept']].as_matrix(), i))\n    _ = train[['firstFlrSF', 'WoodDeckSF', 'GarageCars', 'iindFlrSF', 'LotArea',\n       'BsmtUnfSF', 'GrLivArea', 'PoolArea', 'Fireplaces', 'YearBuilt',\n       'ScreenPorch', 'LowQualFinSF', 'TotalBsmtSF', 'OverallQual',\n       'GarageArea', 'YearRemodAdd', 'OverallCond','intercept']].to_numpy()",
      "rewrite-ns": 1256806,
      "overhead-ns": 1256806,
      "exec-ns": 170243829,
      "total-ns": 171500635,
      "patts-hit": {},
      "rewritten": "for i in range(18):\n    _ = train[['firstFlrSF', 'WoodDeckSF', 'GarageCars', 'iindFlrSF',\n        'LotArea', 'BsmtUnfSF', 'GrLivArea', 'PoolArea', 'Fireplaces',\n        'YearBuilt', 'ScreenPorch', 'LowQualFinSF', 'TotalBsmtSF',\n        'OverallQual', 'GarageArea', 'YearRemodAdd', 'OverallCond',\n        'intercept']].to_numpy()\n"
    },
    {
      "raw": "train_a = train[ ['GarageFinish','Exterior1st','SaleCondition', 'LotConfig', 'RoofMatl', 'ExterQual', 'BsmtQual',  'GarageCond',\n        'BsmtExposure', 'Condition1','BldgType', 'MSZoning', 'SaleType','GarageType', 'Exterior2nd','Neighborhood', 'Condition2',\n       'Functional', 'GarageYrBlt', 'KitchenQual','Foundation', 'GarageQual', 'WoodDeckSF', 'LotArea',\n       'BsmtUnfSF', 'Fireplaces', 'YearBuilt','ScreenPorch', 'LowQualFinSF', 'TotalBsmtSF', 'OverallQual',\n       'YearRemodAdd', 'OverallCond','SalePrice']]",
      "rewrite-ns": 1592602,
      "overhead-ns": 1592602,
      "exec-ns": 25333680,
      "total-ns": 26926282,
      "patts-hit": {},
      "rewritten": "train_a = train[['GarageFinish', 'Exterior1st', 'SaleCondition',\n    'LotConfig', 'RoofMatl', 'ExterQual', 'BsmtQual', 'GarageCond',\n    'BsmtExposure', 'Condition1', 'BldgType', 'MSZoning', 'SaleType',\n    'GarageType', 'Exterior2nd', 'Neighborhood', 'Condition2', 'Functional',\n    'GarageYrBlt', 'KitchenQual', 'Foundation', 'GarageQual', 'WoodDeckSF',\n    'LotArea', 'BsmtUnfSF', 'Fireplaces', 'YearBuilt', 'ScreenPorch',\n    'LowQualFinSF', 'TotalBsmtSF', 'OverallQual', 'YearRemodAdd',\n    'OverallCond', 'SalePrice']]\n"
    },
    {
      "raw": "best_train = train_a\nbest_train.info()",
      "rewrite-ns": 312998,
      "overhead-ns": 312998,
      "exec-ns": 389500273,
      "total-ns": 389813271,
      "patts-hit": {},
      "rewritten": "best_train = train_a\nbest_train.info()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.ensemble import RandomForestRegressor",
      "rewrite-ns": 20040,
      "overhead-ns": 20040,
      "exec-ns": 106683,
      "total-ns": 126723,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_d = pd.get_dummies(train)",
      "rewrite-ns": 412517,
      "overhead-ns": 412517,
      "exec-ns": 593007118,
      "total-ns": 593419635,
      "patts-hit": {},
      "rewritten": "train_d = pd.get_dummies(train)\n"
    },
    {
      "raw": "numeric = train._get_numeric_data()\ncategory = train.drop(numeric.columns,axis = 1)",
      "rewrite-ns": 824948,
      "overhead-ns": 824948,
      "exec-ns": 43097887,
      "total-ns": 43922835,
      "patts-hit": {},
      "rewritten": "numeric = train._get_numeric_data()\ncategory = train.drop(numeric.columns, axis=1)\n"
    },
    {
      "raw": "train_dx = train_d.drop([\"SalePrice\"],axis = 1)\ntrain_dy = train_d.SalePrice",
      "rewrite-ns": 755997,
      "overhead-ns": 755997,
      "exec-ns": 65378033,
      "total-ns": 66134030,
      "patts-hit": {},
      "rewritten": "train_dx = train_d.drop(['SalePrice'], axis=1)\ntrain_dy = train_d.SalePrice\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.cross_validation import train_test_split",
      "rewrite-ns": 22237,
      "overhead-ns": 22237,
      "exec-ns": 112031,
      "total-ns": 134268,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# X_train, X_test, Y_train, Y_test = train_test_split(\n#         train_dx,\n#         train_dy,\n#         test_size=0.20,\n#         random_state=123)",
      "rewrite-ns": 16290,
      "overhead-ns": 16290,
      "exec-ns": 79807,
      "total-ns": 96097,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "",
      "rewrite-ns": 11670,
      "overhead-ns": 11670,
      "exec-ns": 72272,
      "total-ns": 83942,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# radm_clf = RandomForestRegressor(oob_score=True,n_estimators=100 )\n# radm_clf.fit( X_train, Y_train )",
      "rewrite-ns": 11513,
      "overhead-ns": 11513,
      "exec-ns": 59477,
      "total-ns": 70990,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# indices = np.argsort(radm_clf.feature_importances_)[::-1]\nfeature_rank = pd.DataFrame( columns = ['rank', 'feature', 'importance'] )\n# FIRST-AUTHOR: remove ML code\n# for f in range(X_train.shape[1]):\n#     feature_rank.loc[f] = [f+1,\n#                          X_train.columns[indices[f]],\n#                          radm_clf.feature_importances_[indices[f]]]\n# f, ax = plt.subplots(figsize=(10,100))\n# sns.barplot( y = 'feature', x = 'importance', data = feature_rank, color = 'Yellow')\n# plt.show()",
      "rewrite-ns": 575902,
      "overhead-ns": 575902,
      "exec-ns": 1324077,
      "total-ns": 1899979,
      "patts-hit": {},
      "rewritten": "feature_rank = pd.DataFrame(columns=['rank', 'feature', 'importance'])\n"
    },
    {
      "raw": "ff = feature_rank.head(30)\nff",
      "rewrite-ns": 415132,
      "overhead-ns": 415132,
      "exec-ns": 1105042,
      "total-ns": 1520174,
      "patts-hit": {},
      "rewritten": "ff = feature_rank.head(30)\nff\n"
    },
    {
      "raw": "list(ff.feature)",
      "rewrite-ns": 303887,
      "overhead-ns": 303887,
      "exec-ns": 553897,
      "total-ns": 857784,
      "patts-hit": {},
      "rewritten": "list(ff.feature)\n"
    },
    {
      "raw": "final_cols = train_d[['OverallQual','GrLivArea','GarageCars', 'TotalBsmtSF', 'BsmtFinSF1', 'firstFlrSF',\n 'GarageArea', 'LotArea', 'YearBuilt', 'OpenPorchSF', 'FullBath', 'LotFrontage', 'BsmtUnfSF', 'YearRemodAdd',\n 'OverallCond','iindFlrSF','MasVnrArea','GarageType_Detchd','WoodDeckSF','MoSold','BsmtQual_Gd','TotRmsAbvGrd',\n 'Neighborhood_Edwards','KitchenAbvGr','MSZoning_RM','MSSubClass','BsmtQual_Ex','GarageType_Attchd',\n'ExterQual_Ex','KitchenQual_Gd']]",
      "rewrite-ns": 1381264,
      "overhead-ns": 1381264,
      "exec-ns": 79975682,
      "total-ns": 81356946,
      "patts-hit": {},
      "rewritten": "final_cols = train_d[['OverallQual', 'GrLivArea', 'GarageCars',\n    'TotalBsmtSF', 'BsmtFinSF1', 'firstFlrSF', 'GarageArea', 'LotArea',\n    'YearBuilt', 'OpenPorchSF', 'FullBath', 'LotFrontage', 'BsmtUnfSF',\n    'YearRemodAdd', 'OverallCond', 'iindFlrSF', 'MasVnrArea',\n    'GarageType_Detchd', 'WoodDeckSF', 'MoSold', 'BsmtQual_Gd',\n    'TotRmsAbvGrd', 'Neighborhood_Edwards', 'KitchenAbvGr', 'MSZoning_RM',\n    'MSSubClass', 'BsmtQual_Ex', 'GarageType_Attchd', 'ExterQual_Ex',\n    'KitchenQual_Gd']]\n"
    },
    {
      "raw": "data_x = final_cols\ndata_y = train.SalePrice\nfinal_data = pd.concat([data_x,data_y],axis = 1)",
      "rewrite-ns": 959954,
      "overhead-ns": 959954,
      "exec-ns": 7912935,
      "total-ns": 8872889,
      "patts-hit": {},
      "rewritten": "data_x = final_cols\ndata_y = train.SalePrice\nfinal_data = pd.concat([data_x, data_y], axis=1)\n"
    },
    {
      "raw": "feats = \"+\".join(data_x)\nfeats",
      "rewrite-ns": 449008,
      "overhead-ns": 449008,
      "exec-ns": 589495,
      "total-ns": 1038503,
      "patts-hit": {},
      "rewritten": "feats = '+'.join(data_x)\nfeats\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# import statsmodels.api as sm\n# import statsmodels.formula.api as smf",
      "rewrite-ns": 16220,
      "overhead-ns": 16220,
      "exec-ns": 92100,
      "total-ns": 108320,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "final_data = final_data.rename(columns ={'1stFlrSF':'firstFlrSF','2ndFlrSF':'iindFlrSF'})",
      "rewrite-ns": 591757,
      "overhead-ns": 591757,
      "exec-ns": 33135227,
      "total-ns": 33726984,
      "patts-hit": {},
      "rewritten": "final_data = final_data.rename(columns={'1stFlrSF': 'firstFlrSF',\n    '2ndFlrSF': 'iindFlrSF'})\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# lm=smf.ols('SalePrice~OverallQual+GrLivArea+GarageCars+TotalBsmtSF+BsmtFinSF1+firstFlrSF+GarageArea+LotArea+YearBuilt+OpenPorchSF+FullBath+LotFrontage+BsmtUnfSF+YearRemodAdd+OverallCond+iindFlrSF+MasVnrArea+GarageType_Detchd+WoodDeckSF+MoSold+BsmtQual_Gd+TotRmsAbvGrd+Neighborhood_Edwards+KitchenAbvGr+MSZoning_RM+MSSubClass+BsmtQual_Ex+GarageType_Attchd+ExterQual_Ex+KitchenQual_Gd',final_data).fit()",
      "rewrite-ns": 23063,
      "overhead-ns": 23063,
      "exec-ns": 111236,
      "total-ns": 134299,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# lm.summary()",
      "rewrite-ns": 15102,
      "overhead-ns": 15102,
      "exec-ns": 82491,
      "total-ns": 97593,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# lm.pvalues",
      "rewrite-ns": 10596,
      "overhead-ns": 10596,
      "exec-ns": 62375,
      "total-ns": 72971,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from statsmodels.stats.outliers_influence import variance_inflation_factor as vif",
      "rewrite-ns": 10830,
      "overhead-ns": 10830,
      "exec-ns": 60094,
      "total-ns": 70924,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# final_data['intercept'] = lm.params[0]\nfinal_data['intercept'] = -831389.4696019923",
      "rewrite-ns": 394768,
      "overhead-ns": 394768,
      "exec-ns": 782715,
      "total-ns": 1177483,
      "patts-hit": {},
      "rewritten": "final_data['intercept'] = -831389.4696019923\n"
    },
    {
      "raw": "final_data.columns",
      "rewrite-ns": 60996,
      "overhead-ns": 60996,
      "exec-ns": 720887,
      "total-ns": 781883,
      "patts-hit": {},
      "rewritten": "final_data.columns\n"
    },
    {
      "raw": "for i in range(31):\n# FIRST-AUTHOR: make notebook run\n#     print (vif(final_data[['OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'BsmtFinSF1',\n#        'firstFlrSF', 'GarageArea', 'LotArea', 'YearBuilt', 'OpenPorchSF',\n#        'FullBath', 'LotFrontage', 'BsmtUnfSF', 'YearRemodAdd', 'OverallCond',\n#        'iindFlrSF', 'MasVnrArea', 'GarageType_Detchd', 'WoodDeckSF', 'MoSold',\n#        'BsmtQual_Gd', 'TotRmsAbvGrd', 'Neighborhood_Edwards', 'KitchenAbvGr',\n#        'MSZoning_RM', 'MSSubClass', 'BsmtQual_Ex', 'GarageType_Attchd',\n#        'ExterQual_Ex', 'KitchenQual_Gd','intercept']].as_matrix(), i))\n    final_data[['OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'BsmtFinSF1',\n       'firstFlrSF', 'GarageArea', 'LotArea', 'YearBuilt', 'OpenPorchSF',\n       'FullBath', 'LotFrontage', 'BsmtUnfSF', 'YearRemodAdd', 'OverallCond',\n       'iindFlrSF', 'MasVnrArea', 'GarageType_Detchd', 'WoodDeckSF', 'MoSold',\n       'BsmtQual_Gd', 'TotRmsAbvGrd', 'Neighborhood_Edwards', 'KitchenAbvGr',\n       'MSZoning_RM', 'MSSubClass', 'BsmtQual_Ex', 'GarageType_Attchd',\n       'ExterQual_Ex', 'KitchenQual_Gd','intercept']].to_numpy()",
      "rewrite-ns": 1709258,
      "overhead-ns": 1709258,
      "exec-ns": 641868533,
      "total-ns": 643577791,
      "patts-hit": {},
      "rewritten": "for i in range(31):\n    final_data[['OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF',\n        'BsmtFinSF1', 'firstFlrSF', 'GarageArea', 'LotArea', 'YearBuilt',\n        'OpenPorchSF', 'FullBath', 'LotFrontage', 'BsmtUnfSF',\n        'YearRemodAdd', 'OverallCond', 'iindFlrSF', 'MasVnrArea',\n        'GarageType_Detchd', 'WoodDeckSF', 'MoSold', 'BsmtQual_Gd',\n        'TotRmsAbvGrd', 'Neighborhood_Edwards', 'KitchenAbvGr',\n        'MSZoning_RM', 'MSSubClass', 'BsmtQual_Ex', 'GarageType_Attchd',\n        'ExterQual_Ex', 'KitchenQual_Gd', 'intercept']].to_numpy()\n"
    },
    {
      "raw": "final_data = final_data.rename(columns ={'firstFlrSF':'1stFlrSF','iindFlrSF':'2ndFlrSF'})",
      "rewrite-ns": 639413,
      "overhead-ns": 639413,
      "exec-ns": 5015753,
      "total-ns": 5655166,
      "patts-hit": {},
      "rewritten": "final_data = final_data.rename(columns={'firstFlrSF': '1stFlrSF',\n    'iindFlrSF': '2ndFlrSF'})\n"
    },
    {
      "raw": "final_data1 = final_data.drop(['GrLivArea', 'GarageCars', 'BsmtFinSF1', 'TotalBsmtSF',\n       '1stFlrSF', 'GarageArea','YearBuilt','BsmtUnfSF','2ndFlrSF'],axis = 1)",
      "rewrite-ns": 843608,
      "overhead-ns": 843608,
      "exec-ns": 5171173,
      "total-ns": 6014781,
      "patts-hit": {},
      "rewritten": "final_data1 = final_data.drop(['GrLivArea', 'GarageCars', 'BsmtFinSF1',\n    'TotalBsmtSF', '1stFlrSF', 'GarageArea', 'YearBuilt', 'BsmtUnfSF',\n    '2ndFlrSF'], axis=1)\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# import scipy.stats as stats",
      "rewrite-ns": 20118,
      "overhead-ns": 20118,
      "exec-ns": 98935,
      "total-ns": 119053,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train.Neighborhood.value_counts()",
      "rewrite-ns": 358705,
      "overhead-ns": 358705,
      "exec-ns": 9513149,
      "total-ns": 9871854,
      "patts-hit": {},
      "rewritten": "train.Neighborhood.value_counts()\n"
    },
    {
      "raw": "nb1 = train.SalePrice[train.Neighborhood=='NAmes']\nnb2 = train.SalePrice[train.Neighborhood=='CollgCr']\nnb3 = train.SalePrice[train.Neighborhood=='Edwards']\nnb4 = train.SalePrice[train.Neighborhood=='Somerst']\nnb5 = train.SalePrice[train.Neighborhood=='Gilbert']\nnb6 = train.SalePrice[train.Neighborhood=='NridgHt']\nnb7 = train.SalePrice[train.Neighborhood=='Sawyer']\nnb8 = train.SalePrice[train.Neighborhood=='NWAmes']\nnb9 = train.SalePrice[train.Neighborhood=='SawyerW']\nnb10 = train.SalePrice[train.Neighborhood=='BrkSide']\nnb11 = train.SalePrice[train.Neighborhood=='Crawfor']\nnb12= train.SalePrice[train.Neighborhood=='Mitchel']\nnb13 = train.SalePrice[train.Neighborhood=='NoRidge']\nnb14 = train.SalePrice[train.Neighborhood=='Timber']\nnb15 = train.SalePrice[train.Neighborhood=='IDOTRR']\nnb16 = train.SalePrice[train.Neighborhood=='ClearCr']\nnb17 = train.SalePrice[train.Neighborhood=='StoneBr']\nnb18 = train.SalePrice[train.Neighborhood=='SWISU']\nnb19 = train.SalePrice[train.Neighborhood=='Blmngtn']\nnb20 = train.SalePrice[train.Neighborhood=='MeadowV']\nnb21 = train.SalePrice[train.Neighborhood=='BrDale']\nnb22 = train.SalePrice[train.Neighborhood=='Veenker']\nnb23 = train.SalePrice[train.Neighborhood=='NPkVill']\nnb24 = train.SalePrice[train.Neighborhood=='Blueste']",
      "rewrite-ns": 10622155,
      "overhead-ns": 10622155,
      "exec-ns": 216494392,
      "total-ns": 227116547,
      "patts-hit": {},
      "rewritten": "nb1 = train.SalePrice[train.Neighborhood == 'NAmes']\nnb2 = train.SalePrice[train.Neighborhood == 'CollgCr']\nnb3 = train.SalePrice[train.Neighborhood == 'Edwards']\nnb4 = train.SalePrice[train.Neighborhood == 'Somerst']\nnb5 = train.SalePrice[train.Neighborhood == 'Gilbert']\nnb6 = train.SalePrice[train.Neighborhood == 'NridgHt']\nnb7 = train.SalePrice[train.Neighborhood == 'Sawyer']\nnb8 = train.SalePrice[train.Neighborhood == 'NWAmes']\nnb9 = train.SalePrice[train.Neighborhood == 'SawyerW']\nnb10 = train.SalePrice[train.Neighborhood == 'BrkSide']\nnb11 = train.SalePrice[train.Neighborhood == 'Crawfor']\nnb12 = train.SalePrice[train.Neighborhood == 'Mitchel']\nnb13 = train.SalePrice[train.Neighborhood == 'NoRidge']\nnb14 = train.SalePrice[train.Neighborhood == 'Timber']\nnb15 = train.SalePrice[train.Neighborhood == 'IDOTRR']\nnb16 = train.SalePrice[train.Neighborhood == 'ClearCr']\nnb17 = train.SalePrice[train.Neighborhood == 'StoneBr']\nnb18 = train.SalePrice[train.Neighborhood == 'SWISU']\nnb19 = train.SalePrice[train.Neighborhood == 'Blmngtn']\nnb20 = train.SalePrice[train.Neighborhood == 'MeadowV']\nnb21 = train.SalePrice[train.Neighborhood == 'BrDale']\nnb22 = train.SalePrice[train.Neighborhood == 'Veenker']\nnb23 = train.SalePrice[train.Neighborhood == 'NPkVill']\nnb24 = train.SalePrice[train.Neighborhood == 'Blueste']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# stats.f_oneway(nb1,nb2,nb3,nb4,nb5,nb6,nb7,nb8,nb9,nb10,nb11,nb12,nb13,nb14,nb15,nb16,nb17,nb18,nb19,nb20,nb21,nb22,nb23,nb24)",
      "rewrite-ns": 14117,
      "overhead-ns": 14117,
      "exec-ns": 73740,
      "total-ns": 87857,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train.GarageQual.value_counts()",
      "rewrite-ns": 322172,
      "overhead-ns": 322172,
      "exec-ns": 9113997,
      "total-ns": 9436169,
      "patts-hit": {},
      "rewritten": "train.GarageQual.value_counts()\n"
    },
    {
      "raw": "gq1 = train.SalePrice[train.GarageQual=='TA']\ngq2 = train.SalePrice[train.GarageQual=='NG']\ngq3 = train.SalePrice[train.GarageQual=='Fa']\ngq4 = train.SalePrice[train.GarageQual=='Gd']\ngq5 = train.SalePrice[train.GarageQual=='Ex']\ngq6 = train.SalePrice[train.GarageQual=='Po']",
      "rewrite-ns": 2611129,
      "overhead-ns": 2611129,
      "exec-ns": 50528161,
      "total-ns": 53139290,
      "patts-hit": {},
      "rewritten": "gq1 = train.SalePrice[train.GarageQual == 'TA']\ngq2 = train.SalePrice[train.GarageQual == 'NG']\ngq3 = train.SalePrice[train.GarageQual == 'Fa']\ngq4 = train.SalePrice[train.GarageQual == 'Gd']\ngq5 = train.SalePrice[train.GarageQual == 'Ex']\ngq6 = train.SalePrice[train.GarageQual == 'Po']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# stats.f_oneway(gq1,gq2,gq3,gq4,gq5)",
      "rewrite-ns": 13469,
      "overhead-ns": 13469,
      "exec-ns": 71034,
      "total-ns": 84503,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train.GarageCond.value_counts()",
      "rewrite-ns": 316718,
      "overhead-ns": 316718,
      "exec-ns": 9089454,
      "total-ns": 9406172,
      "patts-hit": {},
      "rewritten": "train.GarageCond.value_counts()\n"
    },
    {
      "raw": "gc1 = train.SalePrice[train.GarageQual=='TA']\ngc2 = train.SalePrice[train.GarageQual=='NG']\ngc3 = train.SalePrice[train.GarageQual=='Fa']\ngc4 = train.SalePrice[train.GarageQual=='Gd']\ngc5 = train.SalePrice[train.GarageQual=='Po']\ngc6 = train.SalePrice[train.GarageQual=='Ex']",
      "rewrite-ns": 2651357,
      "overhead-ns": 2651357,
      "exec-ns": 50444634,
      "total-ns": 53095991,
      "patts-hit": {},
      "rewritten": "gc1 = train.SalePrice[train.GarageQual == 'TA']\ngc2 = train.SalePrice[train.GarageQual == 'NG']\ngc3 = train.SalePrice[train.GarageQual == 'Fa']\ngc4 = train.SalePrice[train.GarageQual == 'Gd']\ngc5 = train.SalePrice[train.GarageQual == 'Po']\ngc6 = train.SalePrice[train.GarageQual == 'Ex']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# stats.f_oneway(gc1,gc2,gc3,gc4,gc5)",
      "rewrite-ns": 12956,
      "overhead-ns": 12956,
      "exec-ns": 70179,
      "total-ns": 83135,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train.BsmtExposure.value_counts()",
      "rewrite-ns": 318995,
      "overhead-ns": 318995,
      "exec-ns": 9119136,
      "total-ns": 9438131,
      "patts-hit": {},
      "rewritten": "train.BsmtExposure.value_counts()\n"
    },
    {
      "raw": "be1 = train.SalePrice[train.BsmtExposure==\"No\"]\nbe2 = train.SalePrice[train.BsmtExposure==\"Av\"]\nbe3 = train.SalePrice[train.BsmtExposure==\"Gd\"]\nbe4 = train.SalePrice[train.BsmtExposure==\"Mn\"]\nbe5 = train.SalePrice[train.BsmtExposure==\"NB\"]",
      "rewrite-ns": 2284735,
      "overhead-ns": 2284735,
      "exec-ns": 45718314,
      "total-ns": 48003049,
      "patts-hit": {},
      "rewritten": "be1 = train.SalePrice[train.BsmtExposure == 'No']\nbe2 = train.SalePrice[train.BsmtExposure == 'Av']\nbe3 = train.SalePrice[train.BsmtExposure == 'Gd']\nbe4 = train.SalePrice[train.BsmtExposure == 'Mn']\nbe5 = train.SalePrice[train.BsmtExposure == 'NB']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# stats.f_oneway(be1,be2,be3,be4,be5)",
      "rewrite-ns": 13015,
      "overhead-ns": 13015,
      "exec-ns": 70429,
      "total-ns": 83444,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "test_data = pd.read_csv('./input/test.scaled.csv')",
      "rewrite-ns": 369958,
      "overhead-ns": 369958,
      "exec-ns": 1044499755,
      "total-ns": 1044869713,
      "patts-hit": {},
      "rewritten": "test_data = pd.read_csv('./input/test.scaled.csv')\n"
    },
    {
      "raw": "test1 = test_data[['OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1',\n       'TotalBsmtSF', 'FullBath', 'TotRmsAbvGrd', 'Fireplaces', \n       'MSZoning', 'LotShape', 'LotConfig', 'Neighborhood', 'Condition1',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'ExterQual',\n       'Foundation', 'BsmtQual', 'BsmtExposure', 'CentralAir', 'FireplaceQu',\n       'GarageFinish', 'GarageQual', 'GarageCond']]",
      "rewrite-ns": 1331778,
      "overhead-ns": 1331778,
      "exec-ns": 23469506,
      "total-ns": 24801284,
      "patts-hit": {},
      "rewritten": "test1 = test_data[['OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea',\n    'BsmtFinSF1', 'TotalBsmtSF', 'FullBath', 'TotRmsAbvGrd', 'Fireplaces',\n    'MSZoning', 'LotShape', 'LotConfig', 'Neighborhood', 'Condition1',\n    'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'ExterQual',\n    'Foundation', 'BsmtQual', 'BsmtExposure', 'CentralAir', 'FireplaceQu',\n    'GarageFinish', 'GarageQual', 'GarageCond']]\n"
    },
    {
      "raw": "nulls1 = test1.isnull().sum().sort_values(ascending = False)\nnulls1",
      "rewrite-ns": 768282,
      "overhead-ns": 768282,
      "exec-ns": 321579151,
      "total-ns": 322347433,
      "patts-hit": {},
      "rewritten": "nulls1 = test1.isnull().sum().sort_values(ascending=False)\nnulls1\n"
    },
    {
      "raw": "test1['FireplaceQu']=test1['FireplaceQu'].fillna('NF')\ntest1['GarageCond']=test1['GarageCond'].fillna('NG')\ntest1['GarageFinish']=test1['GarageFinish'].fillna('NG')\ntest1['GarageQual']=test1['GarageQual'].fillna('NG')\ntest1['BsmtExposure']=test1['BsmtExposure'].fillna('NB')\ntest1['BsmtQual'] = test1['BsmtQual'].fillna('NB')\ntest1['MasVnrArea'] = test1['MasVnrArea'].fillna(test1['MasVnrArea'].mean())\ntest1['MSZoning'] = test1['MSZoning'].fillna('RL')\ntest1['BsmtFinSF1'] = test1['BsmtFinSF1'].fillna(test1['BsmtFinSF1'].mean())\ntest1['TotalBsmtSF'] = test1['TotalBsmtSF'].fillna(test1['TotalBsmtSF'].mean())",
      "rewrite-ns": 3015110,
      "overhead-ns": 3015110,
      "exec-ns": 71239574,
      "total-ns": 74254684,
      "patts-hit": {
        "IsInplaceUpdate": 1
      },
      "rewritten": "_DIAS_ser = test1['FireplaceQu']\nif type(_DIAS_ser) != pd.Series:\n    test1['FireplaceQu'] = test1['FireplaceQu'].fillna('NF')\nelse:\n    test1['FireplaceQu'].fillna('NF', inplace=True)\n_DIAS_ser = test1['GarageCond']\nif type(_DIAS_ser) != pd.Series:\n    test1['GarageCond'] = test1['GarageCond'].fillna('NG')\nelse:\n    test1['GarageCond'].fillna('NG', inplace=True)\n_DIAS_ser = test1['GarageFinish']\nif type(_DIAS_ser) != pd.Series:\n    test1['GarageFinish'] = test1['GarageFinish'].fillna('NG')\nelse:\n    test1['GarageFinish'].fillna('NG', inplace=True)\n_DIAS_ser = test1['GarageQual']\nif type(_DIAS_ser) != pd.Series:\n    test1['GarageQual'] = test1['GarageQual'].fillna('NG')\nelse:\n    test1['GarageQual'].fillna('NG', inplace=True)\n_DIAS_ser = test1['BsmtExposure']\nif type(_DIAS_ser) != pd.Series:\n    test1['BsmtExposure'] = test1['BsmtExposure'].fillna('NB')\nelse:\n    test1['BsmtExposure'].fillna('NB', inplace=True)\n_DIAS_ser = test1['BsmtQual']\nif type(_DIAS_ser) != pd.Series:\n    test1['BsmtQual'] = test1['BsmtQual'].fillna('NB')\nelse:\n    test1['BsmtQual'].fillna('NB', inplace=True)\n_DIAS_ser = test1['MasVnrArea']\nif type(_DIAS_ser) != pd.Series:\n    test1['MasVnrArea'] = test1['MasVnrArea'].fillna(test1['MasVnrArea'].mean()\n        )\nelse:\n    test1['MasVnrArea'].fillna(test1['MasVnrArea'].mean(), inplace=True)\n_DIAS_ser = test1['MSZoning']\nif type(_DIAS_ser) != pd.Series:\n    test1['MSZoning'] = test1['MSZoning'].fillna('RL')\nelse:\n    test1['MSZoning'].fillna('RL', inplace=True)\n_DIAS_ser = test1['BsmtFinSF1']\nif type(_DIAS_ser) != pd.Series:\n    test1['BsmtFinSF1'] = test1['BsmtFinSF1'].fillna(test1['BsmtFinSF1'].mean()\n        )\nelse:\n    test1['BsmtFinSF1'].fillna(test1['BsmtFinSF1'].mean(), inplace=True)\n_DIAS_ser = test1['TotalBsmtSF']\nif type(_DIAS_ser) != pd.Series:\n    test1['TotalBsmtSF'] = test1['TotalBsmtSF'].fillna(test1['TotalBsmtSF']\n        .mean())\nelse:\n    test1['TotalBsmtSF'].fillna(test1['TotalBsmtSF'].mean(), inplace=True)\n"
    },
    {
      "raw": "test2 = test1._get_numeric_data()",
      "rewrite-ns": 358729,
      "overhead-ns": 358729,
      "exec-ns": 369340,
      "total-ns": 728069,
      "patts-hit": {},
      "rewritten": "test2 = test1._get_numeric_data()\n"
    },
    {
      "raw": "def var_summary(x):\n    return pd.Series([x.count(), x.isnull().sum(), x.sum(), x.mean(), x.median(),  x.std(), x.var(), x.min(), x.quantile(0.01), x.quantile(0.05),x.quantile(0.10),x.quantile(0.25),x.quantile(0.50),x.quantile(0.75), x.quantile(0.90),x.quantile(0.95), x.quantile(0.99),x.max()], \n                  index=['N', 'NMISS', 'SUM', 'MEAN','MEDIAN', 'STD', 'VAR', 'MIN', 'P1' , 'P5' ,'P10' ,'P25' ,'P50' ,'P75' ,'P90' ,'P95' ,'P99' ,'MAX'])\n\ntest2.apply(lambda x: var_summary(x)).T\n",
      "rewrite-ns": 4654156,
      "overhead-ns": 4659495,
      "exec-ns": 234341296,
      "total-ns": 238995452,
      "patts-hit": {},
      "rewritten": "def var_summary(x):\n    return pd.Series([x.count(), x.isnull().sum(), x.sum(), x.mean(), x.\n        median(), x.std(), x.var(), x.min(), x.quantile(0.01), x.quantile(\n        0.05), x.quantile(0.1), x.quantile(0.25), x.quantile(0.5), x.\n        quantile(0.75), x.quantile(0.9), x.quantile(0.95), x.quantile(0.99),\n        x.max()], index=['N', 'NMISS', 'SUM', 'MEAN', 'MEDIAN', 'STD',\n        'VAR', 'MIN', 'P1', 'P5', 'P10', 'P25', 'P50', 'P75', 'P90', 'P95',\n        'P99', 'MAX'])\ntest2.apply(lambda x: var_summary(x)).T\n"
    },
    {
      "raw": "test3 = test1.drop(test2.columns,axis = 1)",
      "rewrite-ns": 534789,
      "overhead-ns": 534789,
      "exec-ns": 19425597,
      "total-ns": 19960386,
      "patts-hit": {},
      "rewritten": "test3 = test1.drop(test2.columns, axis=1)\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\n# test2['OverallQual']= test2['OverallQual'].clip_upper(test2['OverallQual'].quantile(0.99))\n# test2['OverallQual']= test2['OverallQual'].clip_lower(test2['OverallQual'].quantile(0.01))\n# test2['YearBuilt']= test2['YearBuilt'].clip_upper(test2['YearBuilt'].quantile(0.99))\n# test2['YearBuilt']= test2['YearBuilt'].clip_lower(test2['YearBuilt'].quantile(0.01))\n# test2['MasVnrArea']= test2['MasVnrArea'].clip_upper(test2['MasVnrArea'].quantile(0.99))\n# test2['BsmtFinSF1']= test2['BsmtFinSF1'].clip_upper(test2['BsmtFinSF1'].quantile(0.99))\n# test2['TotalBsmtSF']= test2['TotalBsmtSF'].clip_upper(test2['TotalBsmtSF'].quantile(0.99))\n# test2['TotalBsmtSF']= test2['TotalBsmtSF'].clip_upper(test2['TotalBsmtSF'].quantile(0.99))\n# test2['TotRmsAbvGrd']= test2['TotRmsAbvGrd'].clip_upper(test2['TotRmsAbvGrd'].quantile(0.99))\ntest2['OverallQual']= test2['OverallQual'].clip(upper=test2['OverallQual'].quantile(0.99))\ntest2['OverallQual']= test2['OverallQual'].clip(lower=test2['OverallQual'].quantile(0.01))\ntest2['YearBuilt']= test2['YearBuilt'].clip(upper=test2['YearBuilt'].quantile(0.99))\ntest2['YearBuilt']= test2['YearBuilt'].clip(lower=test2['YearBuilt'].quantile(0.01))\ntest2['MasVnrArea']= test2['MasVnrArea'].clip(upper=test2['MasVnrArea'].quantile(0.99))\ntest2['BsmtFinSF1']= test2['BsmtFinSF1'].clip(upper=test2['BsmtFinSF1'].quantile(0.99))\ntest2['TotalBsmtSF']= test2['TotalBsmtSF'].clip(upper=test2['TotalBsmtSF'].quantile(0.99))\ntest2['TotalBsmtSF']= test2['TotalBsmtSF'].clip(upper=test2['TotalBsmtSF'].quantile(0.99))\ntest2['TotRmsAbvGrd']= test2['TotRmsAbvGrd'].clip(upper=test2['TotRmsAbvGrd'].quantile(0.99))",
      "rewrite-ns": 6650705,
      "overhead-ns": 6650705,
      "exec-ns": 35939821,
      "total-ns": 42590526,
      "patts-hit": {},
      "rewritten": "test2['OverallQual'] = test2['OverallQual'].clip(upper=test2['OverallQual']\n    .quantile(0.99))\ntest2['OverallQual'] = test2['OverallQual'].clip(lower=test2['OverallQual']\n    .quantile(0.01))\ntest2['YearBuilt'] = test2['YearBuilt'].clip(upper=test2['YearBuilt'].\n    quantile(0.99))\ntest2['YearBuilt'] = test2['YearBuilt'].clip(lower=test2['YearBuilt'].\n    quantile(0.01))\ntest2['MasVnrArea'] = test2['MasVnrArea'].clip(upper=test2['MasVnrArea'].\n    quantile(0.99))\ntest2['BsmtFinSF1'] = test2['BsmtFinSF1'].clip(upper=test2['BsmtFinSF1'].\n    quantile(0.99))\ntest2['TotalBsmtSF'] = test2['TotalBsmtSF'].clip(upper=test2['TotalBsmtSF']\n    .quantile(0.99))\ntest2['TotalBsmtSF'] = test2['TotalBsmtSF'].clip(upper=test2['TotalBsmtSF']\n    .quantile(0.99))\ntest2['TotRmsAbvGrd'] = test2['TotRmsAbvGrd'].clip(upper=test2[\n    'TotRmsAbvGrd'].quantile(0.99))\n"
    },
    {
      "raw": "finaltest = pd.concat([test2,test3],axis = 1)",
      "rewrite-ns": 612706,
      "overhead-ns": 612706,
      "exec-ns": 11239504,
      "total-ns": 11852210,
      "patts-hit": {},
      "rewritten": "finaltest = pd.concat([test2, test3], axis=1)\n"
    },
    {
      "raw": "finaltest1 = pd.get_dummies(finaltest)",
      "rewrite-ns": 436856,
      "overhead-ns": 436856,
      "exec-ns": 200375528,
      "total-ns": 200812384,
      "patts-hit": {},
      "rewritten": "finaltest1 = pd.get_dummies(finaltest)\n"
    },
    {
      "raw": "finaltest.columns",
      "rewrite-ns": 88189,
      "overhead-ns": 88189,
      "exec-ns": 829304,
      "total-ns": 917493,
      "patts-hit": {},
      "rewritten": "finaltest.columns\n"
    },
    {
      "raw": "final_data1.head()",
      "rewrite-ns": 112949,
      "overhead-ns": 112949,
      "exec-ns": 12188292,
      "total-ns": 12301241,
      "patts-hit": {},
      "rewritten": "final_data1.head()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run with input scaling\n# train1 =final_data1.sample(n = 730 ,random_state = 123)\ntrain1 =final_data1.sample(n = min(len(final_data) - 10, 730) ,random_state = 123)\ntrain2 = final_data1.drop(train1.index)",
      "rewrite-ns": 1155392,
      "overhead-ns": 1155392,
      "exec-ns": 16155455,
      "total-ns": 17310847,
      "patts-hit": {},
      "rewritten": "train1 = final_data1.sample(n=min(len(final_data) - 10, 730), random_state=123)\ntrain2 = final_data1.drop(train1.index)\n"
    },
    {
      "raw": "train1x = train1.drop(['intercept','SalePrice'], axis = 1)\ntrain1y = train1.SalePrice",
      "rewrite-ns": 787590,
      "overhead-ns": 787590,
      "exec-ns": 848228,
      "total-ns": 1635818,
      "patts-hit": {},
      "rewritten": "train1x = train1.drop(['intercept', 'SalePrice'], axis=1)\ntrain1y = train1.SalePrice\n"
    },
    {
      "raw": "train2x = train2.drop(['SalePrice','intercept'],axis = 1)\ntrain2y = train2.SalePrice",
      "rewrite-ns": 756660,
      "overhead-ns": 756660,
      "exec-ns": 4398236,
      "total-ns": 5154896,
      "patts-hit": {},
      "rewritten": "train2x = train2.drop(['SalePrice', 'intercept'], axis=1)\ntrain2y = train2.SalePrice\n"
    },
    {
      "raw": "best_train = pd.get_dummies(best_train)",
      "rewrite-ns": 387454,
      "overhead-ns": 387454,
      "exec-ns": 354151389,
      "total-ns": 354538843,
      "patts-hit": {},
      "rewritten": "best_train = pd.get_dummies(best_train)\n"
    },
    {
      "raw": "train_s1 = best_train.sample(n = min(len(final_data) - 10, 730) ,random_state = 123)\ntrain_s2 = best_train.drop(train_s1.index)                             ",
      "rewrite-ns": 1263307,
      "overhead-ns": 1263307,
      "exec-ns": 216442116,
      "total-ns": 217705423,
      "patts-hit": {},
      "rewritten": "train_s1 = best_train.sample(n=min(len(final_data) - 10, 730), random_state=123\n    )\ntrain_s2 = best_train.drop(train_s1.index)\n"
    },
    {
      "raw": "train_s1x = train_s1.drop(['SalePrice'], axis = 1)\ntrain_s1y = train_s1.SalePrice",
      "rewrite-ns": 773290,
      "overhead-ns": 773290,
      "exec-ns": 1065740,
      "total-ns": 1839030,
      "patts-hit": {},
      "rewritten": "train_s1x = train_s1.drop(['SalePrice'], axis=1)\ntrain_s1y = train_s1.SalePrice\n"
    },
    {
      "raw": "train_s2x = train_s2.drop(['SalePrice'],axis = 1)\ntrain_s2y = train_s2.SalePrice",
      "rewrite-ns": 729958,
      "overhead-ns": 729958,
      "exec-ns": 54680545,
      "total-ns": 55410503,
      "patts-hit": {},
      "rewritten": "train_s2x = train_s2.drop(['SalePrice'], axis=1)\ntrain_s2y = train_s2.SalePrice\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.linear_model import LinearRegression",
      "rewrite-ns": 20831,
      "overhead-ns": 20831,
      "exec-ns": 107895,
      "total-ns": 128726,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# X_train = train1x\n# Y_train = train1y",
      "rewrite-ns": 14401,
      "overhead-ns": 14401,
      "exec-ns": 79545,
      "total-ns": 93946,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# linreg = LinearRegression()\n# linreg.fit(X_train, Y_train)",
      "rewrite-ns": 12467,
      "overhead-ns": 12467,
      "exec-ns": 70958,
      "total-ns": 83425,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# X_train , X_test, Y_train, Y_test = train_test_split(\n#         train2x,\n#         train2y,\n#         test_size=0.20,\n#         random_state=123)",
      "rewrite-ns": 12178,
      "overhead-ns": 12178,
      "exec-ns": 63765,
      "total-ns": 75943,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# y_pred = linreg.predict(X_test)",
      "rewrite-ns": 11656,
      "overhead-ns": 11656,
      "exec-ns": 63693,
      "total-ns": 75349,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn import metrics",
      "rewrite-ns": 10897,
      "overhead-ns": 10897,
      "exec-ns": 60976,
      "total-ns": 71873,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# rmse = np.sqrt(metrics.mean_squared_error(Y_test, y_pred))\n# rmse",
      "rewrite-ns": 10966,
      "overhead-ns": 10966,
      "exec-ns": 61495,
      "total-ns": 72461,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# metrics.r2_score(Y_test, y_pred)",
      "rewrite-ns": 10647,
      "overhead-ns": 10647,
      "exec-ns": 58637,
      "total-ns": 69284,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn import metrics\n# from sklearn.tree import DecisionTreeRegressor\n# from sklearn.grid_search import GridSearchCV",
      "rewrite-ns": 10801,
      "overhead-ns": 10801,
      "exec-ns": 59010,
      "total-ns": 69811,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# X_train = train1x \n# Y_train = train1y",
      "rewrite-ns": 10618,
      "overhead-ns": 10618,
      "exec-ns": 57155,
      "total-ns": 67773,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# depth_list = list(range(1,20))\n# for depth in depth_list:\n#     dt_obj = DecisionTreeRegressor(max_depth=depth)\n#     dt_obj.fit(X_train, Y_train)\n#     print ('depth:', depth, 'R_squared:', metrics.r2_score(Y_test, dt_obj.predict(X_test)))",
      "rewrite-ns": 11169,
      "overhead-ns": 11169,
      "exec-ns": 56207,
      "total-ns": 67376,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# param_grid = {'max_depth': np.arange(3,20)}\n# tree = GridSearchCV(DecisionTreeRegressor(), param_grid, cv=10)\n# tree.fit(X_train, Y_train)",
      "rewrite-ns": 11660,
      "overhead-ns": 11660,
      "exec-ns": 56727,
      "total-ns": 68387,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# tree.best_params_",
      "rewrite-ns": 10892,
      "overhead-ns": 10892,
      "exec-ns": 56400,
      "total-ns": 67292,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# tree.best_score_",
      "rewrite-ns": 10170,
      "overhead-ns": 10170,
      "exec-ns": 56389,
      "total-ns": 66559,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "",
      "rewrite-ns": 9735,
      "overhead-ns": 9735,
      "exec-ns": 55932,
      "total-ns": 65667,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# tree_final = DecisionTreeRegressor(max_depth=8)\n# tree_final.fit(X_train, Y_train)",
      "rewrite-ns": 10386,
      "overhead-ns": 10386,
      "exec-ns": 55890,
      "total-ns": 66276,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# X_train, X_test, Y_train, Y_test = train_test_split(\n#         train2x,\n#         train2y,\n#         test_size=0.20,\n#         random_state=123)",
      "rewrite-ns": 10838,
      "overhead-ns": 10838,
      "exec-ns": 56799,
      "total-ns": 67637,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# tree_test_pred = pd.DataFrame({'actual': Y_test, 'predicted': tree_final.predict(X_test)})\ntree_test_pred = pd.DataFrame({'actual': train2y, 'predicted': train2y})",
      "rewrite-ns": 591921,
      "overhead-ns": 591921,
      "exec-ns": 1020150,
      "total-ns": 1612071,
      "patts-hit": {},
      "rewritten": "tree_test_pred = pd.DataFrame({'actual': train2y, 'predicted': train2y})\n"
    },
    {
      "raw": "tree_test_pred.sample(10)",
      "rewrite-ns": 119479,
      "overhead-ns": 119479,
      "exec-ns": 6038009,
      "total-ns": 6157488,
      "patts-hit": {},
      "rewritten": "tree_test_pred.sample(10)\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# metrics.r2_score(Y_test, tree_test_pred.predicted)\n_ = tree_test_pred.predicted",
      "rewrite-ns": 276591,
      "overhead-ns": 276591,
      "exec-ns": 286168,
      "total-ns": 562759,
      "patts-hit": {},
      "rewritten": "_ = tree_test_pred.predicted\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# rmse = np.sqrt(metrics.mean_squared_error(Y_test, tree_test_pred.predicted))\n# rmse\n_ = tree_test_pred.predicted",
      "rewrite-ns": 252609,
      "overhead-ns": 252609,
      "exec-ns": 209488,
      "total-ns": 462097,
      "patts-hit": {},
      "rewritten": "_ = tree_test_pred.predicted\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.ensemble import RandomForestRegressor",
      "rewrite-ns": 12022,
      "overhead-ns": 12022,
      "exec-ns": 64878,
      "total-ns": 76900,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# X_train = train1x\n# Y_train = train1y",
      "rewrite-ns": 11254,
      "overhead-ns": 11254,
      "exec-ns": 61711,
      "total-ns": 72965,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# depth_list = list(range(1,20))\n# for depth in depth_list:\n#     dt_obj = RandomForestRegressor(max_depth=depth)\n#     dt_obj.fit(X_train, Y_train)\n#     print ('depth:', depth, 'R_Squared:', metrics.r2_score(Y_test, dt_obj.predict(X_test)))",
      "rewrite-ns": 12542,
      "overhead-ns": 12542,
      "exec-ns": 61966,
      "total-ns": 74508,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# radm_clf = RandomForestRegressor(oob_score=True,n_estimators=100)\n# radm_clf.fit( X_train, Y_train )",
      "rewrite-ns": 11111,
      "overhead-ns": 11111,
      "exec-ns": 58222,
      "total-ns": 69333,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# X_train, X_test, Y_train, Y_test = train_test_split(\n#         train2x,\n#         train2y,\n#         test_size=0.20,\n#         random_state=123)",
      "rewrite-ns": 11462,
      "overhead-ns": 11462,
      "exec-ns": 57726,
      "total-ns": 69188,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# radm_test_pred = pd.DataFrame( { 'actual':  Y_test,\n#                             'predicted': radm_clf.predict( X_test ) } )\nradm_test_pred = pd.DataFrame( { 'actual':  train2y,\n                            'predicted': train2y } )",
      "rewrite-ns": 564822,
      "overhead-ns": 564822,
      "exec-ns": 824662,
      "total-ns": 1389484,
      "patts-hit": {},
      "rewritten": "radm_test_pred = pd.DataFrame({'actual': train2y, 'predicted': train2y})\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# metrics.r2_score( radm_test_pred.actual, radm_test_pred.predicted )\n_ = radm_test_pred.actual\n_ = radm_test_pred.predicted",
      "rewrite-ns": 440980,
      "overhead-ns": 440980,
      "exec-ns": 337329,
      "total-ns": 778309,
      "patts-hit": {},
      "rewritten": "_ = radm_test_pred.actual\n_ = radm_test_pred.predicted\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# rmse = np.sqrt(metrics.mean_squared_error(radm_test_pred.actual, radm_test_pred.predicted))\n# rmse\n_ = radm_test_pred.actual\n_ = radm_test_pred.predicted",
      "rewrite-ns": 446203,
      "overhead-ns": 446203,
      "exec-ns": 245026,
      "total-ns": 691229,
      "patts-hit": {},
      "rewritten": "_ = radm_test_pred.actual\n_ = radm_test_pred.predicted\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.ensemble import BaggingRegressor",
      "rewrite-ns": 12686,
      "overhead-ns": 12686,
      "exec-ns": 67001,
      "total-ns": 79687,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code, plotting\n# from sklearn import metrics\n# import matplotlib.pyplot as plt \n# import seaborn as sns",
      "rewrite-ns": 12620,
      "overhead-ns": 12620,
      "exec-ns": 61621,
      "total-ns": 74241,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# param_bag = {'n_estimators': list(range(100, 801, 100)),\n#              }",
      "rewrite-ns": 11051,
      "overhead-ns": 11051,
      "exec-ns": 58495,
      "total-ns": 69546,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.grid_search import GridSearchCV\n# bag_cl = GridSearchCV(estimator=BaggingRegressor(),\n#                   param_grid=param_bag,\n#                   cv=5,\n#                   verbose=True, n_jobs=-1)",
      "rewrite-ns": 12170,
      "overhead-ns": 12170,
      "exec-ns": 59570,
      "total-ns": 71740,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# bag_cl.get_params()",
      "rewrite-ns": 10551,
      "overhead-ns": 10551,
      "exec-ns": 58270,
      "total-ns": 68821,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# X_train = train1x\n# Y_train = train1y",
      "rewrite-ns": 10461,
      "overhead-ns": 10461,
      "exec-ns": 58727,
      "total-ns": 69188,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# bag_cl.fit(X_train, Y_train)",
      "rewrite-ns": 10619,
      "overhead-ns": 10619,
      "exec-ns": 58872,
      "total-ns": 69491,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# bag_cl.best_params_",
      "rewrite-ns": 11041,
      "overhead-ns": 11041,
      "exec-ns": 57419,
      "total-ns": 68460,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# bagclm = BaggingRegressor(oob_score=True, n_estimators=600)\n# bagclm.fit(X_train, Y_train)",
      "rewrite-ns": 10843,
      "overhead-ns": 10843,
      "exec-ns": 57484,
      "total-ns": 68327,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# X_train, X_test, Y_train, Y_test = train_test_split(\n#         train2x,\n#         train2y,\n#         test_size=0.20,\n#         random_state=123)",
      "rewrite-ns": 11122,
      "overhead-ns": 11122,
      "exec-ns": 57393,
      "total-ns": 68515,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# y_pred = pd.DataFrame( { 'actual':  Y_test,\n#                             'predicted': bagclm.predict( X_test) } )\ny_pred = pd.DataFrame( { 'actual':  train2y,\n                            'predicted': train2y } )",
      "rewrite-ns": 573897,
      "overhead-ns": 573897,
      "exec-ns": 910526,
      "total-ns": 1484423,
      "patts-hit": {},
      "rewritten": "y_pred = pd.DataFrame({'actual': train2y, 'predicted': train2y})\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# bagclm.estimators_features_",
      "rewrite-ns": 12733,
      "overhead-ns": 12733,
      "exec-ns": 68421,
      "total-ns": 81154,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# metrics.r2_score(y_pred.actual, y_pred.predicted)\n_ = y_pred.actual, y_pred.predicted",
      "rewrite-ns": 430522,
      "overhead-ns": 430522,
      "exec-ns": 356847,
      "total-ns": 787369,
      "patts-hit": {},
      "rewritten": "_ = y_pred.actual, y_pred.predicted\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# rmse = np.sqrt(metrics.mean_squared_error(Y_test, y_pred.predicted))\n# rmse\n_ = y_pred.predicted",
      "rewrite-ns": 259729,
      "overhead-ns": 259729,
      "exec-ns": 216390,
      "total-ns": 476119,
      "patts-hit": {},
      "rewritten": "_ = y_pred.predicted\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.ensemble import AdaBoostRegressor, GradientBoostingRegressor",
      "rewrite-ns": 12602,
      "overhead-ns": 12602,
      "exec-ns": 63320,
      "total-ns": 75922,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# [10**x for x in range(-3, 3)]",
      "rewrite-ns": 11137,
      "overhead-ns": 11137,
      "exec-ns": 60530,
      "total-ns": 71667,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# paragrid_ada = {'n_estimators': [100, 200, 400, 600, 800],\n#                'learning_rate': [10**x for x in range(-3, 3)]}",
      "rewrite-ns": 11176,
      "overhead-ns": 11176,
      "exec-ns": 58745,
      "total-ns": 69921,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.grid_search import GridSearchCV\n# ada = GridSearchCV(estimator=AdaBoostRegressor(),\n#                   param_grid=paragrid_ada,\n#                   cv=5,\n#                   verbose=True, n_jobs=-1)",
      "rewrite-ns": 11639,
      "overhead-ns": 11639,
      "exec-ns": 58821,
      "total-ns": 70460,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# X_train = train1x\n# Y_train = train1y",
      "rewrite-ns": 10816,
      "overhead-ns": 10816,
      "exec-ns": 57199,
      "total-ns": 68015,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# ada.fit(X_train, Y_train)",
      "rewrite-ns": 10045,
      "overhead-ns": 10045,
      "exec-ns": 55772,
      "total-ns": 65817,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# ada.best_params_",
      "rewrite-ns": 9846,
      "overhead-ns": 9846,
      "exec-ns": 54900,
      "total-ns": 64746,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# ada_clf = AdaBoostRegressor(learning_rate=0.1, n_estimators=800)",
      "rewrite-ns": 10131,
      "overhead-ns": 10131,
      "exec-ns": 53910,
      "total-ns": 64041,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# ada_clf.fit(X_train, Y_train)",
      "rewrite-ns": 10096,
      "overhead-ns": 10096,
      "exec-ns": 53540,
      "total-ns": 63636,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# X_train, X_test, Y_train, Y_test = train_test_split(\n#         train2x,\n#         train2y,\n#         test_size=0.20,\n#         random_state=123)",
      "rewrite-ns": 10482,
      "overhead-ns": 10482,
      "exec-ns": 54007,
      "total-ns": 64489,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# ada_test_pred = pd.DataFrame({'actual': Y_test,\n#                             'predicted': ada_clf.predict(X_test)})\nada_test_pred = pd.DataFrame({'actual': train2y,\n                            'predicted': train2y})",
      "rewrite-ns": 680761,
      "overhead-ns": 680761,
      "exec-ns": 858185,
      "total-ns": 1538946,
      "patts-hit": {},
      "rewritten": "ada_test_pred = pd.DataFrame({'actual': train2y, 'predicted': train2y})\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# metrics.r2_score(ada_test_pred.actual, ada_test_pred.predicted)\n_ = ada_test_pred.actual\n_ = ada_test_pred.predicted",
      "rewrite-ns": 442097,
      "overhead-ns": 442097,
      "exec-ns": 345482,
      "total-ns": 787579,
      "patts-hit": {},
      "rewritten": "_ = ada_test_pred.actual\n_ = ada_test_pred.predicted\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# rmse = np.sqrt(metrics.mean_squared_error(Y_test, y_pred.predicted))\n# rmse\n_ = y_pred.predicted",
      "rewrite-ns": 254666,
      "overhead-ns": 254666,
      "exec-ns": 215866,
      "total-ns": 470532,
      "patts-hit": {},
      "rewritten": "_ = y_pred.predicted\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# param_test1 = {'n_estimators': [100, 200, 400, 600, 800],\n#               'max_depth': list(range(1,10))}\n# gsearch1 = GridSearchCV(estimator = GradientBoostingRegressor(learning_rate=0.1, min_samples_split=500, min_samples_leaf=50,\n#                                                                max_features='sqrt',subsample=0.8, random_state=10), \n#                         param_grid = param_test1, scoring='r2',n_jobs=4,iid=False, cv=5)",
      "rewrite-ns": 15314,
      "overhead-ns": 15314,
      "exec-ns": 65745,
      "total-ns": 81059,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# X_train = train1x\n# Y_train = train1y",
      "rewrite-ns": 11437,
      "overhead-ns": 11437,
      "exec-ns": 59922,
      "total-ns": 71359,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# gsearch1.fit(X_train, Y_train)",
      "rewrite-ns": 10715,
      "overhead-ns": 10715,
      "exec-ns": 58878,
      "total-ns": 69593,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# gsearch1.best_params_",
      "rewrite-ns": 10586,
      "overhead-ns": 10586,
      "exec-ns": 58591,
      "total-ns": 69177,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# gbm = GradientBoostingRegressor(learning_rate=0.1, min_samples_split=500, min_samples_leaf=50,max_depth=1, n_estimators=200,\n#                                                                max_features='sqrt',subsample=0.8, random_state=10)",
      "rewrite-ns": 12540,
      "overhead-ns": 12540,
      "exec-ns": 58631,
      "total-ns": 71171,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# gbm.fit(X_train, Y_train)",
      "rewrite-ns": 10675,
      "overhead-ns": 10675,
      "exec-ns": 60954,
      "total-ns": 71629,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# X_train, X_test, Y_train, Y_test = train_test_split(\n#         train2x,\n#         train2y,\n#         test_size=0.20,\n#         random_state=123)",
      "rewrite-ns": 11222,
      "overhead-ns": 11222,
      "exec-ns": 54857,
      "total-ns": 66079,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# gbm_test_pred = pd.DataFrame({'actual': Y_test,\n#                             'predicted': gbm.predict(X_test)})\ngbm_test_pred = pd.DataFrame({'actual': train2y,\n                            'predicted': train2y})",
      "rewrite-ns": 551596,
      "overhead-ns": 551596,
      "exec-ns": 859223,
      "total-ns": 1410819,
      "patts-hit": {},
      "rewritten": "gbm_test_pred = pd.DataFrame({'actual': train2y, 'predicted': train2y})\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# metrics.r2_score(gbm_test_pred.actual, gbm_test_pred.predicted)\n_ = gbm_test_pred.actual\n_ = gbm_test_pred.predicted",
      "rewrite-ns": 435980,
      "overhead-ns": 435980,
      "exec-ns": 327561,
      "total-ns": 763541,
      "patts-hit": {},
      "rewritten": "_ = gbm_test_pred.actual\n_ = gbm_test_pred.predicted\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# rmse = np.sqrt(metrics.mean_squared_error(gbm_test_pred.actual, gbm_test_pred.predicted))\n# rmse\n_ = gbm_test_pred.actual\n_ = gbm_test_pred.predicted",
      "rewrite-ns": 444178,
      "overhead-ns": 444178,
      "exec-ns": 239898,
      "total-ns": 684076,
      "patts-hit": {},
      "rewritten": "_ = gbm_test_pred.actual\n_ = gbm_test_pred.predicted\n"
    },
    {
      "raw": "",
      "rewrite-ns": 11184,
      "overhead-ns": 11184,
      "exec-ns": 65952,
      "total-ns": 77136,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 10.809820804,
  "max-disk-in-mb": 0
}