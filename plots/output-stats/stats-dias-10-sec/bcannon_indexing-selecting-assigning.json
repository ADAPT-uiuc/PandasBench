{
  "max-mem-in-mb": 1332,
  "max-mem-in-mb2": 1989,
  "cells": [
    {
      "raw": "# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\n# FIRST-AUTHOR: remove plotting\n# import seaborn as sns\n\nreviews = pd.read_csv(\"./input/winemag-data-130k-v2.scaled.csv\", index_col=0)\n\n\ndef check_q1(ans):\n    expected = reviews.description\n    return ans.equals(expected)\n\n\ndef answer_q1():\n    print(\"\"\"reviews.description\"\"\")\n\n\ndef check_q2(ans):\n    expected = reviews.description[0]\n    return ans == expected\n\n\ndef answer_q2():\n    print(\"\"\"reviews.description[0]\"\"\")\n\n\ndef check_q3(ans):\n    expected = reviews.iloc[0]\n    return ans.equals(expected)\n\n\ndef answer_q3():\n    print(\"\"\"reviews.iloc[0]\"\"\")\n\n\ndef check_q4(ans):\n    expected = reviews.iloc[0:10, 1]\n    return ans.equals(expected)\n\n\ndef answer_q4():\n    print(\"\"\"reviews.iloc[0:10, 1]\"\"\")\n\n\ndef check_q5(ans):\n    expected = reviews.iloc[[1, 2, 3, 5, 8]]\n    return ans.equals(expected)\n\n\ndef answer_q5():\n    print(\"\"\"reviews.iloc[[1, 2, 3, 5, 8]]\"\"\")\n\n\ndef check_q6(ans):\n    expected = reviews.loc[[0, 1, 10, 100], ['country', 'province', 'region_1', 'region_2']]\n    return ans.equals(expected)\n\n\ndef answer_q6():\n    print(\"\"\"reviews.loc[[0, 1, 10, 100], ['country', 'province', 'region_1', 'region_2']]\"\"\")\n\n\ndef check_q7(ans):\n    expected = reviews.loc[0:100, ['country', 'variety']]\n    return ans.equals(expected)\n\n\ndef answer_q7():\n    print(\"\"\"reviews.loc[0:100, ['country', 'variety']]\"\"\")\n\n\ndef check_q8(ans):\n    expected = reviews.loc[reviews.country == 'Italy']\n    return ans.equals(expected)\n\n\ndef answer_q8():\n    print(\"\"\"reviews.loc[reviews.country == 'Italy']\"\"\")\n\n\ndef check_q9(ans):\n    expected = reviews.loc[reviews.region_2.notnull()]\n    return ans.head().equals(expected.head())\n\n\ndef answer_q9():\n    print(\"\"\"reviews.loc[reviews.region_2.notnull()]\"\"\")\n\n\ndef check_q10(ans):\n    expected = reviews.points\n# FIRST-AUTHOR: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q10():\n    print(\"\"\"reviews.points\"\"\")\n\n\ndef check_q11(ans):\n    expected = reviews.loc[:1000, 'points']\n# FIRST-AUTHOR: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q11():\n    print(\"\"\"reviews.loc[:1000, 'points']\"\"\")\n\n\ndef check_q12(ans):\n    expected = reviews.iloc[-1000:, 3]\n# FIRST-AUTHOR: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q12():\n    print(\"\"\"reviews.iloc[-1000:, 3]\"\"\")\n\n\ndef check_q13(ans):\n    expected = reviews[reviews.country == \"Italy\"].points\n# FIRST-AUTHOR: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q13():\n    print(\"\"\"reviews[reviews.country == \"Italy\"].points\"\"\")\n\n\ndef check_q14(ans):\n    expected = reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country\n# FIRST-AUTHOR: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q14():\n    print(\"\"\"reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country\"\"\")\n\nreviews = pd.read_csv(\"./input/winemag-data-130k-v2.scaled.csv\", index_col=0)\npd.set_option(\"display.max_rows\", 5)",
      "rewrite-ns": 23843525,
      "overhead-ns": 23843525,
      "exec-ns": 11927902274,
      "total-ns": 11951745799,
      "patts-hit": {},
      "rewritten": "exec(os.environ['IREWR_IMPORTS'])\nreviews = pd.read_csv('./input/winemag-data-130k-v2.scaled.csv', index_col=0)\ndef check_q1(ans):\n    expected = reviews.description\n    return ans.equals(expected)\ndef answer_q1():\n    print('reviews.description')\ndef check_q2(ans):\n    expected = reviews.description[0]\n    return ans == expected\ndef answer_q2():\n    print('reviews.description[0]')\ndef check_q3(ans):\n    expected = reviews.iloc[0]\n    return ans.equals(expected)\ndef answer_q3():\n    print('reviews.iloc[0]')\ndef check_q4(ans):\n    expected = reviews.iloc[0:10, 1]\n    return ans.equals(expected)\ndef answer_q4():\n    print('reviews.iloc[0:10, 1]')\ndef check_q5(ans):\n    expected = reviews.iloc[[1, 2, 3, 5, 8]]\n    return ans.equals(expected)\ndef answer_q5():\n    print('reviews.iloc[[1, 2, 3, 5, 8]]')\ndef check_q6(ans):\n    expected = reviews.loc[[0, 1, 10, 100], ['country', 'province',\n        'region_1', 'region_2']]\n    return ans.equals(expected)\ndef answer_q6():\n    print(\n        \"reviews.loc[[0, 1, 10, 100], ['country', 'province', 'region_1', 'region_2']]\"\n        )\ndef check_q7(ans):\n    expected = reviews.loc[0:100, ['country', 'variety']]\n    return ans.equals(expected)\ndef answer_q7():\n    print(\"reviews.loc[0:100, ['country', 'variety']]\")\ndef check_q8(ans):\n    expected = reviews.loc[reviews.country == 'Italy']\n    return ans.equals(expected)\ndef answer_q8():\n    print(\"reviews.loc[reviews.country == 'Italy']\")\ndef check_q9(ans):\n    expected = reviews.loc[reviews.region_2.notnull()]\n    return ans.head().equals(expected.head())\ndef answer_q9():\n    print('reviews.loc[reviews.region_2.notnull()]')\ndef check_q10(ans):\n    expected = reviews.points\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q10():\n    print('reviews.points')\ndef check_q11(ans):\n    expected = reviews.loc[:1000, 'points']\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q11():\n    print(\"reviews.loc[:1000, 'points']\")\ndef check_q12(ans):\n    expected = reviews.iloc[-1000:, 3]\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q12():\n    print('reviews.iloc[-1000:, 3]')\ndef check_q13(ans):\n    expected = reviews[reviews.country == 'Italy'].points\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q13():\n    print('reviews[reviews.country == \"Italy\"].points')\ndef check_q14(ans):\n    expected = reviews[reviews.country.isin(['Italy', 'France']) & (reviews\n        .points >= 90)].country\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q14():\n    print(\n        'reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country'\n        )\nreviews = pd.read_csv('./input/winemag-data-130k-v2.scaled.csv', index_col=0)\npd.set_option('display.max_rows', 5)\n"
    },
    {
      "raw": "reviews.head()",
      "rewrite-ns": 203651,
      "overhead-ns": 203651,
      "exec-ns": 11340459,
      "total-ns": 11544110,
      "patts-hit": {},
      "rewritten": "reviews.head()\n"
    },
    {
      "raw": "check_q1(pd.DataFrame())",
      "rewrite-ns": 408947,
      "overhead-ns": 408947,
      "exec-ns": 739612,
      "total-ns": 1148559,
      "patts-hit": {},
      "rewritten": "check_q1(pd.DataFrame())\n"
    },
    {
      "raw": "reviews.filter(items=[\"description\"])",
      "rewrite-ns": 445428,
      "overhead-ns": 445428,
      "exec-ns": 18781300,
      "total-ns": 19226728,
      "patts-hit": {},
      "rewritten": "reviews.filter(items=['description'])\n"
    },
    {
      "raw": "reviews.at[0,\"description\"]",
      "rewrite-ns": 456005,
      "overhead-ns": 456005,
      "exec-ns": 22319646,
      "total-ns": 22775651,
      "patts-hit": {},
      "rewritten": "reviews.at[0, 'description']\n"
    },
    {
      "raw": "reviews.loc[0]",
      "rewrite-ns": 316741,
      "overhead-ns": 316741,
      "exec-ns": 1298658,
      "total-ns": 1615399,
      "patts-hit": {},
      "rewritten": "reviews.loc[0]\n"
    },
    {
      "raw": "reviews.loc[0:9].filter(items=[\"description\"])",
      "rewrite-ns": 651341,
      "overhead-ns": 651341,
      "exec-ns": 12752270,
      "total-ns": 13403611,
      "patts-hit": {},
      "rewritten": "reviews.loc[0:9].filter(items=['description'])\n"
    },
    {
      "raw": "reviews.loc[[1,2,3,5,8]]",
      "rewrite-ns": 525903,
      "overhead-ns": 525903,
      "exec-ns": 8494482,
      "total-ns": 9020385,
      "patts-hit": {},
      "rewritten": "reviews.loc[[1, 2, 3, 5, 8]]\n"
    },
    {
      "raw": "reviews.loc[[0,1,10,100]].filter([\"country\",\"province\",\"region_1\",\"region_2\"])",
      "rewrite-ns": 826164,
      "overhead-ns": 826164,
      "exec-ns": 3940373,
      "total-ns": 4766537,
      "patts-hit": {},
      "rewritten": "reviews.loc[[0, 1, 10, 100]].filter(['country', 'province', 'region_1',\n    'region_2'])\n"
    },
    {
      "raw": "reviews.loc[0:99].filter([\"country\",\"variety\"])",
      "rewrite-ns": 631044,
      "overhead-ns": 631044,
      "exec-ns": 3709520,
      "total-ns": 4340564,
      "patts-hit": {},
      "rewritten": "reviews.loc[0:99].filter(['country', 'variety'])\n"
    },
    {
      "raw": "reviews.loc[reviews.country == 'Italy']",
      "rewrite-ns": 487920,
      "overhead-ns": 487920,
      "exec-ns": 82650122,
      "total-ns": 83138042,
      "patts-hit": {},
      "rewritten": "reviews.loc[reviews.country == 'Italy']\n"
    },
    {
      "raw": "reviews.loc[reviews.region_2 != 'NaN']",
      "rewrite-ns": 506490,
      "overhead-ns": 506490,
      "exec-ns": 155669395,
      "total-ns": 156175885,
      "patts-hit": {},
      "rewritten": "reviews.loc[reviews.region_2 != 'NaN']\n"
    },
    {
      "raw": "reviews.filter(items=[\"points\"])",
      "rewrite-ns": 457260,
      "overhead-ns": 457260,
      "exec-ns": 5078460,
      "total-ns": 5535720,
      "patts-hit": {},
      "rewritten": "reviews.filter(items=['points'])\n"
    },
    {
      "raw": "reviews.points.loc[0:999]",
      "rewrite-ns": 447613,
      "overhead-ns": 447613,
      "exec-ns": 7304393,
      "total-ns": 7752006,
      "patts-hit": {},
      "rewritten": "reviews.points.loc[0:999]\n"
    },
    {
      "raw": "reviews.points.loc[reviews.shape[0]-1000:reviews.shape[0]]",
      "rewrite-ns": 848195,
      "overhead-ns": 848195,
      "exec-ns": 36819549,
      "total-ns": 37667744,
      "patts-hit": {},
      "rewritten": "reviews.points.loc[reviews.shape[0] - 1000:reviews.shape[0]]\n"
    },
    {
      "raw": "reviews.points.loc[reviews.country == 'Italy']",
      "rewrite-ns": 567899,
      "overhead-ns": 567899,
      "exec-ns": 52590764,
      "total-ns": 53158663,
      "patts-hit": {},
      "rewritten": "reviews.points.loc[reviews.country == 'Italy']\n"
    },
    {
      "raw": "reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country",
      "rewrite-ns": 954839,
      "overhead-ns": 954839,
      "exec-ns": 59353188,
      "total-ns": 60308027,
      "patts-hit": {},
      "rewritten": "reviews[reviews.country.isin(['Italy', 'France']) & (reviews.points >= 90)\n    ].country\n"
    }
  ],
  "total-time-in-sec": 12.44332343,
  "max-disk-in-mb": 0
}