{
  "max-mem-in-mb": 433,
  "max-mem-in-mb2": 585,
  "cells": [
    {
      "raw": "import os\n# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\n# FIRST-AUTHOR: remove plotting\n# import seaborn as sns\n# import matplotlib.pyplot as plt\nimport numpy as np\n# FIRST-AUTHOR: remove extra dependencies\n# from pydicom import read_file\n# from matplotlib.collections import PatchCollection\n# from matplotlib.patches import Rectangle, Circle\nfrom IPython.display import display\n# FIRST-AUTHOR: remove extra dependencies\n# import networkx as nx\ndef create_graph_from_df(in_df, ):\n# FIRST-AUTHOR: remove extra dependencies\n#     g = nx.Graph()\n    for _, c_row in in_df.iterrows():\n#         g.add_edge(c_row['annotator_x'], c_row['annotator_y'], \n#                    weight = c_row['iou'], \n#                    label = '{:2.0f}%'.format(100*c_row['iou']))\n        _ = c_row['annotator_x']\n        _ = c_row['annotator_y'], \n        _ = c_row['iou'], \n        _ = 100*c_row['iou']\n# FIRST-AUTHOR: remove extra dependencies\n#     return g\n# def show_graph(g, figsize = (20, 20)):\n#     fig, ax1 = plt.subplots(1, 1, figsize = figsize)\n#     ax1.axis('off')\n#     edge_labels = nx.get_edge_attributes(g,'label')\n#     n_pos = nx.spring_layout(g)\n#     nx.draw_networkx(g, \n#                      pos=n_pos, \n#                      ax = ax1);\n#     nx.draw_networkx_edge_labels(g, \n#                      pos=n_pos, \n#                      edge_labels = edge_labels,\n#                      ax = ax1);\n#     return fig\nbase_csv_dir = './input/'\nbase_dcm_dir = './input/'",
      "rewrite-ns": 3373823,
      "overhead-ns": 3373823,
      "exec-ns": 971570,
      "total-ns": 4345393,
      "patts-hit": {},
      "rewritten": "import os\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\nfrom IPython.display import display\ndef create_graph_from_df(in_df):\n    for _, c_row in in_df.iterrows():\n        _ = c_row['annotator_x']\n        _ = c_row['annotator_y'],\n        _ = c_row['iou'],\n        _ = 100 * c_row['iou']\nbase_csv_dir = './input/'\nbase_dcm_dir = './input/'\n"
    },
    {
      "raw": "annot_df = pd.read_csv(os.path.join(base_csv_dir, 'matching_results.scaled.csv'), index_col = 0)\n# remove duplicates\nsingle_annot_df = annot_df[annot_df['annotator_x']<annot_df['annotator_y']].copy()\nprint(single_annot_df.shape[0], annot_df.shape[0])\nannot_df.sample(3)",
      "rewrite-ns": 2641786,
      "overhead-ns": 2641786,
      "exec-ns": 1424983884,
      "total-ns": 1427625670,
      "patts-hit": {},
      "rewritten": "annot_df = pd.read_csv(os.path.join(base_csv_dir,\n    'matching_results.scaled.csv'), index_col=0)\nsingle_annot_df = annot_df[annot_df['annotator_x'] < annot_df['annotator_y']\n    ].copy()\nprint(single_annot_df.shape[0], annot_df.shape[0])\nannot_df.sample(3)\n"
    },
    {
      "raw": "grp_df = single_annot_df.groupby(['anatomy', 'seriesUID'])\nfor _, (c_group, c_df) in zip(range(1), grp_df):\n    # get the first group\n    print(c_group)\n    display(c_df)\n    pass",
      "rewrite-ns": 1565887,
      "overhead-ns": 1565887,
      "exec-ns": 147995005,
      "total-ns": 149560892,
      "patts-hit": {},
      "rewritten": "grp_df = single_annot_df.groupby(['anatomy', 'seriesUID'])\nfor _, (c_group, c_df) in zip(range(1), grp_df):\n    print(c_group)\n    display(c_df)\n    pass\n"
    },
    {
      "raw": "g = create_graph_from_df(c_df)\n# FIRST-AUTHOR: remove extra dependencies\n# show_graph(g);",
      "rewrite-ns": 354981,
      "overhead-ns": 354981,
      "exec-ns": 108041783,
      "total-ns": 108396764,
      "patts-hit": {},
      "rewritten": "g = create_graph_from_df(c_df)\n"
    },
    {
      "raw": "g = create_graph_from_df(single_annot_df.query('anatomy == \"Liver\"'))\n# FIRST-AUTHOR: remove extra dependencies\n# show_graph(g, figsize = (40, 40));",
      "rewrite-ns": 495079,
      "overhead-ns": 495079,
      "exec-ns": 3216544526,
      "total-ns": 3217039605,
      "patts-hit": {},
      "rewritten": "g = create_graph_from_df(single_annot_df.query('anatomy == \"Liver\"'))\n"
    },
    {
      "raw": "g = create_graph_from_df(single_annot_df.query('anatomy == \"Ovarian\"'))\n# FIRST-AUTHOR: remove extra dependencies\n# show_graph(g, figsize = (40, 40));",
      "rewrite-ns": 501612,
      "overhead-ns": 501612,
      "exec-ns": 3533070849,
      "total-ns": 3533572461,
      "patts-hit": {},
      "rewritten": "g = create_graph_from_df(single_annot_df.query('anatomy == \"Ovarian\"'))\n"
    },
    {
      "raw": "avg_annot_df = single_annot_df.groupby(['annotator_x', 'annotator_y']).agg({'iou': 'mean', 'seriesUID': 'count'}).reset_index()\navg_annot_df.sample(2)",
      "rewrite-ns": 980073,
      "overhead-ns": 980073,
      "exec-ns": 98803661,
      "total-ns": 99783734,
      "patts-hit": {},
      "rewritten": "avg_annot_df = single_annot_df.groupby(['annotator_x', 'annotator_y']).agg({\n    'iou': 'mean', 'seriesUID': 'count'}).reset_index()\navg_annot_df.sample(2)\n"
    },
    {
      "raw": "g = create_graph_from_df(avg_annot_df)\n# FIRST-AUTHOR: remove extra dependencies\n# show_graph(g, figsize = (40, 40));",
      "rewrite-ns": 340391,
      "overhead-ns": 340391,
      "exec-ns": 37589014,
      "total-ns": 37929405,
      "patts-hit": {},
      "rewritten": "g = create_graph_from_df(avg_annot_df)\n"
    },
    {
      "raw": "worst_annot_df = annot_df.groupby('annotator_x').agg({'iou': 'max', 'seriesUID': 'count'}).reset_index().sort_values('iou').query('iou<1e-3')\nworst_annot = worst_annot_df['annotator_x'].values\nprint(worst_annot.shape[0])\nworst_annot_df",
      "rewrite-ns": 1707377,
      "overhead-ns": 1707377,
      "exec-ns": 114236952,
      "total-ns": 115944329,
      "patts-hit": {},
      "rewritten": "worst_annot_df = annot_df.groupby('annotator_x').agg({'iou': 'max',\n    'seriesUID': 'count'}).reset_index().sort_values('iou').query('iou<1e-3')\nworst_annot = worst_annot_df['annotator_x'].values\nprint(worst_annot.shape[0])\nworst_annot_df\n"
    },
    {
      "raw": "clean_annot_df = single_annot_df[~(single_annot_df['annotator_x'].isin(worst_annot) | (single_annot_df['annotator_x'].isin(worst_annot)))]\nclean_full_annot_df = annot_df[~(annot_df['annotator_x'].isin(worst_annot) | (annot_df['annotator_x'].isin(worst_annot)))]\nprint(single_annot_df.shape[0], '->', clean_annot_df.shape[0])",
      "rewrite-ns": 1327394,
      "overhead-ns": 1327394,
      "exec-ns": 162607400,
      "total-ns": 163934794,
      "patts-hit": {
        "FuseIsIn": 1
      },
      "rewritten": "clean_annot_df = single_annot_df[~dias.rewriter.fuse_isin(df=\n    single_annot_df, col_name='annotator_x', s1=worst_annot, s2=worst_annot)]\nclean_full_annot_df = annot_df[~dias.rewriter.fuse_isin(df=annot_df,\n    col_name='annotator_x', s1=worst_annot, s2=worst_annot)]\nprint(single_annot_df.shape[0], '->', clean_annot_df.shape[0])\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# clean_full_annot_df.groupby(\n#     ['anatomy', 'seriesUID']).agg(\n#     {'iou': 'mean', 'annotator_x': 'count'}).reset_index().sort_values(\n#     'annotator_x', ascending = False)['annotator_x'].hist()\nclean_full_annot_df.groupby(\n    ['anatomy', 'seriesUID']).agg(\n    {'iou': 'mean', 'annotator_x': 'count'}).reset_index().sort_values(\n    'annotator_x', ascending = False)['annotator_x']",
      "rewrite-ns": 1183058,
      "overhead-ns": 1183058,
      "exec-ns": 245384653,
      "total-ns": 246567711,
      "patts-hit": {},
      "rewritten": "clean_full_annot_df.groupby(['anatomy', 'seriesUID']).agg({'iou': 'mean',\n    'annotator_x': 'count'}).reset_index().sort_values('annotator_x',\n    ascending=False)['annotator_x']\n"
    },
    {
      "raw": "filt_annot = lambda cut_off: clean_full_annot_df.query('iou>{}'.format(cut_off)).groupby(['anatomy', 'seriesUID']).agg({'iou': 'mean', 'annotator_x': 'count'}).reset_index().sort_values('annotator_x', ascending = False)\ncut_off = np.linspace(15, 100, 10, dtype = int)[:-1]\nout_df_list = []\nfor n_cut_off in cut_off:\n    c_df = filt_annot(n_cut_off/100.0)\n    c_df['cutoff'] = n_cut_off\n    out_df_list += [c_df]\nout_df = pd.concat(out_df_list)",
      "rewrite-ns": 3392804,
      "overhead-ns": 3392804,
      "exec-ns": 644547819,
      "total-ns": 647940623,
      "patts-hit": {},
      "rewritten": "filt_annot = lambda cut_off: clean_full_annot_df.query('iou>{}'.format(cut_off)\n    ).groupby(['anatomy', 'seriesUID']).agg({'iou': 'mean', 'annotator_x':\n    'count'}).reset_index().sort_values('annotator_x', ascending=False)\ncut_off = np.linspace(15, 100, 10, dtype=int)[:-1]\nout_df_list = []\nfor n_cut_off in cut_off:\n    c_df = filt_annot(n_cut_off / 100.0)\n    c_df['cutoff'] = n_cut_off\n    out_df_list += [c_df]\nout_df = pd.concat(out_df_list)\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# import seaborn as sns\n# sns.factorplot(x = 'cutoff', \n#                y = 'annotator_x', \n#                hue = 'anatomy', \n#                data = out_df,\n#                kind = 'swarm',\n#               size = 6)",
      "rewrite-ns": 18464,
      "overhead-ns": 18464,
      "exec-ns": 104064,
      "total-ns": 122528,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.factorplot(x = 'cutoff', \n#                y = 'annotator_x', \n#                hue = 'anatomy', \n#                data = out_df,\n#                kind = 'violin',\n#                col = 'anatomy',\n#                col_wrap = 2,\n#               size = 8)",
      "rewrite-ns": 14442,
      "overhead-ns": 14442,
      "exec-ns": 75584,
      "total-ns": 90026,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "all_df_out = []\nfor annot_per_case in range(2, 10):\n    c_df = out_df.query('annotator_x>={}'.format(annot_per_case)).groupby(['cutoff','anatomy']).apply(lambda c_rows: pd.Series({'total_annotations': np.sum(c_rows['annotator_x']),\n                                                                     'total_cases': np.unique(c_rows['seriesUID']).shape[0]\n                                                                                   })).reset_index()\n    c_df['annot_per_case_cutoff'] = annot_per_case\n    all_df_out += [c_df]\nall_df = pd.concat(all_df_out)",
      "rewrite-ns": 3128445,
      "overhead-ns": 3128445,
      "exec-ns": 93417714,
      "total-ns": 96546159,
      "patts-hit": {},
      "rewritten": "all_df_out = []\nfor annot_per_case in range(2, 10):\n    c_df = out_df.query('annotator_x>={}'.format(annot_per_case)).groupby([\n        'cutoff', 'anatomy']).apply(lambda c_rows: pd.Series({\n        'total_annotations': np.sum(c_rows['annotator_x']), 'total_cases':\n        np.unique(c_rows['seriesUID']).shape[0]})).reset_index()\n    c_df['annot_per_case_cutoff'] = annot_per_case\n    all_df_out += [c_df]\nall_df = pd.concat(all_df_out)\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.factorplot(x = 'annot_per_case_cutoff', \n#                y = 'total_cases', \n#                hue = 'cutoff', \n#                data = all_df,\n#                col = 'anatomy',\n#                col_wrap = 2,\n#                sharey = False,\n#               size = 8)",
      "rewrite-ns": 14371,
      "overhead-ns": 14371,
      "exec-ns": 70330,
      "total-ns": 84701,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.factorplot(x = 'annot_per_case_cutoff', \n#                y = 'total_cases', \n#                hue = 'anatomy', \n#                data = all_df,\n#                col = 'cutoff',\n#                col_wrap = 3,\n#                sharey = False,\n#               size = 8)",
      "rewrite-ns": 13082,
      "overhead-ns": 13082,
      "exec-ns": 63316,
      "total-ns": 76398,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "total_annotation_count = {k['anatomy']: (k['count'], k['cases'])\n                                         for k in pd.read_csv('./input/CrowdsCureCancer2017Annotations.scaled.csv').groupby(\n    'anatomy').apply(lambda x: pd.Series(\n    {'count': x.shape[0], 'cases': np.unique(x['seriesUID']).shape[0]})).reset_index().T.to_dict().values()}\ntotal_annotation_count",
      "rewrite-ns": 2515599,
      "overhead-ns": 2515599,
      "exec-ns": 1078275511,
      "total-ns": 1080791110,
      "patts-hit": {},
      "rewritten": "total_annotation_count = {k['anatomy']: (k['count'], k['cases']) for k in\n    pd.read_csv('./input/CrowdsCureCancer2017Annotations.scaled.csv').\n    groupby('anatomy').apply(lambda x: pd.Series({'count': x.shape[0],\n    'cases': np.unique(x['seriesUID']).shape[0]})).reset_index().T.to_dict(\n    ).values()}\ntotal_annotation_count\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# fig, m_axs = plt.subplots(2, 2, figsize = (20, 20))\n# for (c_organ, c_df), ax1 in zip(all_df.groupby('anatomy'), m_axs.flatten()):\nfor c_organ, c_df in all_df.groupby('anatomy'):\n    X, x_vals = c_df['annot_per_case_cutoff'].factorize()\n    Y, y_vals = c_df['cutoff'].factorize()\n    c_mat = np.zeros((X.max()+1, Y.max()+1), dtype = 'int')\n    c_mat[X, Y] = c_df['total_cases'].values.astype(int)\n# FIRST-AUTHOR: remove plotting\n#     ax1 = sns.heatmap(c_mat.T, annot = True, fmt = 'd', ax = ax1)\n#     ax1.set_xticklabels(x_vals)\n#     ax1.set_yticklabels(y_vals)\n#     ax1.set_xlabel('Annotations Per Case')\n#     ax1.set_ylabel('Minimum Agreement (DICE %)')\n#     ax1.set_title('{0}: Patients: {2}, Annotations: {1}'.format(c_organ, *total_annotation_count[c_organ]))\n    _ = c_mat.T\n    _ = total_annotation_count[c_organ]",
      "rewrite-ns": 3217905,
      "overhead-ns": 3217905,
      "exec-ns": 2145280,
      "total-ns": 5363185,
      "patts-hit": {},
      "rewritten": "for c_organ, c_df in all_df.groupby('anatomy'):\n    X, x_vals = c_df['annot_per_case_cutoff'].factorize()\n    Y, y_vals = c_df['cutoff'].factorize()\n    c_mat = np.zeros((X.max() + 1, Y.max() + 1), dtype='int')\n    c_mat[X, Y] = c_df['total_cases'].values.astype(int)\n    _ = c_mat.T\n    _ = total_annotation_count[c_organ]\n"
    },
    {
      "raw": "",
      "rewrite-ns": 13587,
      "overhead-ns": 13587,
      "exec-ns": 91496,
      "total-ns": 105083,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 10.935820571,
  "max-disk-in-mb": 0
}