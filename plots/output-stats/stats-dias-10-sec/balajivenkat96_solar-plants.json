{
  "max-mem-in-mb": 126,
  "max-mem-in-mb2": 133,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n# FIRST-AUTHOR: remove plotting\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# FIRST-AUTHOR: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('./input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session",
      "rewrite-ns": 695270,
      "overhead-ns": 695270,
      "exec-ns": 417239,
      "total-ns": 1112509,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\n"
    },
    {
      "raw": "mydateparser = lambda x: pd.datetime.strptime(x, \"%d-%m-%Y %H:%M\")\n",
      "rewrite-ns": 798470,
      "overhead-ns": 798470,
      "exec-ns": 397015,
      "total-ns": 1195485,
      "patts-hit": {},
      "rewritten": "mydateparser = lambda x: pd.datetime.strptime(x, '%d-%m-%Y %H:%M')\n"
    },
    {
      "raw": "gen_data = pd.read_csv(\"./input/Plant_1_Generation_Data.scaled.csv\",index_col = \"DATE_TIME\",parse_dates = [\"DATE_TIME\"] , date_parser = mydateparser)",
      "rewrite-ns": 904164,
      "overhead-ns": 904164,
      "exec-ns": 345261493,
      "total-ns": 346165657,
      "patts-hit": {},
      "rewritten": "gen_data = pd.read_csv('./input/Plant_1_Generation_Data.scaled.csv',\n    index_col='DATE_TIME', parse_dates=['DATE_TIME'], date_parser=mydateparser)\n"
    },
    {
      "raw": "gen_data.head()",
      "rewrite-ns": 128254,
      "overhead-ns": 128254,
      "exec-ns": 9759458,
      "total-ns": 9887712,
      "patts-hit": {},
      "rewritten": "gen_data.head()\n"
    },
    {
      "raw": "gen_data[\"Date\"] = pd.to_datetime(gen_data.index.map(lambda x : x.date()))\ngen_data[\"Time\"] = gen_data.index.map(lambda x : x.time())",
      "rewrite-ns": 2092772,
      "overhead-ns": 2092772,
      "exec-ns": 76539039,
      "total-ns": 78631811,
      "patts-hit": {},
      "rewritten": "gen_data['Date'] = pd.to_datetime(gen_data.index.map(lambda x: x.date()))\ngen_data['Time'] = gen_data.index.map(lambda x: x.time())\n"
    },
    {
      "raw": "gen_data.loc[(gen_data[\"DC_POWER\"] == 0) & (gen_data[\"AC_POWER\"] != 0)]",
      "rewrite-ns": 1124153,
      "overhead-ns": 1124153,
      "exec-ns": 3140377,
      "total-ns": 4264530,
      "patts-hit": {},
      "rewritten": "gen_data.loc[(gen_data['DC_POWER'] == 0) & (gen_data['AC_POWER'] != 0)]\n"
    },
    {
      "raw": "gen_data.loc[(gen_data[\"DC_POWER\"] != 0) & (gen_data[\"AC_POWER\"] == 0)]",
      "rewrite-ns": 1092012,
      "overhead-ns": 1092012,
      "exec-ns": 2128144,
      "total-ns": 3220156,
      "patts-hit": {},
      "rewritten": "gen_data.loc[(gen_data['DC_POWER'] != 0) & (gen_data['AC_POWER'] == 0)]\n"
    },
    {
      "raw": "[any(pd.isnull(gen_data[column])) for column in gen_data.columns]",
      "rewrite-ns": 1011132,
      "overhead-ns": 1011132,
      "exec-ns": 16805684,
      "total-ns": 17816816,
      "patts-hit": {},
      "rewritten": "[any(pd.isnull(gen_data[column])) for column in gen_data.columns]\n"
    },
    {
      "raw": "numeric_columns = [column for column in gen_data.columns if gen_data[column].dtype in ['int64','float64']]\nother_columns = [column for column in gen_data.columns if column not in numeric_columns]",
      "rewrite-ns": 1904785,
      "overhead-ns": 1904785,
      "exec-ns": 650490,
      "total-ns": 2555275,
      "patts-hit": {},
      "rewritten": "numeric_columns = [column for column in gen_data.columns if gen_data[column\n    ].dtype in ['int64', 'float64']]\nother_columns = [column for column in gen_data.columns if column not in\n    numeric_columns]\n"
    },
    {
      "raw": "[any(np.isnan(gen_data[column])) for column in numeric_columns]",
      "rewrite-ns": 914886,
      "overhead-ns": 914886,
      "exec-ns": 9727030,
      "total-ns": 10641916,
      "patts-hit": {},
      "rewritten": "[any(np.isnan(gen_data[column])) for column in numeric_columns]\n"
    },
    {
      "raw": "gen_data[\"Date\"].head()",
      "rewrite-ns": 514227,
      "overhead-ns": 514227,
      "exec-ns": 1151825,
      "total-ns": 1666052,
      "patts-hit": {},
      "rewritten": "gen_data['Date'].head()\n"
    },
    {
      "raw": "gen_data.columns",
      "rewrite-ns": 65520,
      "overhead-ns": 65520,
      "exec-ns": 635407,
      "total-ns": 700927,
      "patts-hit": {},
      "rewritten": "gen_data.columns\n"
    },
    {
      "raw": "len(gen_data[\"SOURCE_KEY\"].unique())",
      "rewrite-ns": 196893,
      "overhead-ns": 196893,
      "exec-ns": 1501883,
      "total-ns": 1698776,
      "patts-hit": {
        "LenUnique": 1
      },
      "rewritten": "dias.rewriter.len_unique(series=gen_data['SOURCE_KEY'])\n"
    },
    {
      "raw": "inverters = gen_data[\"SOURCE_KEY\"].unique()",
      "rewrite-ns": 459506,
      "overhead-ns": 459506,
      "exec-ns": 1225614,
      "total-ns": 1685120,
      "patts-hit": {},
      "rewritten": "inverters = gen_data['SOURCE_KEY'].unique()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# fig = plt.figure(figsize = (25,16))\nfor i,inverter in enumerate(inverters,1):\n# FIRST-AUTHOR: remove plotting\n#     plt.subplot(6,4,i)\n#     plt.yscale(\"log\")\n#     gen_data.loc[(gen_data[\"Date\"] == \"2020-05-15\") &  (gen_data[\"SOURCE_KEY\"] == inverter),\"DC_POWER\"].plot(label = inverter + \" DC\")\n#     gen_data.loc[(gen_data[\"Date\"] == \"2020-05-15\") & (gen_data[\"SOURCE_KEY\"] == inverter),\"AC_POWER\"].plot(label = inverter + \" AC\")\n#     plt.legend()\n    gen_data.loc[(gen_data[\"Date\"] == \"2020-05-15\") &  (gen_data[\"SOURCE_KEY\"] == inverter),\"DC_POWER\"]\n    gen_data.loc[(gen_data[\"Date\"] == \"2020-05-15\") & (gen_data[\"SOURCE_KEY\"] == inverter),\"AC_POWER\"]",
      "rewrite-ns": 2221785,
      "overhead-ns": 2221785,
      "exec-ns": 65584944,
      "total-ns": 67806729,
      "patts-hit": {},
      "rewritten": "for i, inverter in enumerate(inverters, 1):\n    gen_data.loc[(gen_data['Date'] == '2020-05-15') & (gen_data[\n        'SOURCE_KEY'] == inverter), 'DC_POWER']\n    gen_data.loc[(gen_data['Date'] == '2020-05-15') & (gen_data[\n        'SOURCE_KEY'] == inverter), 'AC_POWER']\n"
    },
    {
      "raw": "gen_data.groupby(\"SOURCE_KEY\").count()",
      "rewrite-ns": 414718,
      "overhead-ns": 414718,
      "exec-ns": 10046274,
      "total-ns": 10460992,
      "patts-hit": {},
      "rewritten": "gen_data.groupby('SOURCE_KEY').count()\n"
    },
    {
      "raw": "34 * 24 * 4 #Number of data points required",
      "rewrite-ns": 336034,
      "overhead-ns": 336034,
      "exec-ns": 406381,
      "total-ns": 742415,
      "patts-hit": {},
      "rewritten": "34 * 24 * 4\n"
    },
    {
      "raw": "gen_data[\"Date\"].unique()",
      "rewrite-ns": 108121,
      "overhead-ns": 108121,
      "exec-ns": 920306,
      "total-ns": 1028427,
      "patts-hit": {},
      "rewritten": "gen_data['Date'].unique()\n"
    },
    {
      "raw": "gen_data.groupby(\"SOURCE_KEY\").sum()[\"DC_POWER\"]",
      "rewrite-ns": 483601,
      "overhead-ns": 483601,
      "exec-ns": 3618938,
      "total-ns": 4102539,
      "patts-hit": {},
      "rewritten": "gen_data.groupby('SOURCE_KEY').sum()['DC_POWER']\n"
    },
    {
      "raw": "#split the dataframes by inverter IDs first\nsplit_by_inverters = {}\nfor inverter in inverters:\n    split_by_inverters[inverter] = gen_data.loc[gen_data[\"SOURCE_KEY\"] == inverter]",
      "rewrite-ns": 945821,
      "overhead-ns": 945821,
      "exec-ns": 34415609,
      "total-ns": 35361430,
      "patts-hit": {},
      "rewritten": "split_by_inverters = {}\nfor inverter in inverters:\n    split_by_inverters[inverter] = gen_data.loc[gen_data['SOURCE_KEY'] ==\n        inverter]\n"
    },
    {
      "raw": "unique_dates = gen_data.index.map(lambda x : x.date()).unique()",
      "rewrite-ns": 712507,
      "overhead-ns": 712507,
      "exec-ns": 42485403,
      "total-ns": 43197910,
      "patts-hit": {},
      "rewritten": "unique_dates = gen_data.index.map(lambda x: x.date()).unique()\n"
    },
    {
      "raw": "temp = split_by_inverters['1BY6WEcLGh8j5v7']",
      "rewrite-ns": 313894,
      "overhead-ns": 313894,
      "exec-ns": 217060,
      "total-ns": 530954,
      "patts-hit": {},
      "rewritten": "temp = split_by_inverters['1BY6WEcLGh8j5v7']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# fig = plt.figure(figsize = (30,25))\ninverter_daily_power = {}\nfor i,(inverter,data) in enumerate(split_by_inverters.items(),1):\n# FIRST-AUTHOR: remove plotting\n#     plt.subplot(6,4,i)\n    inverter_daily_power[inverter] = data.groupby(\"Date\").sum()[\"DC_POWER\"]\n# FIRST-AUTHOR: remove plotting\n#     inverter_daily_power[inverter].plot(label = inverter)\n#     plt.legend()\n    inverter_daily_power[inverter]",
      "rewrite-ns": 1508693,
      "overhead-ns": 1508693,
      "exec-ns": 21126923,
      "total-ns": 22635616,
      "patts-hit": {},
      "rewritten": "inverter_daily_power = {}\nfor i, (inverter, data) in enumerate(split_by_inverters.items(), 1):\n    inverter_daily_power[inverter] = data.groupby('Date').sum()['DC_POWER']\n    inverter_daily_power[inverter]\n"
    },
    {
      "raw": "weather_data = pd.read_csv(\"./input/Plant_1_Weather_Sensor_Data.scaled.csv\",index_col = \"DATE_TIME\",parse_dates = True)",
      "rewrite-ns": 523727,
      "overhead-ns": 523727,
      "exec-ns": 3394876,
      "total-ns": 3918603,
      "patts-hit": {},
      "rewritten": "weather_data = pd.read_csv('./input/Plant_1_Weather_Sensor_Data.scaled.csv',\n    index_col='DATE_TIME', parse_dates=True)\n"
    },
    {
      "raw": "weather_data[\"Date\"] = pd.to_datetime(weather_data.index.map(lambda x : x.date()))\nweather_data[\"Time\"] = weather_data.index.map(lambda x : x.time())",
      "rewrite-ns": 1514223,
      "overhead-ns": 1514223,
      "exec-ns": 4233540,
      "total-ns": 5747763,
      "patts-hit": {},
      "rewritten": "weather_data['Date'] = pd.to_datetime(weather_data.index.map(lambda x: x.\n    date()))\nweather_data['Time'] = weather_data.index.map(lambda x: x.time())\n"
    },
    {
      "raw": "weather_data.head()",
      "rewrite-ns": 77257,
      "overhead-ns": 77257,
      "exec-ns": 5812733,
      "total-ns": 5889990,
      "patts-hit": {},
      "rewritten": "weather_data.head()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# fig = plt.figure(figsize = (18,4))\n# plt.subplot(131)\n# weather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"), \"IRRADIATION\"].plot(legend = True)\n# #plt.legend()\n# plt.subplot(132)\n# weather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"AMBIENT_TEMPERATURE\"].plot(legend = True)\n# plt.subplot(133)\n# weather_data.loc[(weather_data[\"Date\"] == \"2020-05-15 00:00:00\"),\"MODULE_TEMPERATURE\"].plot(legend = True)\nweather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"), \"IRRADIATION\"]\nweather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"AMBIENT_TEMPERATURE\"]\nweather_data.loc[(weather_data[\"Date\"] == \"2020-05-15 00:00:00\"),\"MODULE_TEMPERATURE\"]",
      "rewrite-ns": 1609930,
      "overhead-ns": 1609930,
      "exec-ns": 2028337,
      "total-ns": 3638267,
      "patts-hit": {},
      "rewritten": "weather_data.loc[weather_data['Date'] == '2020-05-15', 'IRRADIATION']\nweather_data.loc[weather_data['Date'] == '2020-05-15', 'AMBIENT_TEMPERATURE']\nweather_data.loc[weather_data['Date'] == '2020-05-15 00:00:00',\n    'MODULE_TEMPERATURE']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.scatterplot(x = weather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"AMBIENT_TEMPERATURE\"], y =weather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"MODULE_TEMPERATURE\"])\n_ = weather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"AMBIENT_TEMPERATURE\"]\n_ = weather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"MODULE_TEMPERATURE\"]",
      "rewrite-ns": 1225582,
      "overhead-ns": 1225582,
      "exec-ns": 808176,
      "total-ns": 2033758,
      "patts-hit": {},
      "rewritten": "_ = weather_data.loc[weather_data['Date'] == '2020-05-15',\n    'AMBIENT_TEMPERATURE']\n_ = weather_data.loc[weather_data['Date'] == '2020-05-15', 'MODULE_TEMPERATURE'\n    ]\n"
    },
    {
      "raw": "#Timestamp of maximum irradiation on the 15th of May\nweather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"IRRADIATION\"].idxmax()",
      "rewrite-ns": 694094,
      "overhead-ns": 694094,
      "exec-ns": 849797,
      "total-ns": 1543891,
      "patts-hit": {},
      "rewritten": "weather_data.loc[weather_data['Date'] == '2020-05-15', 'IRRADIATION'].idxmax()\n"
    },
    {
      "raw": "#Timestamp of maximum ambient temperature on the 15th of May\nweather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"AMBIENT_TEMPERATURE\"].idxmax()",
      "rewrite-ns": 711310,
      "overhead-ns": 711310,
      "exec-ns": 819164,
      "total-ns": 1530474,
      "patts-hit": {},
      "rewritten": "weather_data.loc[weather_data['Date'] == '2020-05-15', 'AMBIENT_TEMPERATURE'\n    ].idxmax()\n"
    },
    {
      "raw": "weather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"MODULE_TEMPERATURE\"].idxmax()",
      "rewrite-ns": 706946,
      "overhead-ns": 706946,
      "exec-ns": 801715,
      "total-ns": 1508661,
      "patts-hit": {},
      "rewritten": "weather_data.loc[weather_data['Date'] == '2020-05-15', 'MODULE_TEMPERATURE'\n    ].idxmax()\n"
    },
    {
      "raw": "",
      "rewrite-ns": 11573,
      "overhead-ns": 11573,
      "exec-ns": 65031,
      "total-ns": 76604,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "inverter_daily_power.keys()",
      "rewrite-ns": 261870,
      "overhead-ns": 261870,
      "exec-ns": 395202,
      "total-ns": 657072,
      "patts-hit": {},
      "rewritten": "inverter_daily_power.keys()\n"
    },
    {
      "raw": "weather_data[\"date\"] = weather_data.index.map(lambda x : x.date())\ndaily_irradiation = weather_data.groupby(\"date\").sum()[\"IRRADIATION\"]\n# FIRST-AUTHOR: remove plotting\n# sns.scatterplot(x = daily_irradiation, y = inverter_daily_power[\"1BY6WEcLGh8j5v7\"])\n_ = inverter_daily_power[\"1BY6WEcLGh8j5v7\"]",
      "rewrite-ns": 1377913,
      "overhead-ns": 1377913,
      "exec-ns": 2994184,
      "total-ns": 4372097,
      "patts-hit": {},
      "rewritten": "weather_data['date'] = weather_data.index.map(lambda x: x.date())\ndaily_irradiation = weather_data.groupby('date').sum()['IRRADIATION']\n_ = inverter_daily_power['1BY6WEcLGh8j5v7']\n"
    },
    {
      "raw": "max_temps = weather_data.groupby(\"date\").max()[\"AMBIENT_TEMPERATURE\"]\nmin_temps = weather_data.groupby(\"date\").min()[\"AMBIENT_TEMPERATURE\"]",
      "rewrite-ns": 986135,
      "overhead-ns": 986135,
      "exec-ns": 7296903,
      "total-ns": 8283038,
      "patts-hit": {},
      "rewritten": "max_temps = weather_data.groupby('date').max()['AMBIENT_TEMPERATURE']\nmin_temps = weather_data.groupby('date').min()['AMBIENT_TEMPERATURE']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize = (12,6))\n# max_temps.plot(label = \"Maximum Temperature\")\n# min_temps.plot(label = \"Minimum Temperature\")\n# plt.legend()",
      "rewrite-ns": 14071,
      "overhead-ns": 14071,
      "exec-ns": 68724,
      "total-ns": 82795,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "max_temps = weather_data.groupby(\"date\").max()[\"AMBIENT_TEMPERATURE\"]\nmin_temps = weather_data.groupby(\"date\").min()[\"AMBIENT_TEMPERATURE\"]\ndiff_temps = max_temps - min_temps\ndaily_irradiation = weather_data.groupby(\"date\").sum()[\"IRRADIATION\"]",
      "rewrite-ns": 1701169,
      "overhead-ns": 1701169,
      "exec-ns": 8308493,
      "total-ns": 10009662,
      "patts-hit": {},
      "rewritten": "max_temps = weather_data.groupby('date').max()['AMBIENT_TEMPERATURE']\nmin_temps = weather_data.groupby('date').min()['AMBIENT_TEMPERATURE']\ndiff_temps = max_temps - min_temps\ndaily_irradiation = weather_data.groupby('date').sum()['IRRADIATION']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.scatterplot(daily_irradiation,diff_temps)",
      "rewrite-ns": 12883,
      "overhead-ns": 12883,
      "exec-ns": 68156,
      "total-ns": 81039,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "temp_before_sunrise = weather_data.loc[(weather_data[\"Time\"] < pd.to_datetime(\"07:00\").time()) & (weather_data[\"IRRADIATION\"] > 0)].groupby(\"date\")[\"AMBIENT_TEMPERATURE\"].min()",
      "rewrite-ns": 1429173,
      "overhead-ns": 1429173,
      "exec-ns": 1582485,
      "total-ns": 3011658,
      "patts-hit": {},
      "rewritten": "temp_before_sunrise = weather_data.loc[(weather_data['Time'] < pd.\n    to_datetime('07:00').time()) & (weather_data['IRRADIATION'] > 0)].groupby(\n    'date')['AMBIENT_TEMPERATURE'].min()\n"
    },
    {
      "raw": "diff_temps = max_temps - temp_before_sunrise",
      "rewrite-ns": 311806,
      "overhead-ns": 311806,
      "exec-ns": 612506,
      "total-ns": 924312,
      "patts-hit": {},
      "rewritten": "diff_temps = max_temps - temp_before_sunrise\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.scatterplot(daily_irradiation,diff_temps)",
      "rewrite-ns": 12518,
      "overhead-ns": 12518,
      "exec-ns": 65252,
      "total-ns": 77770,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "",
      "rewrite-ns": 10834,
      "overhead-ns": 10834,
      "exec-ns": 60333,
      "total-ns": 71167,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "average_power = gen_data.reset_index().groupby(\"DATE_TIME\").mean()[[\"DC_POWER\",\"AC_POWER\"]]",
      "rewrite-ns": 745592,
      "overhead-ns": 745592,
      "exec-ns": 4066722,
      "total-ns": 4812314,
      "patts-hit": {},
      "rewritten": "average_power = gen_data.reset_index().groupby('DATE_TIME').mean()[[\n    'DC_POWER', 'AC_POWER']]\n"
    },
    {
      "raw": "total_power = average_power * gen_data[\"PLANT_ID\"].nunique()",
      "rewrite-ns": 517112,
      "overhead-ns": 517112,
      "exec-ns": 536340,
      "total-ns": 1053452,
      "patts-hit": {},
      "rewritten": "total_power = average_power * gen_data['PLANT_ID'].nunique()\n"
    },
    {
      "raw": "total_power[\"Date\"] = total_power.index.map(lambda x : x.date())\n# FIRST-AUTHOR: remove plotting\n# fig = plt.figure()\n# total_power.groupby(\"Date\").sum().plot()\n# plt.yscale(\"log\")\ntotal_power.groupby(\"Date\").sum()",
      "rewrite-ns": 1030131,
      "overhead-ns": 1030131,
      "exec-ns": 5431923,
      "total-ns": 6462054,
      "patts-hit": {},
      "rewritten": "total_power['Date'] = total_power.index.map(lambda x: x.date())\ntotal_power.groupby('Date').sum()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.regplot(x = weather_data.groupby(\"Date\")[\"IRRADIATION\"].sum(), y = total_power.groupby(\"Date\")[\"DC_POWER\"].sum())\n_ = weather_data.groupby(\"Date\")[\"IRRADIATION\"].sum()\n_ = total_power.groupby(\"Date\")[\"DC_POWER\"].sum()",
      "rewrite-ns": 1010740,
      "overhead-ns": 1010740,
      "exec-ns": 1216303,
      "total-ns": 2227043,
      "patts-hit": {},
      "rewritten": "_ = weather_data.groupby('Date')['IRRADIATION'].sum()\n_ = total_power.groupby('Date')['DC_POWER'].sum()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.linear_model import LinearRegression\n# model = LinearRegression()\n# model.fit(weather_data.groupby(\"Date\")[\"IRRADIATION\"].sum().values.reshape(-1,1),total_power.groupby(\"Date\")[\"DC_POWER\"].sum())\n# model.intercept_,model.coef_\n_ = weather_data.groupby(\"Date\")[\"IRRADIATION\"].sum().values.reshape(-1,1)\n_ = total_power.groupby(\"Date\")[\"DC_POWER\"].sum()",
      "rewrite-ns": 1269901,
      "overhead-ns": 1269901,
      "exec-ns": 1178749,
      "total-ns": 2448650,
      "patts-hit": {},
      "rewritten": "_ = weather_data.groupby('Date')['IRRADIATION'].sum().values.reshape(-1, 1)\n_ = total_power.groupby('Date')['DC_POWER'].sum()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.regplot(x = total_power.groupby(\"Date\")[\"DC_POWER\"].sum(),y = total_power.groupby(\"Date\")[\"AC_POWER\"].sum())\n_ = total_power.groupby(\"Date\")[\"DC_POWER\"].sum()\n_ = total_power.groupby(\"Date\")[\"AC_POWER\"].sum()",
      "rewrite-ns": 991732,
      "overhead-ns": 991732,
      "exec-ns": 1193646,
      "total-ns": 2185378,
      "patts-hit": {},
      "rewritten": "_ = total_power.groupby('Date')['DC_POWER'].sum()\n_ = total_power.groupby('Date')['AC_POWER'].sum()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.linear_model import LinearRegression",
      "rewrite-ns": 12374,
      "overhead-ns": 12374,
      "exec-ns": 67745,
      "total-ns": 80119,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# a = LinearRegression()\n# a.fit(total_power.groupby(\"Date\")[\"DC_POWER\"].sum().values.reshape(-1,1),total_power.groupby(\"Date\")[\"AC_POWER\"].sum())\n# a.intercept_,a.coef_\n_ = total_power.groupby(\"Date\")[\"DC_POWER\"].sum().values.reshape(-1,1)\n_ = total_power.groupby(\"Date\")[\"AC_POWER\"].sum()",
      "rewrite-ns": 1269509,
      "overhead-ns": 1269509,
      "exec-ns": 1203245,
      "total-ns": 2472754,
      "patts-hit": {},
      "rewritten": "_ = total_power.groupby('Date')['DC_POWER'].sum().values.reshape(-1, 1)\n_ = total_power.groupby('Date')['AC_POWER'].sum()\n"
    },
    {
      "raw": "gen_data_2 = pd.read_csv(\"./input/Plant_2_Generation_Data.scaled.csv\",index_col = \"DATE_TIME\",parse_dates = [\"DATE_TIME\"])",
      "rewrite-ns": 563588,
      "overhead-ns": 563588,
      "exec-ns": 22492678,
      "total-ns": 23056266,
      "patts-hit": {},
      "rewritten": "gen_data_2 = pd.read_csv('./input/Plant_2_Generation_Data.scaled.csv',\n    index_col='DATE_TIME', parse_dates=['DATE_TIME'])\n"
    },
    {
      "raw": "gen_data_2[\"Date\"] = gen_data_2.index.map(lambda x : x.date())\ngen_data_2[\"Time\"] = gen_data_2.index.map(lambda x : x.time())",
      "rewrite-ns": 1331786,
      "overhead-ns": 1331786,
      "exec-ns": 49121669,
      "total-ns": 50453455,
      "patts-hit": {},
      "rewritten": "gen_data_2['Date'] = gen_data_2.index.map(lambda x: x.date())\ngen_data_2['Time'] = gen_data_2.index.map(lambda x: x.time())\n"
    },
    {
      "raw": "gen_data_2.groupby(\"SOURCE_KEY\").count()",
      "rewrite-ns": 407658,
      "overhead-ns": 407658,
      "exec-ns": 12140434,
      "total-ns": 12548092,
      "patts-hit": {},
      "rewritten": "gen_data_2.groupby('SOURCE_KEY').count()\n"
    },
    {
      "raw": "[any(pd.isnull(gen_data_2[column])) for column in gen_data_2.columns]",
      "rewrite-ns": 728013,
      "overhead-ns": 728013,
      "exec-ns": 13154429,
      "total-ns": 13882442,
      "patts-hit": {},
      "rewritten": "[any(pd.isnull(gen_data_2[column])) for column in gen_data_2.columns]\n"
    },
    {
      "raw": "inverters = gen_data_2[\"SOURCE_KEY\"].unique()\n# FIRST-AUTHOR: remove plotting\n# fig = plt.figure(figsize = (25,16))\nfor i,inverter in enumerate(inverters,1):\n# FIRST-AUTHOR: remove plotting\n#     plt.subplot(6,4,i)\n#     plt.yscale(\"log\")\n#     gen_data_2.loc[(gen_data_2[\"Date\"] == pd.to_datetime(\"2020-05-15\")) &  (gen_data_2[\"SOURCE_KEY\"] == inverter),\"DC_POWER\"].plot(label = inverter + \" DC\")\n#     gen_data_2.loc[(gen_data_2[\"Date\"] == pd.to_datetime(\"2020-05-15\")) & (gen_data_2[\"SOURCE_KEY\"] == inverter),\"AC_POWER\"].plot(label = inverter + \" AC\")\n#     plt.legend()\n    gen_data_2.loc[(gen_data_2[\"Date\"] == pd.to_datetime(\"2020-05-15\")) &  (gen_data_2[\"SOURCE_KEY\"] == inverter),\"DC_POWER\"]\n    gen_data_2.loc[(gen_data_2[\"Date\"] == pd.to_datetime(\"2020-05-15\")) & (gen_data_2[\"SOURCE_KEY\"] == inverter),\"AC_POWER\"]",
      "rewrite-ns": 2673820,
      "overhead-ns": 2673820,
      "exec-ns": 13235911140,
      "total-ns": 13238584960,
      "patts-hit": {},
      "rewritten": "inverters = gen_data_2['SOURCE_KEY'].unique()\nfor i, inverter in enumerate(inverters, 1):\n    gen_data_2.loc[(gen_data_2['Date'] == pd.to_datetime('2020-05-15')) & (\n        gen_data_2['SOURCE_KEY'] == inverter), 'DC_POWER']\n    gen_data_2.loc[(gen_data_2['Date'] == pd.to_datetime('2020-05-15')) & (\n        gen_data_2['SOURCE_KEY'] == inverter), 'AC_POWER']\n"
    },
    {
      "raw": "inverters",
      "rewrite-ns": 144857,
      "overhead-ns": 144857,
      "exec-ns": 1068071,
      "total-ns": 1212928,
      "patts-hit": {},
      "rewritten": "inverters\n"
    },
    {
      "raw": "average_power_2 = gen_data_2.reset_index().groupby(\"DATE_TIME\").mean()[[\"DC_POWER\",\"AC_POWER\"]]\ntotal_power_2 = average_power_2 * gen_data_2[\"SOURCE_KEY\"].nunique()\ntotal_power_2[\"Date\"] = total_power_2.index.map(lambda x : x.date())",
      "rewrite-ns": 1955988,
      "overhead-ns": 1955988,
      "exec-ns": 9496031,
      "total-ns": 11452019,
      "patts-hit": {},
      "rewritten": "average_power_2 = gen_data_2.reset_index().groupby('DATE_TIME').mean()[[\n    'DC_POWER', 'AC_POWER']]\ntotal_power_2 = average_power_2 * gen_data_2['SOURCE_KEY'].nunique()\ntotal_power_2['Date'] = total_power_2.index.map(lambda x: x.date())\n"
    },
    {
      "raw": "weather_data_2 = pd.read_csv(\"./input/Plant_2_Weather_Sensor_Data.scaled.csv\",index_col = \"DATE_TIME\",parse_dates = True)\nweather_data_2[\"Date\"] = weather_data_2.index.map(lambda x : x.date())\nweather_data_2[\"Time\"] = weather_data_2.index.map(lambda x : x.time())",
      "rewrite-ns": 1802425,
      "overhead-ns": 1802425,
      "exec-ns": 7010879,
      "total-ns": 8813304,
      "patts-hit": {},
      "rewritten": "weather_data_2 = pd.read_csv('./input/Plant_2_Weather_Sensor_Data.scaled.csv',\n    index_col='DATE_TIME', parse_dates=True)\nweather_data_2['Date'] = weather_data_2.index.map(lambda x: x.date())\nweather_data_2['Time'] = weather_data_2.index.map(lambda x: x.time())\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.regplot(x = weather_data_2.groupby(\"Date\")[\"IRRADIATION\"].sum(),y = total_power_2.groupby(\"Date\").sum()[\"DC_POWER\"])\n_ = weather_data_2.groupby(\"Date\")[\"IRRADIATION\"].sum()\n_ = total_power_2.groupby(\"Date\").sum()[\"DC_POWER\"]",
      "rewrite-ns": 1009040,
      "overhead-ns": 1009040,
      "exec-ns": 1807001,
      "total-ns": 2816041,
      "patts-hit": {},
      "rewritten": "_ = weather_data_2.groupby('Date')['IRRADIATION'].sum()\n_ = total_power_2.groupby('Date').sum()['DC_POWER']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.regplot(x = total_power_2.groupby(\"Date\").sum()[\"DC_POWER\"], y = total_power_2.groupby(\"Date\").sum()[\"AC_POWER\"])\n_ = total_power_2.groupby(\"Date\").sum()[\"DC_POWER\"]\n_ = total_power_2.groupby(\"Date\").sum()[\"AC_POWER\"]",
      "rewrite-ns": 991208,
      "overhead-ns": 991208,
      "exec-ns": 1977420,
      "total-ns": 2968628,
      "patts-hit": {},
      "rewritten": "_ = total_power_2.groupby('Date').sum()['DC_POWER']\n_ = total_power_2.groupby('Date').sum()['AC_POWER']\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# model_2 = LinearRegression()\n# model_2.fit(total_power_2.groupby(\"Date\").sum()[\"DC_POWER\"].values.reshape(-1,1), y = total_power_2.groupby(\"Date\").sum()[\"AC_POWER\"])\n# model_2.coef_,model_2.intercept_\n_ = total_power_2.groupby(\"Date\").sum()[\"DC_POWER\"].values.reshape(-1,1)\n_ = total_power_2.groupby(\"Date\").sum()[\"AC_POWER\"]",
      "rewrite-ns": 1276315,
      "overhead-ns": 1276315,
      "exec-ns": 2003816,
      "total-ns": 3280131,
      "patts-hit": {},
      "rewritten": "_ = total_power_2.groupby('Date').sum()['DC_POWER'].values.reshape(-1, 1)\n_ = total_power_2.groupby('Date').sum()['AC_POWER']\n"
    },
    {
      "raw": "",
      "rewrite-ns": 12305,
      "overhead-ns": 12305,
      "exec-ns": 70330,
      "total-ns": 82635,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 14.11146104,
  "max-disk-in-mb": 0
}