{
  "max-mem-in-mb": 735,
  "max-mem-in-mb2": 831,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n# ALEX: remove plotting\n# import seaborn as sns\nimport re\n# ALEX: remove plotting\n# import matplotlib.pyplot as plt\n# %matplotlib inline\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# ALEX: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session",
      "rewrite-ns": 793573,
      "overhead-ns": 793573,
      "exec-ns": 437009,
      "total-ns": 1230582,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\nimport re\n"
    },
    {
      "raw": "flipkart_data = pd.read_csv(r\"./input/OnlineOrders_of_a_ecommerce_website.scaled.csv\")",
      "rewrite-ns": 537448,
      "overhead-ns": 537448,
      "exec-ns": 1874459634,
      "total-ns": 1874997082,
      "patts-hit": {},
      "rewritten": "flipkart_data = pd.read_csv(\n    './input/OnlineOrders_of_a_ecommerce_website.scaled.csv')\n"
    },
    {
      "raw": "flipkart_data.head()",
      "rewrite-ns": 184273,
      "overhead-ns": 184273,
      "exec-ns": 7829652,
      "total-ns": 8013925,
      "patts-hit": {},
      "rewritten": "flipkart_data.head()\n"
    },
    {
      "raw": "flipkart_data.rename(columns={'crawl_timestamp': 'Timestamp',\n                              'product_name': 'Product_Name',\n                             'product_category_tree': 'Product_Category_Tree',\n                             'retail_price': 'Retail_Price',\n                             'discounted_price': 'Discounted_Price',\n                             'brand': 'Brand'}, inplace=True)",
      "rewrite-ns": 988412,
      "overhead-ns": 988412,
      "exec-ns": 652705,
      "total-ns": 1641117,
      "patts-hit": {},
      "rewritten": "flipkart_data.rename(columns={'crawl_timestamp': 'Timestamp',\n    'product_name': 'Product_Name', 'product_category_tree':\n    'Product_Category_Tree', 'retail_price': 'Retail_Price',\n    'discounted_price': 'Discounted_Price', 'brand': 'Brand'}, inplace=True)\n"
    },
    {
      "raw": "flipkart_data.head()",
      "rewrite-ns": 73455,
      "overhead-ns": 73455,
      "exec-ns": 5014523,
      "total-ns": 5087978,
      "patts-hit": {},
      "rewritten": "flipkart_data.head()\n"
    },
    {
      "raw": "flipkart_data['Category'] = flipkart_data['Product_Category_Tree'].apply(lambda x: re.split('\\[]*|\\\"|\\>>|\\,', x)[2])",
      "rewrite-ns": 1038493,
      "overhead-ns": 1038493,
      "exec-ns": 2574924956,
      "total-ns": 2575963449,
      "patts-hit": {},
      "rewritten": "flipkart_data['Category'] = flipkart_data['Product_Category_Tree'].apply(lambda\n    x: re.split('\\\\[]*|\"|\\\\>>|\\\\,', x)[2])\n"
    },
    {
      "raw": "flipkart_data.head(5)",
      "rewrite-ns": 140876,
      "overhead-ns": 140876,
      "exec-ns": 6112496,
      "total-ns": 6253372,
      "patts-hit": {},
      "rewritten": "flipkart_data.head(5)\n"
    },
    {
      "raw": "flipkart_data.drop(['Product_Category_Tree'], axis = 1, inplace= True)",
      "rewrite-ns": 567206,
      "overhead-ns": 567206,
      "exec-ns": 39017249,
      "total-ns": 39584455,
      "patts-hit": {},
      "rewritten": "flipkart_data.drop(['Product_Category_Tree'], axis=1, inplace=True)\n"
    },
    {
      "raw": "flipkart_data.head()",
      "rewrite-ns": 118875,
      "overhead-ns": 118875,
      "exec-ns": 5685216,
      "total-ns": 5804091,
      "patts-hit": {},
      "rewritten": "flipkart_data.head()\n"
    },
    {
      "raw": "flipkart_data['Timestamp'] = flipkart_data['Timestamp'].apply(lambda x: x.split('+')[0])",
      "rewrite-ns": 985894,
      "overhead-ns": 985894,
      "exec-ns": 347152835,
      "total-ns": 348138729,
      "patts-hit": {},
      "rewritten": "flipkart_data['Timestamp'] = flipkart_data['Timestamp'].apply(lambda x: x.\n    split('+')[0])\n"
    },
    {
      "raw": "flipkart_data.head()",
      "rewrite-ns": 116567,
      "overhead-ns": 116567,
      "exec-ns": 5623102,
      "total-ns": 5739669,
      "patts-hit": {},
      "rewritten": "flipkart_data.head()\n"
    },
    {
      "raw": "# Save the data as csv file\nflipkart_data.to_csv('fkartDataset.csv', index=False)",
      "rewrite-ns": 437968,
      "overhead-ns": 437968,
      "exec-ns": 4240354139,
      "total-ns": 4240792107,
      "patts-hit": {},
      "rewritten": "flipkart_data.to_csv('fkartDataset.csv', index=False)\n"
    },
    {
      "raw": "flkart_data = pd.read_csv('fkartDataset.csv')\nflkart_data.head()",
      "rewrite-ns": 623589,
      "overhead-ns": 623589,
      "exec-ns": 1396743842,
      "total-ns": 1397367431,
      "patts-hit": {},
      "rewritten": "flkart_data = pd.read_csv('fkartDataset.csv')\nflkart_data.head()\n"
    },
    {
      "raw": "flkart_data.isnull().sum()",
      "rewrite-ns": 445990,
      "overhead-ns": 445990,
      "exec-ns": 482487785,
      "total-ns": 482933775,
      "patts-hit": {},
      "rewritten": "flkart_data.isnull().sum()\n"
    },
    {
      "raw": "#Adding the month column\nflkart_data['Month'] = pd.to_numeric(pd.DatetimeIndex(flkart_data['Timestamp']).month)\nflkart_data.head()",
      "rewrite-ns": 906100,
      "overhead-ns": 906100,
      "exec-ns": 187101649,
      "total-ns": 188007749,
      "patts-hit": {},
      "rewritten": "flkart_data['Month'] = pd.to_numeric(pd.DatetimeIndex(flkart_data[\n    'Timestamp']).month)\nflkart_data.head()\n"
    },
    {
      "raw": "totalsum = flkart_data.groupby('Month').sum()\ntotalsum ",
      "rewrite-ns": 546200,
      "overhead-ns": 546200,
      "exec-ns": 22032594,
      "total-ns": 22578794,
      "patts-hit": {},
      "rewritten": "totalsum = flkart_data.groupby('Month').sum()\ntotalsum\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# months = range(1, 7)\n# plt.bar(months, totalsum['Discounted_Price'])\n# plt.xticks(months)\n# plt.xlabel(\"Months\")\n# plt.ylabel('Sales in INR')\n# plt.show()\n_ = totalsum['Discounted_Price']",
      "rewrite-ns": 348250,
      "overhead-ns": 348250,
      "exec-ns": 310616,
      "total-ns": 658866,
      "patts-hit": {},
      "rewritten": "_ = totalsum['Discounted_Price']\n"
    },
    {
      "raw": "flkart_data['Timestamp'] = pd.to_datetime(flkart_data['Timestamp'])",
      "rewrite-ns": 581182,
      "overhead-ns": 581182,
      "exec-ns": 107981114,
      "total-ns": 108562296,
      "patts-hit": {},
      "rewritten": "flkart_data['Timestamp'] = pd.to_datetime(flkart_data['Timestamp'])\n"
    },
    {
      "raw": "flkart_data['Hour'] = flkart_data['Timestamp'].dt.hour\nflkart_data['Minute'] = flkart_data['Timestamp'].dt.minute",
      "rewrite-ns": 984939,
      "overhead-ns": 984939,
      "exec-ns": 65462782,
      "total-ns": 66447721,
      "patts-hit": {},
      "rewritten": "flkart_data['Hour'] = flkart_data['Timestamp'].dt.hour\nflkart_data['Minute'] = flkart_data['Timestamp'].dt.minute\n"
    },
    {
      "raw": "flkart_data.head()",
      "rewrite-ns": 110635,
      "overhead-ns": 110635,
      "exec-ns": 7041031,
      "total-ns": 7151666,
      "patts-hit": {},
      "rewritten": "flkart_data.head()\n"
    },
    {
      "raw": "hours = [hour for hour, df in flkart_data.groupby('Hour')]\n\n# ALEX: remove plotting\n# plt.plot(hours, flkart_data.groupby(['Hour']).count())\n# plt.xticks(hours)\n# plt.xlabel('Hour')\n# plt.ylabel('Number of Orders')\n# plt.grid()\n# plt.show()\n_ = flkart_data.groupby(['Hour']).count()",
      "rewrite-ns": 1176021,
      "overhead-ns": 1176021,
      "exec-ns": 494007476,
      "total-ns": 495183497,
      "patts-hit": {},
      "rewritten": "hours = [hour for hour, df in flkart_data.groupby('Hour')]\n_ = flkart_data.groupby(['Hour']).count()\n"
    },
    {
      "raw": "# So our target is to look after duplicates rows\ndups_category = flkart_data.pivot_table(index=['Category'], aggfunc='size')",
      "rewrite-ns": 633856,
      "overhead-ns": 633856,
      "exec-ns": 64224815,
      "total-ns": 64858671,
      "patts-hit": {},
      "rewritten": "dups_category = flkart_data.pivot_table(index=['Category'], aggfunc='size')\n"
    },
    {
      "raw": "print(dups_category.nlargest(6))\n\n# ALEX: remove plotting\n# x =list(range(1,7))\n\n# fig, ax = plt.subplots()\n# bar = sns.barplot(data=flkart_data, x=x , y=dups_category.nlargest(6), edgecolor=\"white\")\n# ax.set_xticklabels([\"Clothes\", \"Jewel\", 'Mobile&Accessories', 'Home Decor', 'Footwear', 'Tools&Hardware'], rotation=90)\n# plt.show();\n_ = dups_category.nlargest(6)",
      "rewrite-ns": 796063,
      "overhead-ns": 796063,
      "exec-ns": 2145347,
      "total-ns": 2941410,
      "patts-hit": {},
      "rewritten": "print(dups_category.nlargest(6))\n_ = dups_category.nlargest(6)\n"
    },
    {
      "raw": "# So our target is to look after duplicates rows\ndups_product = flkart_data.pivot_table(index=['Product_Name'], aggfunc='size')\n\nprint(dups_product.nlargest(10))\n# ALEX: remove plotting\n# items = range(10)\n\n# x =list(range(1,11))\n# fig, ax = plt.subplots()\n# bar = sns.barplot(data=flkart_data, x=x , y=dups_category.nlargest(10), edgecolor=\"white\")\n# plt.show();\n_ = dups_category.nlargest(10)\n",
      "rewrite-ns": 1208609,
      "overhead-ns": 1208609,
      "exec-ns": 120986447,
      "total-ns": 122195056,
      "patts-hit": {},
      "rewritten": "dups_product = flkart_data.pivot_table(index=['Product_Name'], aggfunc='size')\nprint(dups_product.nlargest(10))\n_ = dups_category.nlargest(10)\n"
    },
    {
      "raw": "",
      "rewrite-ns": 19285,
      "overhead-ns": 19285,
      "exec-ns": 103070,
      "total-ns": 122355,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 12.072255843,
  "max-disk-in-mb": 0
}