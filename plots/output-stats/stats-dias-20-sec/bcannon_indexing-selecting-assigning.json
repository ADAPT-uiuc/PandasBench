{
  "max-mem-in-mb": 2509,
  "max-mem-in-mb2": 3875,
  "cells": [
    {
      "raw": "# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\n# FIRST-AUTHOR: remove plotting\n# import seaborn as sns\n\nreviews = pd.read_csv(\"./input/winemag-data-130k-v2.scaled.csv\", index_col=0)\n\n\ndef check_q1(ans):\n    expected = reviews.description\n    return ans.equals(expected)\n\n\ndef answer_q1():\n    print(\"\"\"reviews.description\"\"\")\n\n\ndef check_q2(ans):\n    expected = reviews.description[0]\n    return ans == expected\n\n\ndef answer_q2():\n    print(\"\"\"reviews.description[0]\"\"\")\n\n\ndef check_q3(ans):\n    expected = reviews.iloc[0]\n    return ans.equals(expected)\n\n\ndef answer_q3():\n    print(\"\"\"reviews.iloc[0]\"\"\")\n\n\ndef check_q4(ans):\n    expected = reviews.iloc[0:10, 1]\n    return ans.equals(expected)\n\n\ndef answer_q4():\n    print(\"\"\"reviews.iloc[0:10, 1]\"\"\")\n\n\ndef check_q5(ans):\n    expected = reviews.iloc[[1, 2, 3, 5, 8]]\n    return ans.equals(expected)\n\n\ndef answer_q5():\n    print(\"\"\"reviews.iloc[[1, 2, 3, 5, 8]]\"\"\")\n\n\ndef check_q6(ans):\n    expected = reviews.loc[[0, 1, 10, 100], ['country', 'province', 'region_1', 'region_2']]\n    return ans.equals(expected)\n\n\ndef answer_q6():\n    print(\"\"\"reviews.loc[[0, 1, 10, 100], ['country', 'province', 'region_1', 'region_2']]\"\"\")\n\n\ndef check_q7(ans):\n    expected = reviews.loc[0:100, ['country', 'variety']]\n    return ans.equals(expected)\n\n\ndef answer_q7():\n    print(\"\"\"reviews.loc[0:100, ['country', 'variety']]\"\"\")\n\n\ndef check_q8(ans):\n    expected = reviews.loc[reviews.country == 'Italy']\n    return ans.equals(expected)\n\n\ndef answer_q8():\n    print(\"\"\"reviews.loc[reviews.country == 'Italy']\"\"\")\n\n\ndef check_q9(ans):\n    expected = reviews.loc[reviews.region_2.notnull()]\n    return ans.head().equals(expected.head())\n\n\ndef answer_q9():\n    print(\"\"\"reviews.loc[reviews.region_2.notnull()]\"\"\")\n\n\ndef check_q10(ans):\n    expected = reviews.points\n# FIRST-AUTHOR: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q10():\n    print(\"\"\"reviews.points\"\"\")\n\n\ndef check_q11(ans):\n    expected = reviews.loc[:1000, 'points']\n# FIRST-AUTHOR: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q11():\n    print(\"\"\"reviews.loc[:1000, 'points']\"\"\")\n\n\ndef check_q12(ans):\n    expected = reviews.iloc[-1000:, 3]\n# FIRST-AUTHOR: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q12():\n    print(\"\"\"reviews.iloc[-1000:, 3]\"\"\")\n\n\ndef check_q13(ans):\n    expected = reviews[reviews.country == \"Italy\"].points\n# FIRST-AUTHOR: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q13():\n    print(\"\"\"reviews[reviews.country == \"Italy\"].points\"\"\")\n\n\ndef check_q14(ans):\n    expected = reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country\n# FIRST-AUTHOR: remove plotting\n#     return sns.countplot(ans) if ans.head().equals(expected.head()) else False\n    return True if ans.head().equals(expected.head()) else False\n\n\ndef answer_q14():\n    print(\"\"\"reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country\"\"\")\n\nreviews = pd.read_csv(\"./input/winemag-data-130k-v2.scaled.csv\", index_col=0)\npd.set_option(\"display.max_rows\", 5)",
      "rewrite-ns": 23924160,
      "overhead-ns": 23924160,
      "exec-ns": 23761079108,
      "total-ns": 23785003268,
      "patts-hit": {},
      "rewritten": "exec(os.environ['IREWR_IMPORTS'])\nreviews = pd.read_csv('./input/winemag-data-130k-v2.scaled.csv', index_col=0)\ndef check_q1(ans):\n    expected = reviews.description\n    return ans.equals(expected)\ndef answer_q1():\n    print('reviews.description')\ndef check_q2(ans):\n    expected = reviews.description[0]\n    return ans == expected\ndef answer_q2():\n    print('reviews.description[0]')\ndef check_q3(ans):\n    expected = reviews.iloc[0]\n    return ans.equals(expected)\ndef answer_q3():\n    print('reviews.iloc[0]')\ndef check_q4(ans):\n    expected = reviews.iloc[0:10, 1]\n    return ans.equals(expected)\ndef answer_q4():\n    print('reviews.iloc[0:10, 1]')\ndef check_q5(ans):\n    expected = reviews.iloc[[1, 2, 3, 5, 8]]\n    return ans.equals(expected)\ndef answer_q5():\n    print('reviews.iloc[[1, 2, 3, 5, 8]]')\ndef check_q6(ans):\n    expected = reviews.loc[[0, 1, 10, 100], ['country', 'province',\n        'region_1', 'region_2']]\n    return ans.equals(expected)\ndef answer_q6():\n    print(\n        \"reviews.loc[[0, 1, 10, 100], ['country', 'province', 'region_1', 'region_2']]\"\n        )\ndef check_q7(ans):\n    expected = reviews.loc[0:100, ['country', 'variety']]\n    return ans.equals(expected)\ndef answer_q7():\n    print(\"reviews.loc[0:100, ['country', 'variety']]\")\ndef check_q8(ans):\n    expected = reviews.loc[reviews.country == 'Italy']\n    return ans.equals(expected)\ndef answer_q8():\n    print(\"reviews.loc[reviews.country == 'Italy']\")\ndef check_q9(ans):\n    expected = reviews.loc[reviews.region_2.notnull()]\n    return ans.head().equals(expected.head())\ndef answer_q9():\n    print('reviews.loc[reviews.region_2.notnull()]')\ndef check_q10(ans):\n    expected = reviews.points\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q10():\n    print('reviews.points')\ndef check_q11(ans):\n    expected = reviews.loc[:1000, 'points']\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q11():\n    print(\"reviews.loc[:1000, 'points']\")\ndef check_q12(ans):\n    expected = reviews.iloc[-1000:, 3]\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q12():\n    print('reviews.iloc[-1000:, 3]')\ndef check_q13(ans):\n    expected = reviews[reviews.country == 'Italy'].points\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q13():\n    print('reviews[reviews.country == \"Italy\"].points')\ndef check_q14(ans):\n    expected = reviews[reviews.country.isin(['Italy', 'France']) & (reviews\n        .points >= 90)].country\n    return True if ans.head().equals(expected.head()) else False\ndef answer_q14():\n    print(\n        'reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country'\n        )\nreviews = pd.read_csv('./input/winemag-data-130k-v2.scaled.csv', index_col=0)\npd.set_option('display.max_rows', 5)\n"
    },
    {
      "raw": "reviews.head()",
      "rewrite-ns": 211925,
      "overhead-ns": 211925,
      "exec-ns": 11345768,
      "total-ns": 11557693,
      "patts-hit": {},
      "rewritten": "reviews.head()\n"
    },
    {
      "raw": "check_q1(pd.DataFrame())",
      "rewrite-ns": 450921,
      "overhead-ns": 450921,
      "exec-ns": 1001408,
      "total-ns": 1452329,
      "patts-hit": {},
      "rewritten": "check_q1(pd.DataFrame())\n"
    },
    {
      "raw": "reviews.filter(items=[\"description\"])",
      "rewrite-ns": 450545,
      "overhead-ns": 450545,
      "exec-ns": 44118573,
      "total-ns": 44569118,
      "patts-hit": {},
      "rewritten": "reviews.filter(items=['description'])\n"
    },
    {
      "raw": "reviews.at[0,\"description\"]",
      "rewrite-ns": 463722,
      "overhead-ns": 463722,
      "exec-ns": 50141630,
      "total-ns": 50605352,
      "patts-hit": {},
      "rewritten": "reviews.at[0, 'description']\n"
    },
    {
      "raw": "reviews.loc[0]",
      "rewrite-ns": 354222,
      "overhead-ns": 354222,
      "exec-ns": 1462686,
      "total-ns": 1816908,
      "patts-hit": {},
      "rewritten": "reviews.loc[0]\n"
    },
    {
      "raw": "reviews.loc[0:9].filter(items=[\"description\"])",
      "rewrite-ns": 657293,
      "overhead-ns": 657293,
      "exec-ns": 22768429,
      "total-ns": 23425722,
      "patts-hit": {},
      "rewritten": "reviews.loc[0:9].filter(items=['description'])\n"
    },
    {
      "raw": "reviews.loc[[1,2,3,5,8]]",
      "rewrite-ns": 540169,
      "overhead-ns": 540169,
      "exec-ns": 8792157,
      "total-ns": 9332326,
      "patts-hit": {},
      "rewritten": "reviews.loc[[1, 2, 3, 5, 8]]\n"
    },
    {
      "raw": "reviews.loc[[0,1,10,100]].filter([\"country\",\"province\",\"region_1\",\"region_2\"])",
      "rewrite-ns": 831798,
      "overhead-ns": 831798,
      "exec-ns": 4002232,
      "total-ns": 4834030,
      "patts-hit": {},
      "rewritten": "reviews.loc[[0, 1, 10, 100]].filter(['country', 'province', 'region_1',\n    'region_2'])\n"
    },
    {
      "raw": "reviews.loc[0:99].filter([\"country\",\"variety\"])",
      "rewrite-ns": 644447,
      "overhead-ns": 644447,
      "exec-ns": 3756678,
      "total-ns": 4401125,
      "patts-hit": {},
      "rewritten": "reviews.loc[0:99].filter(['country', 'variety'])\n"
    },
    {
      "raw": "reviews.loc[reviews.country == 'Italy']",
      "rewrite-ns": 483978,
      "overhead-ns": 483978,
      "exec-ns": 158691793,
      "total-ns": 159175771,
      "patts-hit": {},
      "rewritten": "reviews.loc[reviews.country == 'Italy']\n"
    },
    {
      "raw": "reviews.loc[reviews.region_2 != 'NaN']",
      "rewrite-ns": 517482,
      "overhead-ns": 517482,
      "exec-ns": 299266859,
      "total-ns": 299784341,
      "patts-hit": {},
      "rewritten": "reviews.loc[reviews.region_2 != 'NaN']\n"
    },
    {
      "raw": "reviews.filter(items=[\"points\"])",
      "rewrite-ns": 464424,
      "overhead-ns": 464424,
      "exec-ns": 7219279,
      "total-ns": 7683703,
      "patts-hit": {},
      "rewritten": "reviews.filter(items=['points'])\n"
    },
    {
      "raw": "reviews.points.loc[0:999]",
      "rewrite-ns": 457057,
      "overhead-ns": 457057,
      "exec-ns": 13765238,
      "total-ns": 14222295,
      "patts-hit": {},
      "rewritten": "reviews.points.loc[0:999]\n"
    },
    {
      "raw": "reviews.points.loc[reviews.shape[0]-1000:reviews.shape[0]]",
      "rewrite-ns": 860407,
      "overhead-ns": 860407,
      "exec-ns": 74161611,
      "total-ns": 75022018,
      "patts-hit": {},
      "rewritten": "reviews.points.loc[reviews.shape[0] - 1000:reviews.shape[0]]\n"
    },
    {
      "raw": "reviews.points.loc[reviews.country == 'Italy']",
      "rewrite-ns": 576722,
      "overhead-ns": 576722,
      "exec-ns": 102745752,
      "total-ns": 103322474,
      "patts-hit": {},
      "rewritten": "reviews.points.loc[reviews.country == 'Italy']\n"
    },
    {
      "raw": "reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country",
      "rewrite-ns": 941457,
      "overhead-ns": 941457,
      "exec-ns": 102520231,
      "total-ns": 103461688,
      "patts-hit": {},
      "rewritten": "reviews[reviews.country.isin(['Italy', 'France']) & (reviews.points >= 90)\n    ].country\n"
    }
  ],
  "total-time-in-sec": 24.699670161,
  "max-disk-in-mb": 0
}