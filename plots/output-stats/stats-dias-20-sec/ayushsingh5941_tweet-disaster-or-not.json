{
  "max-mem-in-mb": 189,
  "max-mem-in-mb2": 200,
  "cells": [
    {
      "raw": "# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\nimport re\n# ALEX: remove ML code\n# from nltk.stem import WordNetLemmatizer\n# from nltk.corpus import names, stopwords\nimport unicodedata\n# from sklearn.model_selection import train_test_split\n# from sklearn.feature_extraction.text import TfidfVectorizer\n# from sklearn.pipeline import Pipeline\n# from sklearn.metrics import classification_report\n# from sklearn.linear_model import LogisticRegression",
      "rewrite-ns": 858779,
      "overhead-ns": 858779,
      "exec-ns": 484566,
      "total-ns": 1343345,
      "patts-hit": {},
      "rewritten": "exec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\nimport re\nimport unicodedata\n"
    },
    {
      "raw": "",
      "rewrite-ns": 17626,
      "overhead-ns": 17626,
      "exec-ns": 100412,
      "total-ns": 118038,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "tweet_train_df = pd.read_csv('./input/train.scaled.csv')\ntweet_test_df = pd.read_csv('./input/test.scaled.csv')\nId = tweet_test_df['id']",
      "rewrite-ns": 1217316,
      "overhead-ns": 1217316,
      "exec-ns": 330049781,
      "total-ns": 331267097,
      "patts-hit": {},
      "rewritten": "tweet_train_df = pd.read_csv('./input/train.scaled.csv')\ntweet_test_df = pd.read_csv('./input/test.scaled.csv')\nId = tweet_test_df['id']\n"
    },
    {
      "raw": "tweet_train_df.head()",
      "rewrite-ns": 177048,
      "overhead-ns": 177048,
      "exec-ns": 8551970,
      "total-ns": 8729018,
      "patts-hit": {},
      "rewritten": "tweet_train_df.head()\n"
    },
    {
      "raw": "tweet_train_df.isna().sum()",
      "rewrite-ns": 565409,
      "overhead-ns": 565409,
      "exec-ns": 64126740,
      "total-ns": 64692149,
      "patts-hit": {},
      "rewritten": "tweet_train_df.isna().sum()\n"
    },
    {
      "raw": "tweet_train_df.info()",
      "rewrite-ns": 127233,
      "overhead-ns": 127233,
      "exec-ns": 67056038,
      "total-ns": 67183271,
      "patts-hit": {},
      "rewritten": "tweet_train_df.info()\n"
    },
    {
      "raw": "tweet_train_df.shape",
      "rewrite-ns": 85431,
      "overhead-ns": 85431,
      "exec-ns": 723353,
      "total-ns": 808784,
      "patts-hit": {},
      "rewritten": "tweet_train_df.shape\n"
    },
    {
      "raw": "def data_imputation(data):\n    data['keyword'].fillna(' ', inplace=True)\n    data['location'].fillna(' ', inplace=True)\n    return data",
      "rewrite-ns": 2249666,
      "overhead-ns": 2249666,
      "exec-ns": 554853,
      "total-ns": 2804519,
      "patts-hit": {},
      "rewritten": "def data_imputation(data):\n    data['keyword'].fillna(' ', inplace=True)\n    data['location'].fillna(' ', inplace=True)\n    return data\n"
    },
    {
      "raw": "tweet_train_df = data_imputation(tweet_train_df)",
      "rewrite-ns": 426764,
      "overhead-ns": 426764,
      "exec-ns": 15604653,
      "total-ns": 16031417,
      "patts-hit": {},
      "rewritten": "tweet_train_df = data_imputation(tweet_train_df)\n"
    },
    {
      "raw": "tweet_test_df = data_imputation(tweet_test_df)",
      "rewrite-ns": 333506,
      "overhead-ns": 333506,
      "exec-ns": 5737567,
      "total-ns": 6071073,
      "patts-hit": {},
      "rewritten": "tweet_test_df = data_imputation(tweet_test_df)\n"
    },
    {
      "raw": "tweet_train_df.isna().sum()",
      "rewrite-ns": 396488,
      "overhead-ns": 396488,
      "exec-ns": 47079877,
      "total-ns": 47476365,
      "patts-hit": {},
      "rewritten": "tweet_train_df.isna().sum()\n"
    },
    {
      "raw": "tweet_train_df['text'] = tweet_train_df['text'] +' '+ tweet_train_df['location'] +' '+ tweet_train_df['keyword']\ntweet_test_df['text'] = tweet_test_df['text'] +' '+ tweet_test_df['location'] +' '+ tweet_test_df['keyword']",
      "rewrite-ns": 1871819,
      "overhead-ns": 1871819,
      "exec-ns": 120115790,
      "total-ns": 121987609,
      "patts-hit": {},
      "rewritten": "tweet_train_df['text'] = tweet_train_df['text'] + ' ' + tweet_train_df[\n    'location'] + ' ' + tweet_train_df['keyword']\ntweet_test_df['text'] = tweet_test_df['text'] + ' ' + tweet_test_df['location'\n    ] + ' ' + tweet_test_df['keyword']\n"
    },
    {
      "raw": "target = tweet_train_df['target']",
      "rewrite-ns": 354707,
      "overhead-ns": 354707,
      "exec-ns": 339497,
      "total-ns": 694204,
      "patts-hit": {},
      "rewritten": "target = tweet_train_df['target']\n"
    },
    {
      "raw": "tweet_train_df.drop(['target', 'location', 'keyword', 'id'], axis=1, inplace=True)\ntweet_test_df.drop(['location', 'keyword', 'id'], axis=1, inplace=True)",
      "rewrite-ns": 1154588,
      "overhead-ns": 1154588,
      "exec-ns": 6739558,
      "total-ns": 7894146,
      "patts-hit": {},
      "rewritten": "tweet_train_df.drop(['target', 'location', 'keyword', 'id'], axis=1,\n    inplace=True)\ntweet_test_df.drop(['location', 'keyword', 'id'], axis=1, inplace=True)\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# lemmetizer = WordNetLemmatizer()",
      "rewrite-ns": 18038,
      "overhead-ns": 18038,
      "exec-ns": 89773,
      "total-ns": 107811,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# all_names = set(names.words())",
      "rewrite-ns": 10849,
      "overhead-ns": 10849,
      "exec-ns": 66346,
      "total-ns": 77195,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# stop_words = set(stopwords.words('english'))",
      "rewrite-ns": 10202,
      "overhead-ns": 10202,
      "exec-ns": 57796,
      "total-ns": 67998,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# tf_idf = TfidfVectorizer(min_df=0.1, max_df=0.7)",
      "rewrite-ns": 9342,
      "overhead-ns": 9342,
      "exec-ns": 52976,
      "total-ns": 62318,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "def cleaned_string(string):\n    # Removing all the digits\n    string = re.sub(r'\\d', '', string)\n    \n    # Removing accented data\n    string = unicodedata.normalize('NFKD', string).encode('ascii', 'ignore').decode('utf-8', 'ignore')\n    \n    # Removing Mentions\n    string = re.sub(r'@\\w+', ' ', string)\n    \n    # Removing links \n    string = re.sub(r'(https?:\\/\\/)?([\\da-zA-Z\\.-\\/\\#\\:]+)\\.([\\da-zA-Z\\.\\/\\:\\#]{0,9})([\\/\\w \\.-\\/\\:\\#]*)', ' ', string)\n    \n    # Removing all the digits special caharacters\n    string = re.sub(r'\\W', ' ', string)\n        \n    \n    # Removing double whitespaces\n    string = re.sub(r'\\s+', ' ', string, flags=re.I)\n    \n\n    \n    string = string.strip()\n    \n    #Removing all Single characters\n    string = re.sub(r'\\^[a-zA-Z]\\s+','' , string)\n    \n    \n    # Lemmetizing the string and removing stop words\n    string = string.split()\n# ALEX: remove ML code\n#     string = [lemmetizer.lemmatize(word) for word in string if word not in stop_words and word not in all_names]\n    string = ' '.join(string)\n    \n    # Lowercasing all data\n    string = string.lower()\n        \n    return string",
      "rewrite-ns": 4068047,
      "overhead-ns": 4068047,
      "exec-ns": 827934,
      "total-ns": 4895981,
      "patts-hit": {},
      "rewritten": "def cleaned_string(string):\n    string = re.sub('\\\\d', '', string)\n    string = unicodedata.normalize('NFKD', string).encode('ascii', 'ignore'\n        ).decode('utf-8', 'ignore')\n    string = re.sub('@\\\\w+', ' ', string)\n    string = re.sub(\n        '(https?:\\\\/\\\\/)?([\\\\da-zA-Z\\\\.-\\\\/\\\\#\\\\:]+)\\\\.([\\\\da-zA-Z\\\\.\\\\/\\\\:\\\\#]{0,9})([\\\\/\\\\w \\\\.-\\\\/\\\\:\\\\#]*)'\n        , ' ', string)\n    string = re.sub('\\\\W', ' ', string)\n    string = re.sub('\\\\s+', ' ', string, flags=re.I)\n    string = string.strip()\n    string = re.sub('\\\\^[a-zA-Z]\\\\s+', '', string)\n    string = string.split()\n    string = ' '.join(string)\n    string = string.lower()\n    return string\n"
    },
    {
      "raw": "def clean_text(data):\n    for i in range(data.shape[0]):\n        for j in range(data.shape[1]):\n            data.iloc[i, j] = cleaned_string(data.iloc[i, j])\n    return data\n            \n            \n    ",
      "rewrite-ns": 1700706,
      "overhead-ns": 1700706,
      "exec-ns": 440337,
      "total-ns": 2141043,
      "patts-hit": {},
      "rewritten": "def clean_text(data):\n    for i in range(data.shape[0]):\n        for j in range(data.shape[1]):\n            data.iloc[i, j] = cleaned_string(data.iloc[i, j])\n    return data\n"
    },
    {
      "raw": "tweet_cleaned_test_df = clean_text(tweet_test_df)",
      "rewrite-ns": 287480,
      "overhead-ns": 287480,
      "exec-ns": 6335992816,
      "total-ns": 6336280296,
      "patts-hit": {},
      "rewritten": "tweet_cleaned_test_df = clean_text(tweet_test_df)\n"
    },
    {
      "raw": "tweet_cleaned_test_df.shape",
      "rewrite-ns": 125670,
      "overhead-ns": 125670,
      "exec-ns": 692358,
      "total-ns": 818028,
      "patts-hit": {},
      "rewritten": "tweet_cleaned_test_df.shape\n"
    },
    {
      "raw": "tweet_cleaned_test_df.head()",
      "rewrite-ns": 105383,
      "overhead-ns": 105383,
      "exec-ns": 2856336,
      "total-ns": 2961719,
      "patts-hit": {},
      "rewritten": "tweet_cleaned_test_df.head()\n"
    },
    {
      "raw": "tweet_cleaned_train_df = clean_text(tweet_train_df)",
      "rewrite-ns": 311157,
      "overhead-ns": 311157,
      "exec-ns": 14716201814,
      "total-ns": 14716512971,
      "patts-hit": {},
      "rewritten": "tweet_cleaned_train_df = clean_text(tweet_train_df)\n"
    },
    {
      "raw": "tweet_train_df.shape",
      "rewrite-ns": 158402,
      "overhead-ns": 158402,
      "exec-ns": 948313,
      "total-ns": 1106715,
      "patts-hit": {},
      "rewritten": "tweet_train_df.shape\n"
    },
    {
      "raw": "tweet_cleaned_train_df.head()",
      "rewrite-ns": 110018,
      "overhead-ns": 110018,
      "exec-ns": 2956377,
      "total-ns": 3066395,
      "patts-hit": {},
      "rewritten": "tweet_cleaned_train_df.head()\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# X_train, X_valid, y_train, y_valid = train_test_split(tweet_cleaned_train_df['text'], target,random_state = 0)\n_ = tweet_cleaned_train_df['text']\n",
      "rewrite-ns": 336570,
      "overhead-ns": 336570,
      "exec-ns": 271774,
      "total-ns": 608344,
      "patts-hit": {},
      "rewritten": "_ = tweet_cleaned_train_df['text']\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# catboost = LogisticRegression()",
      "rewrite-ns": 11533,
      "overhead-ns": 11533,
      "exec-ns": 66903,
      "total-ns": 78436,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# pipeline_sgd = Pipeline([\n#     ('tfidf',  TfidfVectorizer()),\n#     ('nb', catboost,)\n# ])",
      "rewrite-ns": 10564,
      "overhead-ns": 10564,
      "exec-ns": 58782,
      "total-ns": 69346,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# model = pipeline_sgd.fit(X_train, y_train)",
      "rewrite-ns": 9638,
      "overhead-ns": 9638,
      "exec-ns": 54384,
      "total-ns": 64022,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# y_predict = model.predict(X_valid)",
      "rewrite-ns": 9167,
      "overhead-ns": 9167,
      "exec-ns": 55256,
      "total-ns": 64423,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# print(classification_report(y_valid, y_predict))",
      "rewrite-ns": 9532,
      "overhead-ns": 9532,
      "exec-ns": 55357,
      "total-ns": 64889,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# y_pred_test = model.predict(tweet_cleaned_test_df['text'])\ny_pred_test = tweet_cleaned_test_df['text']",
      "rewrite-ns": 303204,
      "overhead-ns": 303204,
      "exec-ns": 247027,
      "total-ns": 550231,
      "patts-hit": {},
      "rewritten": "y_pred_test = tweet_cleaned_test_df['text']\n"
    },
    {
      "raw": "# Saving result on test set\n# ALEX: remove ML code\noutput = pd.DataFrame({'Id': Id,\n                       'target': y_pred_test})\n\noutput.to_csv(r'submission.csv', index=False)",
      "rewrite-ns": 878645,
      "overhead-ns": 878645,
      "exec-ns": 149205041,
      "total-ns": 150083686,
      "patts-hit": {},
      "rewritten": "output = pd.DataFrame({'Id': Id, 'target': y_pred_test})\noutput.to_csv('submission.csv', index=False)\n"
    },
    {
      "raw": "",
      "rewrite-ns": 14022,
      "overhead-ns": 14022,
      "exec-ns": 75886,
      "total-ns": 89908,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "",
      "rewrite-ns": 10728,
      "overhead-ns": 10728,
      "exec-ns": 61328,
      "total-ns": 72056,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 21.896944846,
  "max-disk-in-mb": 0
}