{
  "max-mem-in-mb": 2529,
  "max-mem-in-mb2": 2689,
  "cells": [
    {
      "raw": "#importing libraries\n# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\n# ALEX: remove plotting\n# import seaborn as sns\n# import matplotlib\n# from matplotlib import pyplot as plt\n# %matplotlib inline\npd.pandas.set_option('display.max_columns',None)\npd.pandas.set_option('display.max_rows',None)\nimport warnings\nwarnings.filterwarnings('ignore')",
      "rewrite-ns": 1449557,
      "overhead-ns": 1449557,
      "exec-ns": 498991,
      "total-ns": 1948548,
      "patts-hit": {},
      "rewritten": "exec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\npd.pandas.set_option('display.max_columns', None)\npd.pandas.set_option('display.max_rows', None)\nimport warnings\nwarnings.filterwarnings('ignore')\n"
    },
    {
      "raw": "#loading dataset\ndata=pd.read_csv('./input/melb_data.scaled.csv')\ndf=data.copy()",
      "rewrite-ns": 631554,
      "overhead-ns": 631554,
      "exec-ns": 4112510707,
      "total-ns": 4113142261,
      "patts-hit": {},
      "rewritten": "data = pd.read_csv('./input/melb_data.scaled.csv')\ndf = data.copy()\n"
    },
    {
      "raw": "df.head()",
      "rewrite-ns": 172987,
      "overhead-ns": 172987,
      "exec-ns": 7045483,
      "total-ns": 7218470,
      "patts-hit": {},
      "rewritten": "df.head()\n"
    },
    {
      "raw": "df.describe().T",
      "rewrite-ns": 371395,
      "overhead-ns": 371395,
      "exec-ns": 937393201,
      "total-ns": 937764596,
      "patts-hit": {},
      "rewritten": "df.describe().T\n"
    },
    {
      "raw": "df.info()",
      "rewrite-ns": 109590,
      "overhead-ns": 109590,
      "exec-ns": 3480668,
      "total-ns": 3590258,
      "patts-hit": {},
      "rewritten": "df.info()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(10,8))\n# sns.heatmap(df.isnull(), cbar=False,cmap=\"Greens\");\n_ = df.isnull()",
      "rewrite-ns": 362994,
      "overhead-ns": 362994,
      "exec-ns": 1659540164,
      "total-ns": 1659903158,
      "patts-hit": {},
      "rewritten": "_ = df.isnull()\n"
    },
    {
      "raw": "# ALEX: make notebook run with input scaling\n# df.drop(['BuildingArea','Address'],axis=1).head(5)\ndf.drop(['BuildingArea','Address'],axis=1,errors='ignore').head(5)",
      "rewrite-ns": 848086,
      "overhead-ns": 848086,
      "exec-ns": 176572140,
      "total-ns": 177420226,
      "patts-hit": {},
      "rewritten": "df.drop(['BuildingArea', 'Address'], axis=1, errors='ignore').head(5)\n"
    },
    {
      "raw": "numerical_feature=[feature for feature in df.columns if df[feature].dtype !='object']\nprint('There are {} numerical features.'.format(len(numerical_feature)))\n\nyear=[feature for feature in numerical_feature if \"Yr\" in feature or \"Year\" in feature]\n\ndiscrete_feature=[feature for feature in numerical_feature if (df[feature].nunique())<25 and feature not in year+['Id']]\nprint('There are {} are discrete features'.format(len(discrete_feature)) )\n\ncontinuous_feature=[feature for feature in numerical_feature if feature not in discrete_feature and feature not in year+['Id']]\nprint('There are {} are continuous features'.format(len(continuous_feature)) )\n\ncat_feature=[feature for feature in df.columns if df[feature].dtypes=='object']\nprint('There are {} categorical features.'.format(len(cat_feature)))",
      "rewrite-ns": 5829546,
      "overhead-ns": 5829546,
      "exec-ns": 251009950,
      "total-ns": 256839496,
      "patts-hit": {},
      "rewritten": "numerical_feature = [feature for feature in df.columns if df[feature].dtype !=\n    'object']\nprint('There are {} numerical features.'.format(len(numerical_feature)))\nyear = [feature for feature in numerical_feature if 'Yr' in feature or \n    'Year' in feature]\ndiscrete_feature = [feature for feature in numerical_feature if df[feature]\n    .nunique() < 25 and feature not in year + ['Id']]\nprint('There are {} are discrete features'.format(len(discrete_feature)))\ncontinuous_feature = [feature for feature in numerical_feature if feature\n     not in discrete_feature and feature not in year + ['Id']]\nprint('There are {} are continuous features'.format(len(continuous_feature)))\ncat_feature = [feature for feature in df.columns if df[feature].dtypes ==\n    'object']\nprint('There are {} categorical features.'.format(len(cat_feature)))\n"
    },
    {
      "raw": "type={'h':'house','u':'unit','t':'townhouse'}\ndf=df.replace({'Type':type})",
      "rewrite-ns": 877820,
      "overhead-ns": 877820,
      "exec-ns": 441268271,
      "total-ns": 442146091,
      "patts-hit": {},
      "rewritten": "type = {'h': 'house', 'u': 'unit', 't': 'townhouse'}\ndf = df.replace({'Type': type})\n"
    },
    {
      "raw": "def outlier_function(df, col_name):\n    first_quartile = np.percentile(np.array(df[col_name].tolist()), 25)\n    third_quartile = np.percentile(np.array(df[col_name].tolist()), 75)\n    IQR = third_quartile - first_quartile\n                      \n    upper_limit = third_quartile+(3*IQR)\n    lower_limit = first_quartile-(3*IQR)\n    outlier_count = 0\n                      \n    for value in df[col_name].tolist():\n        if (value < lower_limit) | (value > upper_limit):\n            outlier_count +=1\n    return lower_limit, upper_limit, outlier_count\nfor feature in continuous_feature:\n    if outlier_function(df,feature)[2] > 1:\n        print('{}: {} outliers'.format(feature,outlier_function(df,feature)[2]))",
      "rewrite-ns": 4913703,
      "overhead-ns": 4913703,
      "exec-ns": 7483044165,
      "total-ns": 7487957868,
      "patts-hit": {},
      "rewritten": "def outlier_function(df, col_name):\n    first_quartile = np.percentile(np.array(df[col_name].tolist()), 25)\n    third_quartile = np.percentile(np.array(df[col_name].tolist()), 75)\n    IQR = third_quartile - first_quartile\n    upper_limit = third_quartile + 3 * IQR\n    lower_limit = first_quartile - 3 * IQR\n    outlier_count = 0\n    for value in df[col_name].tolist():\n        if (value < lower_limit) | (value > upper_limit):\n            outlier_count += 1\n    return lower_limit, upper_limit, outlier_count\nfor feature in continuous_feature:\n    if outlier_function(df, feature)[2] > 1:\n        print('{}: {} outliers'.format(feature, outlier_function(df,\n            feature)[2]))\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(10,8))\ncorr=df[continuous_feature].corr()\n# ALEX: remove plotting\n# plt.title('Correlation heatmap of continuous features',fontsize=15)\n# sns.heatmap(corr);",
      "rewrite-ns": 579577,
      "overhead-ns": 579577,
      "exec-ns": 496526769,
      "total-ns": 497106346,
      "patts-hit": {},
      "rewritten": "corr = df[continuous_feature].corr()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# fig, axarr = plt.subplots(2, 2, figsize=(12, 10))\n\n# sns.distplot(df['Price'],ax=axarr[0][0],color='blue',hist_kws=dict(edgecolor=\"k\", linewidth=2)).set_title('Distribution of Price')\n# sns.distplot(df['Distance'],ax=axarr[1][0],color='green',hist_kws=dict(edgecolor=\"k\", linewidth=2)).set_title('Distribution of Distance')\n# sns.distplot(np.log(df['Price']),ax=axarr[0][1],color='red',hist_kws=dict(edgecolor=\"k\", linewidth=2)).set_title('Distribution of Price(Transformed value on log scale)')\n# sns.distplot(df['Landsize'],ax=axarr[1][1],color='orange',hist_kws=dict(edgecolor=\"k\", linewidth=2)).set_title('Distribution of Landsize')\n# plt.subplots_adjust(hspace=.6)\n# sns.set_style('darkgrid')\n# sns.despine()\n\n_ = df['Price']\n_ = df['Distance']\n_ = np.log(df['Price'])\n_ = df['Landsize']",
      "rewrite-ns": 1255668,
      "overhead-ns": 1255668,
      "exec-ns": 4298060,
      "total-ns": 5553728,
      "patts-hit": {},
      "rewritten": "_ = df['Price']\n_ = df['Distance']\n_ = np.log(df['Price'])\n_ = df['Landsize']\n"
    },
    {
      "raw": "df['price_per_unit_area']=df['Price']/df['Landsize']",
      "rewrite-ns": 657777,
      "overhead-ns": 657777,
      "exec-ns": 6354790,
      "total-ns": 7012567,
      "patts-hit": {},
      "rewritten": "df['price_per_unit_area'] = df['Price'] / df['Landsize']\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(10,8))\n# sns.scatterplot(y=np.log(df['price_per_unit_area']),x=df['Distance'],data=df,hue='Regionname').set_title(\"Distance from property to CBD\",fontsize=20);\n_ = np.log(df['price_per_unit_area'])\n_ = df['Distance']",
      "rewrite-ns": 745400,
      "overhead-ns": 745400,
      "exec-ns": 6788404,
      "total-ns": 7533804,
      "patts-hit": {},
      "rewritten": "_ = np.log(df['price_per_unit_area'])\n_ = df['Distance']\n"
    },
    {
      "raw": "df[discrete_feature].head(3)",
      "rewrite-ns": 460488,
      "overhead-ns": 460488,
      "exec-ns": 167266721,
      "total-ns": 167727209,
      "patts-hit": {},
      "rewritten": "df[discrete_feature].head(3)\n"
    },
    {
      "raw": "for feature in discrete_feature:\n    if outlier_function(df,feature)[2] > 1:\n        print('{}: {} outliers'.format(feature,outlier_function(df,feature)[2]))",
      "rewrite-ns": 1327912,
      "overhead-ns": 1327912,
      "exec-ns": 3561508068,
      "total-ns": 3562835980,
      "patts-hit": {},
      "rewritten": "for feature in discrete_feature:\n    if outlier_function(df, feature)[2] > 1:\n        print('{}: {} outliers'.format(feature, outlier_function(df,\n            feature)[2]))\n"
    },
    {
      "raw": "df['Bedroom2']=df['Bedroom2'].astype('int')\ndf['Bathroom']=df['Bathroom'].astype('int')\ndf['Car']=df['Car'].astype('int',errors='ignore')\ndf['Car']=df['Car'].astype('int',errors='ignore')",
      "rewrite-ns": 2140160,
      "overhead-ns": 2140160,
      "exec-ns": 206699999,
      "total-ns": 208840159,
      "patts-hit": {},
      "rewritten": "df['Bedroom2'] = df['Bedroom2'].astype('int')\ndf['Bathroom'] = df['Bathroom'].astype('int')\ndf['Car'] = df['Car'].astype('int', errors='ignore')\ndf['Car'] = df['Car'].astype('int', errors='ignore')\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# fig, axarr = plt.subplots(2, 2, figsize=(14,10))\n# fig.suptitle('Property features',fontsize=15)\n\n# sns.countplot(df['Rooms'],ax=axarr[0][0],palette='cubehelix').set_title('No. of Rooms')\n# sns.countplot(df['Bedroom2'],ax=axarr[1][0],palette='cubehelix').set_title('No. of Bedrooms')\n# sns.boxplot(x=df['Bedroom2'],y=df['Price'],ax=axarr[1][1],palette='husl').set_title('Price with respect to number of bedrooms')\n# sns.boxplot(x=df['Rooms'],y=df['Price'],ax=axarr[0][1],palette='husl').set_title('Price with respect to no. of rooms')\n\n# plt.subplots_adjust(hspace=.4)\n# sns.set_style('darkgrid')\n# sns.despine()\n_ = df['Rooms']\n_ = df['Bedroom2']\n_ = df['Bedroom2']\n_ = df['Price']\n_ = df['Rooms']\n_ = df['Price']",
      "rewrite-ns": 1489129,
      "overhead-ns": 1489129,
      "exec-ns": 1304326,
      "total-ns": 2793455,
      "patts-hit": {},
      "rewritten": "_ = df['Rooms']\n_ = df['Bedroom2']\n_ = df['Bedroom2']\n_ = df['Price']\n_ = df['Rooms']\n_ = df['Price']\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# fig, axarr = plt.subplots(2, 2, figsize=(14, 10))\n# fig.suptitle('Property features',fontsize=15)\n\n# sns.countplot(df['Bathroom'],ax=axarr[0][0],palette='husl').set_title('No. of Bathrooms')\n# sns.violinplot(x= \"Bathroom\",y=\"Price\",data=df,palette=\"Set2\",ax=axarr[0][1]).set_title('No. of Bathrooms vs Price')\n# sns.countplot(df['Car'],ax=axarr[1][0],palette='husl').set_title('No.of Cars')\n# sns.boxenplot(x=\"Car\",y=\"Price\",data=df,palette=\"Set1\",ax=axarr[1][1]).set_title('No.of Cars vs Price');\n\n\n# plt.subplots_adjust(hspace=.4)\n# sns.set_style('darkgrid')\n# sns.despine()\n\n_ = df['Bathroom']\n_ = df['Car']",
      "rewrite-ns": 567989,
      "overhead-ns": 567989,
      "exec-ns": 330356,
      "total-ns": 898345,
      "patts-hit": {},
      "rewritten": "_ = df['Bathroom']\n_ = df['Car']\n"
    },
    {
      "raw": "df[cat_feature].head()",
      "rewrite-ns": 393631,
      "overhead-ns": 393631,
      "exec-ns": 308869157,
      "total-ns": 309262788,
      "patts-hit": {},
      "rewritten": "df[cat_feature].head()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(12,8))\n# g=sns.countplot(df['CouncilArea'],data=df,palette='Set2')\n# g.set_xticklabels(g.get_xticklabels(), rotation=90)\n# g.set_title('No.of properties in each Council Area',fontsize=15);\n_ = df['CouncilArea']",
      "rewrite-ns": 357995,
      "overhead-ns": 357995,
      "exec-ns": 363127,
      "total-ns": 721122,
      "patts-hit": {},
      "rewritten": "_ = df['CouncilArea']\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(10,8))\n# g=sns.stripplot(x=df['CouncilArea'],y=df['Price'],hue='Type',data=df,palette='Set1')\n# g.set_xticklabels(g.get_xticklabels(), rotation=90)\n# g.set_title('Preferred Council Area by Price',fontsize=15);\n_ = df['CouncilArea']\n_ = df['Price']",
      "rewrite-ns": 564303,
      "overhead-ns": 564303,
      "exec-ns": 341797,
      "total-ns": 906100,
      "patts-hit": {},
      "rewritten": "_ = df['CouncilArea']\n_ = df['Price']\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(10,6))\n# g=sns.countplot(df['Regionname'],hue='Type',data=df,palette='Set2')\n# g.set_xticklabels(g.get_xticklabels(), rotation=90)\n# g.set_title('Preferred region by property type',fontsize=15);\n\n_ = df['Regionname']",
      "rewrite-ns": 316763,
      "overhead-ns": 316763,
      "exec-ns": 294414,
      "total-ns": 611177,
      "patts-hit": {},
      "rewritten": "_ = df['Regionname']\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(10,8))\ng=df.groupby(['Regionname'])['Price'].mean().sort_values()\n# ALEX: remove plotting\n# g=sns.boxplot(x='Regionname', y='Price', data=df,order=list(g.index),palette='cubehelix')\n# g=sns.stripplot(x='Regionname', y='Price', data=df,color='orange',jitter=0.2,size=2.5)\n# g.set_xticklabels(g.get_xticklabels(), rotation=90)\n# plt.title('Price with respect to Region',fontsize=15);\n_ = list(g.index)",
      "rewrite-ns": 994902,
      "overhead-ns": 994902,
      "exec-ns": 111708809,
      "total-ns": 112703711,
      "patts-hit": {},
      "rewritten": "g = df.groupby(['Regionname'])['Price'].mean().sort_values()\n_ = list(g.index)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# fig, axs = plt.subplots(ncols=2,figsize=(15,6))\n\n# sns.boxplot(x=df['Method'],y=df['Price'],ax=axs[0],palette='cubehelix').set_title('Price vs Method')\n\n# sns.stripplot(x=df['Type'],y=df['Price'],ax=axs[1],palette='hls').set_title('Price vs Type');\n_ = df['Method']\n_ = df['Price']\n_ = df['Type']\n_ = df['Price']",
      "rewrite-ns": 1176174,
      "overhead-ns": 1176174,
      "exec-ns": 494181,
      "total-ns": 1670355,
      "patts-hit": {},
      "rewritten": "_ = df['Method']\n_ = df['Price']\n_ = df['Type']\n_ = df['Price']\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# fig, axarr = plt.subplots(2, 1, figsize=(12, 16))\n# fig.suptitle('Preferred Locations',fontsize=15)\n\n# sns.scatterplot(y=df['Lattitude'],x=df['Longtitude'],hue=df['Regionname'],palette='husl',ax=axarr[0]).set_title('Lattitude-Longitude, Regionname')\n# sns.scatterplot(y=df['Lattitude'],x=df['Longtitude'],hue=df['Type'],palette='Set1',ax=axarr[1]).set_title('Lattitude-Longitude,Type')\n# plt.show()\n_ = df['Lattitude']\n_ = df['Longtitude']\n_ = df['Regionname']\n_ = df['Lattitude']\n_ = df['Longtitude']\n_ = df['Type']",
      "rewrite-ns": 1464197,
      "overhead-ns": 1464197,
      "exec-ns": 545427,
      "total-ns": 2009624,
      "patts-hit": {},
      "rewritten": "_ = df['Lattitude']\n_ = df['Longtitude']\n_ = df['Regionname']\n_ = df['Lattitude']\n_ = df['Longtitude']\n_ = df['Type']\n"
    },
    {
      "raw": "# ALEX: make notebook run with input scaling\n# df=df.drop(index=9968,axis=1)\ndf=df.drop(index=9968,axis=1,errors='ignore')",
      "rewrite-ns": 553145,
      "overhead-ns": 553145,
      "exec-ns": 269953747,
      "total-ns": 270506892,
      "patts-hit": {},
      "rewritten": "df = df.drop(index=9968, axis=1, errors='ignore')\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# fig, axarr = plt.subplots(2, 1, figsize=(12, 10))\n\n# fig.suptitle('Trend in Price over the years',fontsize=20)\n\n# sns.lineplot(x='YearBuilt',y='Price',data=df,hue='Type',palette='Set1',ax=axarr[0])\n\n# sns.lineplot(x='YearBuilt',y='Price',data=df,hue='Regionname',palette='Set1',ax=axarr[1]);\n",
      "rewrite-ns": 28747,
      "overhead-ns": 28747,
      "exec-ns": 120726,
      "total-ns": 149473,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "def d_date(date):\n    return(date[-7:])\ndf['Date']=df['Date'].apply(d_date)",
      "rewrite-ns": 1085533,
      "overhead-ns": 1085533,
      "exec-ns": 508152776,
      "total-ns": 509238309,
      "patts-hit": {},
      "rewritten": "def d_date(date):\n    return date[-7:]\ndf['Date'] = df['Date'].apply(d_date)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(10,8))\n# gg=sns.countplot(df['Date'],palette='hls',hue='Type',data=df)\n# gg.set_xticklabels(gg.get_xticklabels(), rotation=70)\n# gg.set_title('Month and year of highest sale (2016-2017)',fontsize=15);\n\n_ = df['Date']",
      "rewrite-ns": 360609,
      "overhead-ns": 360609,
      "exec-ns": 41591416,
      "total-ns": 41952025,
      "patts-hit": {},
      "rewritten": "_ = df['Date']\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(10,8))\ng=df.groupby(['SellerG','Type','Method']).Price.sum().sort_values(ascending=False).head(20)\n# ALEX: remove plotting\n# g.plot(kind='barh',color='orange',title='Top realtors by Type and Method')\n# plt.xlabel('Price');\n",
      "rewrite-ns": 477649,
      "overhead-ns": 477649,
      "exec-ns": 347613445,
      "total-ns": 348091094,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "g = dias.rewriter.sort_head(called_on=df.groupby(['SellerG', 'Type',\n    'Method']).Price.sum(), by=None, n=20, asc=False, orig=lambda _DIAS_x:\n    _DIAS_x.sort_values(ascending=False).head(20))\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize=(16,10))\n# plt.title('Correlation heatmap', fontsize=20)\ncorr_matrix=df.corr()\nmask = np.zeros_like(corr_matrix)\nmask[np.triu_indices_from(mask)] = True\n# ALEX: remove plotting\n# sns.heatmap(corr_matrix,annot=True ,cbar = True,cmap=\"YlGnBu\",mask=mask);",
      "rewrite-ns": 1061060,
      "overhead-ns": 1061060,
      "exec-ns": 1228795166,
      "total-ns": 1229856226,
      "patts-hit": {},
      "rewritten": "corr_matrix = df.corr()\nmask = np.zeros_like(corr_matrix)\nmask[np.triu_indices_from(mask)] = True\n"
    }
  ],
  "total-time-in-sec": 22.375911461,
  "max-disk-in-mb": 0
}