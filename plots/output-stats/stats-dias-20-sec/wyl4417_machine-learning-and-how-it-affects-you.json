{
  "max-mem-in-mb": 4492,
  "max-mem-in-mb2": 5549,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# FIRST-AUTHOR: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('./input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.",
      "rewrite-ns": 504440,
      "overhead-ns": 504440,
      "exec-ns": 267571,
      "total-ns": 772011,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# import seaborn as sns\n# import numpy as np\n# import matplotlib.pyplot as plt\n# import cufflinks as cf\n# import seaborn.apionly as sns\n# import scipy as sp\n# import matplotlib.patches as mpatches\n# %matplotlib inline",
      "rewrite-ns": 13924,
      "overhead-ns": 13924,
      "exec-ns": 71005,
      "total-ns": 84929,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# import pandas as pd\nmulti = pd.read_csv(\"./input/multiple_choice_responses.scaled.csv\")\nmulti_2= pd.read_csv(\"./input/multiple_choice_responses.scaled.csv\")\nmulti_3= pd.read_csv(\"./input/multiple_choice_responses.scaled.csv\")",
      "rewrite-ns": 951954,
      "overhead-ns": 951954,
      "exec-ns": 8475964563,
      "total-ns": 8476916517,
      "patts-hit": {},
      "rewritten": "multi = pd.read_csv('./input/multiple_choice_responses.scaled.csv')\nmulti_2 = pd.read_csv('./input/multiple_choice_responses.scaled.csv')\nmulti_3 = pd.read_csv('./input/multiple_choice_responses.scaled.csv')\n"
    },
    {
      "raw": "#multiple ans question\nmulans= {'Q9' : range(11,19),'Q12' : range(22,34),'Q13' :range(35,47),'Q16':range(56,68),'Q17':range(69,81),'Q18':range(82,94),'Q20':range(97,109),'Q21':range(110,115),'Q24':range(118,130),'Q25':range(131,139),'Q26':range(140,147),'Q27':range(148,154),'Q28':range(155,167),'Q29':range(168,180),'Q30':range(181,193),'Q31':range(194,206),'Q32':range(207,219),'Q33':range(220,232),'Q34':range(233,245)}\n#one answer question\noneans= list(multi.columns[1:11])+list(multi.columns[20:22])+list(multi.columns[48:49])+list(multi.columns[55:56])+list(multi.columns[95:96])+list(multi.columns[116:117])+list(multi.columns[117:118])\n\nmulti.rename(columns ={'Time from Start to Finish (seconds)':'number'},inplace = True)\nmulti_2.rename(columns ={'Time from Start to Finish (seconds)':'number'},inplace = True)\nmulti_3.rename(columns ={'Time from Start to Finish (seconds)':'number'},inplace = True)\nmulti.columns",
      "rewrite-ns": 8326856,
      "overhead-ns": 8326856,
      "exec-ns": 3771272,
      "total-ns": 12098128,
      "patts-hit": {},
      "rewritten": "mulans = {'Q9': range(11, 19), 'Q12': range(22, 34), 'Q13': range(35, 47),\n    'Q16': range(56, 68), 'Q17': range(69, 81), 'Q18': range(82, 94), 'Q20':\n    range(97, 109), 'Q21': range(110, 115), 'Q24': range(118, 130), 'Q25':\n    range(131, 139), 'Q26': range(140, 147), 'Q27': range(148, 154), 'Q28':\n    range(155, 167), 'Q29': range(168, 180), 'Q30': range(181, 193), 'Q31':\n    range(194, 206), 'Q32': range(207, 219), 'Q33': range(220, 232), 'Q34':\n    range(233, 245)}\noneans = list(multi.columns[1:11]) + list(multi.columns[20:22]) + list(multi\n    .columns[48:49]) + list(multi.columns[55:56]) + list(multi.columns[95:96]\n    ) + list(multi.columns[116:117]) + list(multi.columns[117:118])\nmulti.rename(columns={'Time from Start to Finish (seconds)': 'number'},\n    inplace=True)\nmulti_2.rename(columns={'Time from Start to Finish (seconds)': 'number'},\n    inplace=True)\nmulti_3.rename(columns={'Time from Start to Finish (seconds)': 'number'},\n    inplace=True)\nmulti.columns\n"
    },
    {
      "raw": "def convert(s): \n    str1 = \"\" \n    return(str1.join(s)) \n\ndef item_name(x):\n    languages = []\n    for col in multi.iloc[0,mulans[x]]:\n        lal = col.split(\"-\")\n        doom = lal[2]\n        doom_2 = list(doom)\n        del doom_2[0]\n        doom_3 = convert(doom_2)\n        languages.append(doom_3)\n    return languages\n\ndef perfect(j):\n    nice = []\n    for col in list(multi.columns[mulans[j]]):\n        for col2 in item_name(j):\n            q_1 =multi.loc[multi[col] == col2]\n            q_1.rename(columns={col: j},inplace = True)\n            nice.append(q_1)\n    nice = pd.concat(nice)\n    return nice\nduit = perfect('Q9')",
      "rewrite-ns": 5457779,
      "overhead-ns": 5457779,
      "exec-ns": 1752841416,
      "total-ns": 1758299195,
      "patts-hit": {},
      "rewritten": "def convert(s):\n    str1 = ''\n    return str1.join(s)\ndef item_name(x):\n    languages = []\n    for col in multi.iloc[0, mulans[x]]:\n        lal = col.split('-')\n        doom = lal[2]\n        doom_2 = list(doom)\n        del doom_2[0]\n        doom_3 = convert(doom_2)\n        languages.append(doom_3)\n    return languages\ndef perfect(j):\n    nice = []\n    for col in list(multi.columns[mulans[j]]):\n        for col2 in item_name(j):\n            q_1 = multi.loc[multi[col] == col2]\n            q_1.rename(columns={col: j}, inplace=True)\n            nice.append(q_1)\n    nice = pd.concat(nice)\n    return nice\nduit = perfect('Q9')\n"
    },
    {
      "raw": "q9_2_d = multi.loc[multi['Q9_Part_2'] != 'Build and/or run the data infrastructure that my business uses for storing, analyzing, and operationalizing data']\nq9_3_d = q9_2_d.loc[q9_2_d['Q9_Part_3'] != 'Build prototypes to explore applying machine learning to new areas']\nq9_4_d = q9_3_d.loc[q9_3_d['Q9_Part_4'] != 'Build and/or run a machine learning service that operationally improves my product or workflows']\nq9_5_d = q9_4_d.loc[q9_4_d['Q9_Part_5'] != 'Experimentation and iteration to improve existing ML models']\nq9_6_d = q9_5_d.loc[q9_5_d['Q9_Part_6'] != 'Do research that advances the state of the art of machine learning']\nq9_7_d = q9_6_d.loc[q9_6_d['Q9_Part_7'] != 'None of these activities are an important part of my role at work']\nq9_8_d = q9_7_d.loc[q9_7_d['Q9_Part_8'] != 'Other']\nq9_9_d = q9_8_d.loc[q9_7_d['Q9_Part_1'] == 'Analyze and understand data to influence product or business decisions']\n\nwe = pd.pivot_table(q9_9_d,values=['number'], index=['Q8'],aggfunc= lambda x :len(x))\nwe_t = pd.pivot_table(duit,values=['number'], index=['Q8','Q9'],aggfunc= lambda x :len(x))\n\n\nwe_r = we_t.reset_index()\nwe_a = we_r.loc[we_r['Q9'] != 'Other']\nwe_b = we_a.set_index('Q8')\nwe_group = we_b.groupby('Q8').sum()\n\ndata = we['number']/we_group['number']\ndata_1 = data.reset_index()\ndata_2 = data_1.sort_values('number', ascending = False)\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize =(10,7))\n# axf = sns.barplot(x='Q8',y = 'number', data = data_2, palette = 'Spectral')\n# x_axis=range(4)\nlabels = data_2['Q8']\n# FIRST-AUTHOR: remove plotting\n# import textwrap\n# from  textwrap import fill\n# plt.xticks(x_axis, [textwrap.fill(label, 20) for label in labels], \n#            rotation = 0, fontsize=12, horizontalalignment=\"center\")\n# plt.title('Percentage of workers who analyse data only, for different companies with different levels of machine learning involvement', size = 10)\n# plt.ylabel(' % Number of Respondents',size = 10)\n# plt.xlabel('Figure 1',size = 10)\n_ = [label for label in labels]",
      "rewrite-ns": 8578187,
      "overhead-ns": 8578187,
      "exec-ns": 2767873940,
      "total-ns": 2776452127,
      "patts-hit": {},
      "rewritten": "q9_2_d = multi.loc[multi['Q9_Part_2'] !=\n    'Build and/or run the data infrastructure that my business uses for storing, analyzing, and operationalizing data'\n    ]\nq9_3_d = q9_2_d.loc[q9_2_d['Q9_Part_3'] !=\n    'Build prototypes to explore applying machine learning to new areas']\nq9_4_d = q9_3_d.loc[q9_3_d['Q9_Part_4'] !=\n    'Build and/or run a machine learning service that operationally improves my product or workflows'\n    ]\nq9_5_d = q9_4_d.loc[q9_4_d['Q9_Part_5'] !=\n    'Experimentation and iteration to improve existing ML models']\nq9_6_d = q9_5_d.loc[q9_5_d['Q9_Part_6'] !=\n    'Do research that advances the state of the art of machine learning']\nq9_7_d = q9_6_d.loc[q9_6_d['Q9_Part_7'] !=\n    'None of these activities are an important part of my role at work']\nq9_8_d = q9_7_d.loc[q9_7_d['Q9_Part_8'] != 'Other']\nq9_9_d = q9_8_d.loc[q9_7_d['Q9_Part_1'] ==\n    'Analyze and understand data to influence product or business decisions']\nwe = pd.pivot_table(q9_9_d, values=['number'], index=['Q8'], aggfunc=lambda\n    x: len(x))\nwe_t = pd.pivot_table(duit, values=['number'], index=['Q8', 'Q9'], aggfunc=\n    lambda x: len(x))\nwe_r = we_t.reset_index()\nwe_a = we_r.loc[we_r['Q9'] != 'Other']\nwe_b = we_a.set_index('Q8')\nwe_group = we_b.groupby('Q8').sum()\ndata = we['number'] / we_group['number']\ndata_1 = data.reset_index()\ndata_2 = data_1.sort_values('number', ascending=False)\nlabels = data_2['Q8']\n_ = [label for label in labels]\n"
    },
    {
      "raw": "multi['Q4'].replace({'Bachelor\u2019s degree':'University degree'\n                              ,'Doctoral degree':'University degree'\n                              ,'Master\u2019s degree':'University degree'\n                              ,'Professional degree':'University degree'\n                              ,'I prefer not to answer':'Without University degree'\n                              ,'No formal education past high school':'Without University degree'\n                             , 'Some college/university study without earning a bachelor\u2019s degree':'Without University degree'},inplace = True)\nplp = pd.pivot_table(multi[1:],values=['number'], index=['Q4','Q10'],aggfunc= lambda x :len(x))\nplp_1 = plp.unstack()\nplp_1.columns = plp_1.columns.droplevel()\nplp_2 = plp_1.transpose()\nplp_2 = plp_2.div(plp_2.sum())*100\nxaxis1 = [\"0 -1K\", \"1 - 2K\", \"2 - 3K\", \"3 - 4K\", \"4 - 5K\", \"5 - 7.5K\", \"7.5 - 10K\", \"10 - 15K\", \"15 - 20K\", \"20 - 25K\", \"25 - 30K\", \"30 - 40K\", \"40 - 50K\", \"50 - 60K\", \"60 - 70K\", \"70 - 80K\", \"80 - 90K\", \"90 - 100K\", \"100 - 125K\", \"125 - 150K\", \"150 - 200K\", \"200 - 250K\", \"250 - 300K\", \"300 - 500K\", \"> $500K\"]\nplp_3 = plp_2.rename(index = {'$0-999':'0-999','> $500,000':'greater than 500,000'})\nplp_4 = plp_3.reset_index()\nplp_4['length'] = plp_4['Q10'].str.len()\nplp_5 = plp_4.sort_values(['length','Q10'])\nplp_5['money'] = xaxis1\nplp_a = plp_5.set_index('money')\nplp_b = plp_a.drop(['Q10'],axis = 1)\nplp_6= plp_b.drop(columns=['length'])\n# FIRST-AUTHOR: remove plotting\n# axa = plp_6.plot(kind ='bar',stacked = False,figsize = (13,7),cmap = \"Set3\",alpha = 0.85, width = 0.85)\n# axa.legend(loc = 'center left',bbox_to_anchor =(1, 0.5))\n# axa.set_xticklabels(axa.get_xticklabels(), rotation=45)\n# plt.title('Compensation of respondents who graduated with / without a university degree ', size = 15)\n# plt.ylabel('% Number of Respondents',size = 13)\n# plt.xlabel('Figure 2',size = 10)",
      "rewrite-ns": 7431517,
      "overhead-ns": 7431517,
      "exec-ns": 76809157,
      "total-ns": 84240674,
      "patts-hit": {},
      "rewritten": "multi['Q4'].replace({'Bachelor\u2019s degree': 'University degree',\n    'Doctoral degree': 'University degree', 'Master\u2019s degree':\n    'University degree', 'Professional degree': 'University degree',\n    'I prefer not to answer': 'Without University degree',\n    'No formal education past high school': 'Without University degree',\n    'Some college/university study without earning a bachelor\u2019s degree':\n    'Without University degree'}, inplace=True)\nplp = pd.pivot_table(multi[1:], values=['number'], index=['Q4', 'Q10'],\n    aggfunc=lambda x: len(x))\nplp_1 = plp.unstack()\nplp_1.columns = plp_1.columns.droplevel()\nplp_2 = plp_1.transpose()\nplp_2 = plp_2.div(plp_2.sum()) * 100\nxaxis1 = ['0 -1K', '1 - 2K', '2 - 3K', '3 - 4K', '4 - 5K', '5 - 7.5K',\n    '7.5 - 10K', '10 - 15K', '15 - 20K', '20 - 25K', '25 - 30K', '30 - 40K',\n    '40 - 50K', '50 - 60K', '60 - 70K', '70 - 80K', '80 - 90K', '90 - 100K',\n    '100 - 125K', '125 - 150K', '150 - 200K', '200 - 250K', '250 - 300K',\n    '300 - 500K', '> $500K']\nplp_3 = plp_2.rename(index={'$0-999': '0-999', '> $500,000':\n    'greater than 500,000'})\nplp_4 = plp_3.reset_index()\nplp_4['length'] = plp_4['Q10'].str.len()\nplp_5 = plp_4.sort_values(['length', 'Q10'])\nplp_5['money'] = xaxis1\nplp_a = plp_5.set_index('money')\nplp_b = plp_a.drop(['Q10'], axis=1)\nplp_6 = plp_b.drop(columns=['length'])\n"
    },
    {
      "raw": "indx = 'Q5' #Approximately how much money have you spent on machine learning and/or cloud computing products at your work in the past 5 years?\ndef convert(s): \n    str1 = \"\" \n    return(str1.join(s)) \n\nif indx in oneans:\n    bob = pd.pivot_table(multi[1:],values=['number'], index=indx,aggfunc= lambda x :len(x))\nelse:\n    win=[]\n    for col in multi.iloc[0,mulans[indx]]:\n        lal = col.split(\"-\")\n        doom = lal[2]\n        doom_2 = list(doom)\n        del doom_2[0]\n        doom_3 = convert(doom_2)\n        win.append(doom_3)\n    \n    result = []\n    for col in mulans[indx]:\n        we =[]\n        for row in range(1,19718):\n            lal = multi.iloc[row,col]\n            we.append(lal)\n        withoutna = [x for x in we if str(x) != 'nan']\n        result.append(len(withoutna))\n    bob=pd.DataFrame(data=result,index=win) \nbob_1 = bob.reset_index()\nbob_2 = bob_1.sort_values('number')\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize = (13,8))\n# axs = sns.barplot(x='Q5',y = 'number', data = bob_2, palette = 'Spectral')\n# for p in axs.patches:\n#     axs.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() / 2., p.get_height()), ha = 'center', va = 'top', xytext = (0, 10), textcoords = 'offset points')\n# plt.title('Jobs of respondents of the survey',size = 15)\n# plt.ylabel('Number of respondents',size = 13)\n# x_axis = range(12)\nlabels = bob_2['Q5']\n# FIRST-AUTHOR: remove plotting\n# import textwrap\n# from  textwrap import fill\n# plt.xticks(x_axis, [textwrap.fill(label, 13) for label in labels], \n#            rotation = 0, fontsize=12, horizontalalignment=\"center\")\n# axs.set_xticklabels(axs.get_xticklabels(), rotation = 50)\n# plt.xlabel('Figure 3',size = 10)\n_ = [label for label in labels]",
      "rewrite-ns": 7280481,
      "overhead-ns": 7280481,
      "exec-ns": 23085292,
      "total-ns": 30365773,
      "patts-hit": {},
      "rewritten": "indx = 'Q5'\ndef convert(s):\n    str1 = ''\n    return str1.join(s)\nif indx in oneans:\n    bob = pd.pivot_table(multi[1:], values=['number'], index=indx, aggfunc=\n        lambda x: len(x))\nelse:\n    win = []\n    for col in multi.iloc[0, mulans[indx]]:\n        lal = col.split('-')\n        doom = lal[2]\n        doom_2 = list(doom)\n        del doom_2[0]\n        doom_3 = convert(doom_2)\n        win.append(doom_3)\n    result = []\n    for col in mulans[indx]:\n        we = []\n        for row in range(1, 19718):\n            lal = multi.iloc[row, col]\n            we.append(lal)\n        withoutna = [x for x in we if str(x) != 'nan']\n        result.append(len(withoutna))\n    bob = pd.DataFrame(data=result, index=win)\nbob_1 = bob.reset_index()\nbob_2 = bob_1.sort_values('number')\nlabels = bob_2['Q5']\n_ = [label for label in labels]\n"
    },
    {
      "raw": "student_compare = pd.pivot_table(multi_2[1:],values=['number'], index=['Q5','Q15'],aggfunc= lambda x :len(x))\nsc = student_compare.loc['Student']\nsc_1 = sc.loc['I have never written code']\nsc_2 = sc.iloc[0:6]\nsc_3 = sc_2.sum()\nsc_4 = pd.concat([sc_1,sc_3],axis =1)\nsc_4.rename(columns={0: \"Students who have written code\",'I have never written code':'Students who never written code'},inplace = True)\nsc_4.rename(index={'number': \"student\"},inplace = True)\nsc_5 = sc_4.transpose()\npie_label = sc_5['student'].sort_values().index\npie_counts = sc_5['student'].sort_values()\n# FIRST-AUTHOR: remove plotting\n# cmap = plt.get_cmap('Set3')\n# colors = [cmap(i) for i in np.linspace(0, 1, 8)]\n# student_pit = plt.pie(pie_counts, labels = pie_label, autopct='%1.1f%%', shadow=True, colors=colors)\n# plt.title('Percentage of students who have written code / never written code before',size = 13)\n# plt.xlabel('Figure 4',size = 10)",
      "rewrite-ns": 4602144,
      "overhead-ns": 4602144,
      "exec-ns": 39169914,
      "total-ns": 43772058,
      "patts-hit": {},
      "rewritten": "student_compare = pd.pivot_table(multi_2[1:], values=['number'], index=[\n    'Q5', 'Q15'], aggfunc=lambda x: len(x))\nsc = student_compare.loc['Student']\nsc_1 = sc.loc['I have never written code']\nsc_2 = sc.iloc[0:6]\nsc_3 = sc_2.sum()\nsc_4 = pd.concat([sc_1, sc_3], axis=1)\nsc_4.rename(columns={(0): 'Students who have written code',\n    'I have never written code': 'Students who never written code'},\n    inplace=True)\nsc_4.rename(index={'number': 'student'}, inplace=True)\nsc_5 = sc_4.transpose()\npie_label = sc_5['student'].sort_values().index\npie_counts = sc_5['student'].sort_values()\n"
    },
    {
      "raw": "duit = perfect('Q9')\nbusiness_duit =  pd.pivot_table(duit,values=['number'], index=['Q5','Q9'],aggfunc= lambda x :len(x))\n\nst = business_duit.loc['Business Analyst']\nst_1 = st.reset_index()\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize = (13,8))\n# axy = sns.barplot(x='Q9',y = 'number', data = st_1, palette = 'Spectral')\n# for p in axy.patches:\n#     axy.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() / 2., p.get_height()), ha = 'center', va = 'top', xytext = (0, 10), textcoords = 'offset points')\n# plt.title('Job scope of respondents who are business analysts' , size = 15)\n# plt.xlabel('Figure 5',size = 13)\n# plt.ylabel('Number of respondents',size = 13)\n# x_axis = range(8)\nlabels = st_1['Q9']\n# FIRST-AUTHOR: remove plotting\n# import textwrap\n# from  textwrap import fill\n# plt.xticks(x_axis, [textwrap.fill(label, 13) for label in labels], \n#            rotation = 0, fontsize=12, horizontalalignment=\"center\")\n\n# plt.xlabel('Figure 5',size = 10)\n_ = [label for label in labels]\n",
      "rewrite-ns": 2408204,
      "overhead-ns": 2408204,
      "exec-ns": 3031848433,
      "total-ns": 3034256637,
      "patts-hit": {},
      "rewritten": "duit = perfect('Q9')\nbusiness_duit = pd.pivot_table(duit, values=['number'], index=['Q5', 'Q9'],\n    aggfunc=lambda x: len(x))\nst = business_duit.loc['Business Analyst']\nst_1 = st.reset_index()\nlabels = st_1['Q9']\n_ = [label for label in labels]\n"
    },
    {
      "raw": "research = pd.pivot_table(multi_3[1:],values=['number'], index=['Q9_Part_6','Q4'],aggfunc= lambda x :len(x))\nresearch_1 = research.reset_index()\nresearch_2 = research_1.sort_values('number')\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize = (12,8))\n# re = sns.barplot(x='Q4',y = 'number', data = research_2, palette = 'Spectral')\n# for p in re.patches:\n#     re.annotate(format(p.get_height(), '.1f'), (p.get_x() + p.get_width() / 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\nlabels = research_2['Q4']\n# FIRST-AUTHOR: remove plotting\n# x_axis=range(8)\n# import textwrap\n# from  textwrap import fill\n# plt.xticks(x_axis, [textwrap.fill(label, 13) for label in labels], \n#            rotation = 0, fontsize=12, horizontalalignment=\"center\")\n# plt.title('Education level of respondents who does research in state of art machine learning' , size = 15)\n# plt.ylabel('Number of respondents',size = 13)\n# plt.xlabel('Figure 6',size = 10)\n_ = [label for label in labels]",
      "rewrite-ns": 2236408,
      "overhead-ns": 2236408,
      "exec-ns": 33178228,
      "total-ns": 35414636,
      "patts-hit": {},
      "rewritten": "research = pd.pivot_table(multi_3[1:], values=['number'], index=[\n    'Q9_Part_6', 'Q4'], aggfunc=lambda x: len(x))\nresearch_1 = research.reset_index()\nresearch_2 = research_1.sort_values('number')\nlabels = research_2['Q4']\n_ = [label for label in labels]\n"
    },
    {
      "raw": "toom = pd.pivot_table(multi[1:],values=['number'], index=['Q23','Q10'],aggfunc= lambda x :len(x))\ntoom_1 = toom.unstack()\ntoom_1.columns = toom_1.columns.droplevel()\ntoom_1 = toom_1.reindex(index = ['< 1 years',\n '1-2 years',\n'2-3 years',\n '3-4 years',\n'4-5 years',\n '5-10 years',\n '10-15 years',\n '20+ years'])\n\ntoom_1 = toom_1[['$0-999',\n '1,000-1,999',\n '2,000-2,999',\n '3,000-3,999',\n '4,000-4,999',\n '5,000-7,499',\n '7,500-9,999',\n '10,000-14,999',\n '15,000-19,999',\n '20,000-24,999',\n '25,000-29,999',\n '30,000-39,999',\n '40,000-49,999',\n '50,000-59,999',\n '60,000-69,999',\n '70,000-79,999',\n '80,000-89,999',\n '90,000-99,999',\n '100,000-124,999',\n '125,000-149,999',\n '150,000-199,999',\n '200,000-249,999',\n '250,000-299,999',\n '300,000-500,000','> $500,000']]\n\ntoom_1 = toom_1.div(toom_1.sum())\ntoom_2 = toom_1.transpose()\ntoom_3 = toom_2.reset_index()\nxaxis1 = [\"0 -1K\", \"1 - 2K\", \"2 - 3K\", \"3 - 4K\", \"4 - 5K\", \"5 - 7.5K\", \"7.5 - 10K\", \"10 - 15K\", \"15 - 20K\", \"20 - 25K\", \"25 - 30K\", \"30 - 40K\", \"40 - 50K\", \"50 - 60K\", \"60 - 70K\", \"70 - 80K\", \"80 - 90K\", \"90 - 100K\", \"100 - 125K\", \"125 - 150K\", \"150 - 200K\", \"200 - 250K\", \"250 - 300K\", \"300 - 500K\", \"> $500K\"]\ntoom_3['money'] = xaxis1\ntoom_4 = toom_3.set_index('money')\ntoom_4 = toom_4.drop(['Q10'],axis = 1)\n\n# FIRST-AUTHOR: remove plotting\n# axm = toom_4.plot(kind ='bar',stacked =True,figsize = (13,7),cmap = \"Set3\",alpha = 0.85, width = 0.85)\n# axm.legend(loc = 'center left',bbox_to_anchor =(1, 0.5))\n# axm.set_xticklabels(axm.get_xticklabels(), rotation=45)\n# plt.title('Correlation between machine learning experience, number of respondents and yearly income', size = 15)\n# plt.ylabel(' % Number of Respondents',size = 13)\n# plt.xlabel('Figure 7',size = 10)",
      "rewrite-ns": 6360760,
      "overhead-ns": 6360760,
      "exec-ns": 41653377,
      "total-ns": 48014137,
      "patts-hit": {},
      "rewritten": "toom = pd.pivot_table(multi[1:], values=['number'], index=['Q23', 'Q10'],\n    aggfunc=lambda x: len(x))\ntoom_1 = toom.unstack()\ntoom_1.columns = toom_1.columns.droplevel()\ntoom_1 = toom_1.reindex(index=['< 1 years', '1-2 years', '2-3 years',\n    '3-4 years', '4-5 years', '5-10 years', '10-15 years', '20+ years'])\ntoom_1 = toom_1[['$0-999', '1,000-1,999', '2,000-2,999', '3,000-3,999',\n    '4,000-4,999', '5,000-7,499', '7,500-9,999', '10,000-14,999',\n    '15,000-19,999', '20,000-24,999', '25,000-29,999', '30,000-39,999',\n    '40,000-49,999', '50,000-59,999', '60,000-69,999', '70,000-79,999',\n    '80,000-89,999', '90,000-99,999', '100,000-124,999', '125,000-149,999',\n    '150,000-199,999', '200,000-249,999', '250,000-299,999',\n    '300,000-500,000', '> $500,000']]\ntoom_1 = toom_1.div(toom_1.sum())\ntoom_2 = toom_1.transpose()\ntoom_3 = toom_2.reset_index()\nxaxis1 = ['0 -1K', '1 - 2K', '2 - 3K', '3 - 4K', '4 - 5K', '5 - 7.5K',\n    '7.5 - 10K', '10 - 15K', '15 - 20K', '20 - 25K', '25 - 30K', '30 - 40K',\n    '40 - 50K', '50 - 60K', '60 - 70K', '70 - 80K', '80 - 90K', '90 - 100K',\n    '100 - 125K', '125 - 150K', '150 - 200K', '200 - 250K', '250 - 300K',\n    '300 - 500K', '> $500K']\ntoom_3['money'] = xaxis1\ntoom_4 = toom_3.set_index('money')\ntoom_4 = toom_4.drop(['Q10'], axis=1)\n"
    },
    {
      "raw": "boom = pd.pivot_table(multi[1:],values=['number'], index=['Q10','Q15'],aggfunc= lambda x :len(x))\nboom_1 = boom.unstack()\nboom_1.columns = boom_1.columns.droplevel()\nboom_2 = boom_1.rename(index = {'$0-999':'0-999','> $500,000':'greater than 500,000'})\nboom_3 = boom_2.reset_index()\nxaxis1 = [\"0 -1K\", \"1 - 2K\", \"2 - 3K\", \"3 - 4K\", \"4 - 5K\", \"5 - 7.5K\", \"7.5 - 10K\", \"10 - 15K\", \"15 - 20K\", \"20 - 25K\", \"25 - 30K\", \"30 - 40K\", \"40 - 50K\", \"50 - 60K\", \"60 - 70K\", \"70 - 80K\", \"80 - 90K\", \"90 - 100K\", \"100 - 125K\", \"125 - 150K\", \"150 - 200K\", \"200 - 250K\", \"250 - 300K\", \"300 - 500K\", \"> $500K\"]\nboom_3['length'] = boom_3['Q10'].str.len()\nboom_4 = boom_3.sort_values(['length','Q10'])\nboom_5= boom_4.drop(columns=['length'])\nboom_5['money'] = xaxis1\nboom_6 = boom_5.set_index('money')\nboom_6 = boom_6[['I have never written code', '< 1 years','1-2 years','3-5 years','5-10 years','10-20 years','20+ years']]\nboom_7 = boom_6.transpose()\nboom_7 = boom_7.div(boom_7.sum())\ntoom_3['money'] = xaxis1\nboom_8=boom_7.transpose()\n# FIRST-AUTHOR: remove plotting\n# axn = boom_8.plot(kind ='bar',stacked =True,figsize = (13,7),cmap = \"Set3\",alpha = 0.85, width = 0.85)\n# axn.legend(loc = 'center left',bbox_to_anchor =(1, 0.5))\n# axn.set_xticklabels(axn.get_xticklabels(), rotation=45)\n# plt.title('Correlation between coding experience, number of respondents and yearly income', size = 15)\n# plt.ylabel(' % Number of Respondents',size = 13)\n# plt.xlabel('Figure 8',size = 10)",
      "rewrite-ns": 6790645,
      "overhead-ns": 6790645,
      "exec-ns": 42109804,
      "total-ns": 48900449,
      "patts-hit": {},
      "rewritten": "boom = pd.pivot_table(multi[1:], values=['number'], index=['Q10', 'Q15'],\n    aggfunc=lambda x: len(x))\nboom_1 = boom.unstack()\nboom_1.columns = boom_1.columns.droplevel()\nboom_2 = boom_1.rename(index={'$0-999': '0-999', '> $500,000':\n    'greater than 500,000'})\nboom_3 = boom_2.reset_index()\nxaxis1 = ['0 -1K', '1 - 2K', '2 - 3K', '3 - 4K', '4 - 5K', '5 - 7.5K',\n    '7.5 - 10K', '10 - 15K', '15 - 20K', '20 - 25K', '25 - 30K', '30 - 40K',\n    '40 - 50K', '50 - 60K', '60 - 70K', '70 - 80K', '80 - 90K', '90 - 100K',\n    '100 - 125K', '125 - 150K', '150 - 200K', '200 - 250K', '250 - 300K',\n    '300 - 500K', '> $500K']\nboom_3['length'] = boom_3['Q10'].str.len()\nboom_4 = boom_3.sort_values(['length', 'Q10'])\nboom_5 = boom_4.drop(columns=['length'])\nboom_5['money'] = xaxis1\nboom_6 = boom_5.set_index('money')\nboom_6 = boom_6[['I have never written code', '< 1 years', '1-2 years',\n    '3-5 years', '5-10 years', '10-20 years', '20+ years']]\nboom_7 = boom_6.transpose()\nboom_7 = boom_7.div(boom_7.sum())\ntoom_3['money'] = xaxis1\nboom_8 = boom_7.transpose()\n"
    },
    {
      "raw": "q9_2_d = multi.loc[multi['Q9_Part_2'] != 'Build and/or run the data infrastructure that my business uses for storing, analyzing, and operationalizing data']\nq9_3_d = q9_2_d.loc[q9_2_d['Q9_Part_3'] != 'Build prototypes to explore applying machine learning to new areas']\nq9_4_d = q9_3_d.loc[q9_3_d['Q9_Part_4'] != 'Build and/or run a machine learning service that operationally improves my product or workflows']\nq9_5_d = q9_4_d.loc[q9_4_d['Q9_Part_5'] != 'Experimentation and iteration to improve existing ML models']\nq9_6_d = q9_5_d.loc[q9_5_d['Q9_Part_6'] != 'Do research that advances the state of the art of machine learning']\nq9_7_d = q9_6_d.loc[q9_6_d['Q9_Part_7'] != 'None of these activities are an important part of my role at work']\nq9_8_d = q9_7_d.loc[q9_7_d['Q9_Part_8'] != 'Other']\nq9_9_d = q9_8_d.loc[q9_7_d['Q9_Part_1'] == 'Analyze and understand data to influence product or business decisions']\n\nyear = pd.pivot_table(q9_9_d[1:],values=['number'], index=['Q10'],aggfunc= lambda x :len(x))\nyear.rename(columns={\"number\": \"analyze data only\"},inplace = True)\nyear_1 = year.rename(index = {'$0-999':'0-999','> $500,000':'greater than 500,000'})\nyear_1.reset_index(inplace= True)\nyear_1['length'] = year_1['Q10'].str.len()\nyear_2 = year_1.sort_values(['length','Q10'])\nyear_3= year_2.drop(columns=['length'])\nyear_3.set_index('Q10',inplace=True)\n\nyear_tot = pd.pivot_table(multi[1:],values=['number'], index=['Q10'],aggfunc= lambda x :len(x))\nyear_tot.rename(columns={\"number\": \"all\"},inplace = True)\n\nyear_tot_1 = year_tot.rename(index = {'$0-999':'0-999','> $500,000':'greater than 500,000'})\nyear_tot_1.reset_index(inplace= True)\nyear_tot_1['length'] = year_tot_1['Q10'].str.len()\nyear_tot_2 = year_tot_1.sort_values(['length','Q10'])\nyear_tot_3= year_tot_2.drop(columns=['length'])\nyear_tot_3.set_index('Q10',inplace=True)\n\ntgt = pd.concat([year_tot_3,year_3],axis = 1)\ntgt_1 = tgt.reset_index()\ntgt_1['total'] = tgt_1['all'] + tgt_1['analyze data only']\ntgt_1['% all'] = tgt_1['all']/tgt_1['total']\ntgt_1['% analyze data only'] = tgt_1['analyze data only']/tgt_1['total']\ntgt_2 = tgt_1.drop(columns=['all', 'analyze data only','total'])\ntgt_3 = tgt_2.set_index('Q10')\n# FIRST-AUTHOR: remove plotting\n# ax4 = tgt_3.plot(kind ='bar',stacked = True,figsize = (13,7),rot = 1,cmap = \"Set3\",alpha = 0.85, width = 0.85,label = xaxis1)\n# ax4.legend(loc = 'center left',bbox_to_anchor =(1, 0.5)) \nlabels = research_2['Q4']\n# FIRST-AUTHOR: remove plotting\n# x_axis=range(8)\n# ax4.set_xticklabels(axn.get_xticklabels(), rotation=45)\n# plt.xlabel('Figure 9',size = 10)\n",
      "rewrite-ns": 14110786,
      "overhead-ns": 14110786,
      "exec-ns": 2301951040,
      "total-ns": 2316061826,
      "patts-hit": {},
      "rewritten": "q9_2_d = multi.loc[multi['Q9_Part_2'] !=\n    'Build and/or run the data infrastructure that my business uses for storing, analyzing, and operationalizing data'\n    ]\nq9_3_d = q9_2_d.loc[q9_2_d['Q9_Part_3'] !=\n    'Build prototypes to explore applying machine learning to new areas']\nq9_4_d = q9_3_d.loc[q9_3_d['Q9_Part_4'] !=\n    'Build and/or run a machine learning service that operationally improves my product or workflows'\n    ]\nq9_5_d = q9_4_d.loc[q9_4_d['Q9_Part_5'] !=\n    'Experimentation and iteration to improve existing ML models']\nq9_6_d = q9_5_d.loc[q9_5_d['Q9_Part_6'] !=\n    'Do research that advances the state of the art of machine learning']\nq9_7_d = q9_6_d.loc[q9_6_d['Q9_Part_7'] !=\n    'None of these activities are an important part of my role at work']\nq9_8_d = q9_7_d.loc[q9_7_d['Q9_Part_8'] != 'Other']\nq9_9_d = q9_8_d.loc[q9_7_d['Q9_Part_1'] ==\n    'Analyze and understand data to influence product or business decisions']\nyear = pd.pivot_table(q9_9_d[1:], values=['number'], index=['Q10'], aggfunc\n    =lambda x: len(x))\nyear.rename(columns={'number': 'analyze data only'}, inplace=True)\nyear_1 = year.rename(index={'$0-999': '0-999', '> $500,000':\n    'greater than 500,000'})\nyear_1.reset_index(inplace=True)\nyear_1['length'] = year_1['Q10'].str.len()\nyear_2 = year_1.sort_values(['length', 'Q10'])\nyear_3 = year_2.drop(columns=['length'])\nyear_3.set_index('Q10', inplace=True)\nyear_tot = pd.pivot_table(multi[1:], values=['number'], index=['Q10'],\n    aggfunc=lambda x: len(x))\nyear_tot.rename(columns={'number': 'all'}, inplace=True)\nyear_tot_1 = year_tot.rename(index={'$0-999': '0-999', '> $500,000':\n    'greater than 500,000'})\nyear_tot_1.reset_index(inplace=True)\nyear_tot_1['length'] = year_tot_1['Q10'].str.len()\nyear_tot_2 = year_tot_1.sort_values(['length', 'Q10'])\nyear_tot_3 = year_tot_2.drop(columns=['length'])\nyear_tot_3.set_index('Q10', inplace=True)\ntgt = pd.concat([year_tot_3, year_3], axis=1)\ntgt_1 = tgt.reset_index()\ntgt_1['total'] = tgt_1['all'] + tgt_1['analyze data only']\ntgt_1['% all'] = tgt_1['all'] / tgt_1['total']\ntgt_1['% analyze data only'] = tgt_1['analyze data only'] / tgt_1['total']\ntgt_2 = tgt_1.drop(columns=['all', 'analyze data only', 'total'])\ntgt_3 = tgt_2.set_index('Q10')\nlabels = research_2['Q4']\n"
    },
    {
      "raw": "indx = 'Q15' #Approximately how much money have you spent on machine learning and/or cloud computing products at your work in the past 5 years?\ndef convert(s): \n    str1 = \"\" \n    return(str1.join(s)) \n\nif indx in oneans:\n    tob = pd.pivot_table(multi_3[1:],values=['number'], index=indx,aggfunc= lambda x :len(x))\nelse:\n    win=[]\n    for col in multi_3.iloc[0,mulans[indx]]:\n        lal = col.split(\"-\")\n        doom = lal[2]\n        doom_2 = list(doom)\n        del doom_2[0]\n        doom_3 = convert(doom_2)\n        win.append(doom_3)\n    \n    result = []\n    for col in mulans[indx]:\n        we =[]\n        for row in range(1,19718):\n            lal = multi_3.iloc[row,col]\n            we.append(lal)\n        withoutna = [x for x in we if str(x) != 'nan']\n        result.append(len(withoutna))\n    tob=pd.DataFrame(data=result,index=win) \n\ntob_1= tob.reindex (index = ['I have never written code', '< 1 years','1-2 years','3-5 years','5-10 years','10-20 years','20+ years'])\ntob_2 = tob_1.reset_index()\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize = (12,8))\n# axc = sns.barplot(x='Q15',y = 'number', data = tob_2, palette = 'Spectral')\n# for p in axc.patches:\n#     axc.annotate(format(p.get_height(), '.1f'), (p.get_x() + p.get_width() / 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\n    \n# plt.title('Coding experience', size = 15)\n# plt.ylabel('Number of respondents',size = 13)\n# plt.xlabel('Figure 10',size = 10)\n",
      "rewrite-ns": 7064982,
      "overhead-ns": 7064982,
      "exec-ns": 22376751,
      "total-ns": 29441733,
      "patts-hit": {},
      "rewritten": "indx = 'Q15'\ndef convert(s):\n    str1 = ''\n    return str1.join(s)\nif indx in oneans:\n    tob = pd.pivot_table(multi_3[1:], values=['number'], index=indx,\n        aggfunc=lambda x: len(x))\nelse:\n    win = []\n    for col in multi_3.iloc[0, mulans[indx]]:\n        lal = col.split('-')\n        doom = lal[2]\n        doom_2 = list(doom)\n        del doom_2[0]\n        doom_3 = convert(doom_2)\n        win.append(doom_3)\n    result = []\n    for col in mulans[indx]:\n        we = []\n        for row in range(1, 19718):\n            lal = multi_3.iloc[row, col]\n            we.append(lal)\n        withoutna = [x for x in we if str(x) != 'nan']\n        result.append(len(withoutna))\n    tob = pd.DataFrame(data=result, index=win)\ntob_1 = tob.reindex(index=['I have never written code', '< 1 years',\n    '1-2 years', '3-5 years', '5-10 years', '10-20 years', '20+ years'])\ntob_2 = tob_1.reset_index()\n"
    },
    {
      "raw": "w = perfect('Q9')\ncount_q9 = pd.pivot_table(w[1:],values=['number'], index=['Q3','Q9'],aggfunc= lambda x :len(x))\nq9_india = count_q9.iloc[150:158]\nq9_india_1 = q9_india.unstack(level = -1)\nq9_usa = count_q9.iloc[435:443]\nq9_usa_1 = q9_usa.unstack(level = -1)\nq9_tpt = pd.concat([q9_india_1,q9_usa_1])\nq9_tpt.columns = q9_tpt.columns.droplevel()\nq9_tot = q9_tpt.transpose()\nq9_tot = q9_tot.div(q9_tot.sum())*100\nq9_tot_1 = q9_tot.reset_index()\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize = (13,8))\n# axr = q9_tot_1.plot(kind ='bar',stacked = False,figsize = (13,7),cmap = \"Set3\",alpha = 0.85, width = 0.70)\n# axr.legend(loc = 'center left',bbox_to_anchor =(1, 0.5))\nlabels = q9_tot.index\n# FIRST-AUTHOR: remove plotting\n# x_axis=range(8)\n# import textwrap\n# from  textwrap import fill\n# plt.xticks(x_axis, [textwrap.fill(label, 13) for label in labels], \n#            rotation = 0, fontsize=12, horizontalalignment=\"center\")\n# for p in axr.patches:\n#     axr.annotate(format(p.get_height(), '.1f'), (p.get_x() + p.get_width() / 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\n# plt.title('India and USA', size = 15)\n# plt.ylabel(' % Number of Respondents',size = 13)\n# plt.xlabel('Figure 11',size = 10)\n_ = [label for label in labels]",
      "rewrite-ns": 5272749,
      "overhead-ns": 5272749,
      "exec-ns": 2863019027,
      "total-ns": 2868291776,
      "patts-hit": {},
      "rewritten": "w = perfect('Q9')\ncount_q9 = pd.pivot_table(w[1:], values=['number'], index=['Q3', 'Q9'],\n    aggfunc=lambda x: len(x))\nq9_india = count_q9.iloc[150:158]\nq9_india_1 = q9_india.unstack(level=-1)\nq9_usa = count_q9.iloc[435:443]\nq9_usa_1 = q9_usa.unstack(level=-1)\nq9_tpt = pd.concat([q9_india_1, q9_usa_1])\nq9_tpt.columns = q9_tpt.columns.droplevel()\nq9_tot = q9_tpt.transpose()\nq9_tot = q9_tot.div(q9_tot.sum()) * 100\nq9_tot_1 = q9_tot.reset_index()\nlabels = q9_tot.index\n_ = [label for label in labels]\n"
    },
    {
      "raw": "count_q5 = pd.pivot_table(multi[1:],values=['number'], index=['Q3','Q5'],aggfunc= lambda x :len(x))\n\nq5_india = count_q5.iloc[222:234]\nq5_usa = count_q5.iloc[635:647]\nq5_india_1 = q5_india.unstack(level = -1)\nq5_usa_1 = q5_usa.unstack(level = -1)\nq5_tpt = pd.concat([q5_india_1,q5_usa_1])\nq5_tpt.columns = q5_tpt.columns.droplevel()\nq5_tot = q5_tpt.transpose()\nq5_tot = q5_tot.div(q5_tot.sum())*100\nq5_tot_1 = q5_tot.reset_index()\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize = (13,8))\n# axr = q5_tot_1.plot(kind ='bar',stacked = False,figsize = (13,7),cmap = \"Set3\",alpha = 0.85, width = 0.70)\n# axr.legend(loc = 'center left',bbox_to_anchor =(1, 0.5))\nlabels = q5_tot.index\n# FIRST-AUTHOR: remove plotting\n# x_axis=range(12)\n# import textwrap\n# from  textwrap import fill\n# plt.xticks(x_axis, [textwrap.fill(label, 13) for label in labels], \n#            rotation = 0, fontsize=12, horizontalalignment=\"center\")\n# for p in axr.patches:\n#     axr.annotate(format(p.get_height(), '.1f'), (p.get_x() + p.get_width() / 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\n# plt.title('India and USA', size = 15)\n# plt.ylabel(' % Number of Respondents',size = 13)\n# axr.set_xticklabels(axr.get_xticklabels(), rotation=45)\n# plt.xlabel('Figure 12',size = 10)\n_ = [label for label in labels]\n",
      "rewrite-ns": 4744969,
      "overhead-ns": 4744969,
      "exec-ns": 47857159,
      "total-ns": 52602128,
      "patts-hit": {},
      "rewritten": "count_q5 = pd.pivot_table(multi[1:], values=['number'], index=['Q3', 'Q5'],\n    aggfunc=lambda x: len(x))\nq5_india = count_q5.iloc[222:234]\nq5_usa = count_q5.iloc[635:647]\nq5_india_1 = q5_india.unstack(level=-1)\nq5_usa_1 = q5_usa.unstack(level=-1)\nq5_tpt = pd.concat([q5_india_1, q5_usa_1])\nq5_tpt.columns = q5_tpt.columns.droplevel()\nq5_tot = q5_tpt.transpose()\nq5_tot = q5_tot.div(q5_tot.sum()) * 100\nq5_tot_1 = q5_tot.reset_index()\nlabels = q5_tot.index\n_ = [label for label in labels]\n"
    }
  ],
  "total-time-in-sec": 21.615984734,
  "max-disk-in-mb": 0
}