{
  "max-mem-in-mb": 2016,
  "max-mem-in-mb2": 3054,
  "cells": [
    {
      "raw": "# Basic\nimport numpy as np \n# import pandas as pd \nexec(os.environ['IREWR_IMPORTS'])\n# ALEX: remove plotting\n# import seaborn as sns\n# import matplotlib.pyplot as plt \n\n# # System\n# import warnings\n# import os\n# warnings.filterwarnings(\"ignore\")\n# %matplotlib inline\n\n# ALEX: remove path printing\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))",
      "rewrite-ns": 688277,
      "overhead-ns": 688277,
      "exec-ns": 393729,
      "total-ns": 1082006,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\n"
    },
    {
      "raw": "users = pd.read_csv('./input/BX-Users.scaled.csv', error_bad_lines=False, delimiter=';', encoding = 'ISO-8859-1') #encoding = \"latin-1\"",
      "rewrite-ns": 836281,
      "overhead-ns": 836281,
      "exec-ns": 151371322,
      "total-ns": 152207603,
      "patts-hit": {},
      "rewritten": "users = pd.read_csv('./input/BX-Users.scaled.csv', error_bad_lines=False,\n    delimiter=';', encoding='ISO-8859-1')\n"
    },
    {
      "raw": "books = pd.read_csv('./input/BX-Books.scaled.csv', error_bad_lines=False, delimiter=';', encoding = 'ISO-8859-1') #encoding = \"latin-1",
      "rewrite-ns": 994239,
      "overhead-ns": 994239,
      "exec-ns": 1013502901,
      "total-ns": 1014497140,
      "patts-hit": {},
      "rewritten": "books = pd.read_csv('./input/BX-Books.scaled.csv', error_bad_lines=False,\n    delimiter=';', encoding='ISO-8859-1')\n"
    },
    {
      "raw": "ratings = pd.read_csv('./input/BX-Book-Ratings.scaled.csv', error_bad_lines=False, delimiter=';', encoding = 'ISO-8859-1')",
      "rewrite-ns": 669004,
      "overhead-ns": 669004,
      "exec-ns": 331499717,
      "total-ns": 332168721,
      "patts-hit": {},
      "rewritten": "ratings = pd.read_csv('./input/BX-Book-Ratings.scaled.csv', error_bad_lines\n    =False, delimiter=';', encoding='ISO-8859-1')\n"
    },
    {
      "raw": "users.shape",
      "rewrite-ns": 98474,
      "overhead-ns": 98474,
      "exec-ns": 1168850,
      "total-ns": 1267324,
      "patts-hit": {},
      "rewritten": "users.shape\n"
    },
    {
      "raw": "books.shape",
      "rewrite-ns": 58538,
      "overhead-ns": 58538,
      "exec-ns": 489112,
      "total-ns": 547650,
      "patts-hit": {},
      "rewritten": "books.shape\n"
    },
    {
      "raw": "ratings.shape",
      "rewrite-ns": 48929,
      "overhead-ns": 48929,
      "exec-ns": 407679,
      "total-ns": 456608,
      "patts-hit": {},
      "rewritten": "ratings.shape\n"
    },
    {
      "raw": "users.columns",
      "rewrite-ns": 46070,
      "overhead-ns": 46070,
      "exec-ns": 541693,
      "total-ns": 587763,
      "patts-hit": {},
      "rewritten": "users.columns\n"
    },
    {
      "raw": "ratings.columns",
      "rewrite-ns": 49721,
      "overhead-ns": 49721,
      "exec-ns": 495156,
      "total-ns": 544877,
      "patts-hit": {},
      "rewritten": "ratings.columns\n"
    },
    {
      "raw": "books.columns",
      "rewrite-ns": 48051,
      "overhead-ns": 48051,
      "exec-ns": 506355,
      "total-ns": 554406,
      "patts-hit": {},
      "rewritten": "books.columns\n"
    },
    {
      "raw": "data = pd.merge(ratings, users, on='User-ID', how='inner')",
      "rewrite-ns": 599356,
      "overhead-ns": 599356,
      "exec-ns": 148237322,
      "total-ns": 148836678,
      "patts-hit": {},
      "rewritten": "data = pd.merge(ratings, users, on='User-ID', how='inner')\n"
    },
    {
      "raw": "data = pd.merge(data, books, on='ISBN', how='inner')",
      "rewrite-ns": 637782,
      "overhead-ns": 637782,
      "exec-ns": 593157552,
      "total-ns": 593795334,
      "patts-hit": {},
      "rewritten": "data = pd.merge(data, books, on='ISBN', how='inner')\n"
    },
    {
      "raw": "# Check\ndata.columns",
      "rewrite-ns": 91706,
      "overhead-ns": 91706,
      "exec-ns": 789839,
      "total-ns": 881545,
      "patts-hit": {},
      "rewritten": "data.columns\n"
    },
    {
      "raw": "#data.rename(columns={'Book-Rating':'BookRating', 'User-ID':'UserID'},inplace=True)",
      "rewrite-ns": 16023,
      "overhead-ns": 16023,
      "exec-ns": 86307,
      "total-ns": 102330,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Drop (TODO: image analysis?)\n'''to_drop = ['Image-URL-S', 'Image-URL-M', 'Image-URL-L']\n\ndata = data.drop(to_drop, axis=1, inplace=False)'''",
      "rewrite-ns": 195169,
      "overhead-ns": 195169,
      "exec-ns": 821841,
      "total-ns": 1017010,
      "patts-hit": {},
      "rewritten": "\"\"\"to_drop = ['Image-URL-S', 'Image-URL-M', 'Image-URL-L']\n\ndata = data.drop(to_drop, axis=1, inplace=False)\"\"\"\n"
    },
    {
      "raw": "data.shape",
      "rewrite-ns": 92508,
      "overhead-ns": 92508,
      "exec-ns": 488481,
      "total-ns": 580989,
      "patts-hit": {},
      "rewritten": "data.shape\n"
    },
    {
      "raw": "print('Size of the dataset is: ', data.memory_usage().sum() / 1024**2, ' MB')",
      "rewrite-ns": 811403,
      "overhead-ns": 811403,
      "exec-ns": 1725137,
      "total-ns": 2536540,
      "patts-hit": {},
      "rewritten": "print('Size of the dataset is: ', data.memory_usage().sum() / 1024 ** 2, ' MB')\n"
    },
    {
      "raw": "# TODO: EDA in Power BI",
      "rewrite-ns": 12392,
      "overhead-ns": 12392,
      "exec-ns": 66379,
      "total-ns": 78771,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "data.shape",
      "rewrite-ns": 52572,
      "overhead-ns": 52572,
      "exec-ns": 418206,
      "total-ns": 470778,
      "patts-hit": {},
      "rewritten": "data.shape\n"
    },
    {
      "raw": "data.head(5)",
      "rewrite-ns": 103017,
      "overhead-ns": 103017,
      "exec-ns": 9867240,
      "total-ns": 9970257,
      "patts-hit": {},
      "rewritten": "data.head(5)\n"
    },
    {
      "raw": "data.info()",
      "rewrite-ns": 83351,
      "overhead-ns": 83351,
      "exec-ns": 1023742346,
      "total-ns": 1023825697,
      "patts-hit": {},
      "rewritten": "data.info()\n"
    },
    {
      "raw": "print('Number of books: ', data['ISBN'].nunique())",
      "rewrite-ns": 566023,
      "overhead-ns": 566023,
      "exec-ns": 83528653,
      "total-ns": 84094676,
      "patts-hit": {},
      "rewritten": "print('Number of books: ', data['ISBN'].nunique())\n"
    },
    {
      "raw": "print('Number of users: ',data['User-ID'].nunique())",
      "rewrite-ns": 571001,
      "overhead-ns": 571001,
      "exec-ns": 8665496,
      "total-ns": 9236497,
      "patts-hit": {},
      "rewritten": "print('Number of users: ', data['User-ID'].nunique())\n"
    },
    {
      "raw": "print('Missing data [%]')\nround(data.isnull().sum() / len(data) * 100, 4)",
      "rewrite-ns": 941461,
      "overhead-ns": 941461,
      "exec-ns": 1011835231,
      "total-ns": 1012776692,
      "patts-hit": {},
      "rewritten": "print('Missing data [%]')\nround(data.isnull().sum() / len(data) * 100, 4)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.distplot(data['Age'].dropna(), kde=False)\n_ = data['Age'].dropna()",
      "rewrite-ns": 509418,
      "overhead-ns": 509418,
      "exec-ns": 10112688,
      "total-ns": 10622106,
      "patts-hit": {},
      "rewritten": "_ = data['Age'].dropna()\n"
    },
    {
      "raw": "print('Number of outliers: ', sum(data['Age'] > 100))",
      "rewrite-ns": 642325,
      "overhead-ns": 642325,
      "exec-ns": 56521015,
      "total-ns": 57163340,
      "patts-hit": {},
      "rewritten": "print('Number of outliers: ', sum(data['Age'] > 100))\n"
    },
    {
      "raw": "# data['Book-Rating'] = data['Book-Rating'].replace(0, None)\ndata['Book-Rating'] = data['Book-Rating'].replace([0], None)",
      "rewrite-ns": 245019,
      "overhead-ns": 245019,
      "exec-ns": 19359090,
      "total-ns": 19604109,
      "patts-hit": {},
      "rewritten": "data['Book-Rating'] = data['Book-Rating'].replace([0], None)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.countplot(x='Book-Rating', data=data)",
      "rewrite-ns": 19245,
      "overhead-ns": 19245,
      "exec-ns": 95284,
      "total-ns": 114529,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "print('Average book rating: ', round(data['Book-Rating'].mean(), 2))",
      "rewrite-ns": 682867,
      "overhead-ns": 682867,
      "exec-ns": 57547907,
      "total-ns": 58230774,
      "patts-hit": {},
      "rewritten": "print('Average book rating: ', round(data['Book-Rating'].mean(), 2))\n"
    },
    {
      "raw": "# Publication by Year\nyear = pd.to_numeric(data['Year-Of-Publication'], 'coerce').fillna(2099, downcast = 'infer')\n# ALEX: remove plotting\n# sns.distplot(year, kde=False, hist_kws={\"range\": [1945,2020]})",
      "rewrite-ns": 806706,
      "overhead-ns": 806706,
      "exec-ns": 242289701,
      "total-ns": 243096407,
      "patts-hit": {},
      "rewritten": "year = pd.to_numeric(data['Year-Of-Publication'], 'coerce').fillna(2099,\n    downcast='infer')\n"
    },
    {
      "raw": "country = data['Location'].apply(lambda row: str(row).split(',')[-1])\ndata.groupby(country)['Book-Rating'].count().sort_values(ascending=False).head(10)",
      "rewrite-ns": 1381615,
      "overhead-ns": 1381615,
      "exec-ns": 448275899,
      "total-ns": 449657514,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "country = data['Location'].apply(lambda row: str(row).split(',')[-1])\ndias.rewriter.sort_head(called_on=data.groupby(country)['Book-Rating'].\n    count(), by=None, n=10, asc=False, orig=lambda _DIAS_x: _DIAS_x.\n    sort_values(ascending=False).head(10))\n"
    },
    {
      "raw": "# Cast to numeric\ndata['Year-Of-Publication'] = pd.to_numeric(data['Year-Of-Publication'], 'coerce').fillna(2099, downcast = 'infer')",
      "rewrite-ns": 896131,
      "overhead-ns": 896131,
      "exec-ns": 284462485,
      "total-ns": 285358616,
      "patts-hit": {},
      "rewritten": "data['Year-Of-Publication'] = pd.to_numeric(data['Year-Of-Publication'],\n    'coerce').fillna(2099, downcast='infer')\n"
    },
    {
      "raw": "data['Book-Rating'] = data['Book-Rating'].replace(0, None)",
      "rewrite-ns": 278931,
      "overhead-ns": 278931,
      "exec-ns": 24710727,
      "total-ns": 24989658,
      "patts-hit": {},
      "rewritten": "data['Book-Rating'] = data['Book-Rating'].replace(0, None)\n"
    },
    {
      "raw": "data['Age'] = np.where(data['Age']>90, None, data['Age'])",
      "rewrite-ns": 908802,
      "overhead-ns": 908802,
      "exec-ns": 32698642,
      "total-ns": 33607444,
      "patts-hit": {},
      "rewritten": "data['Age'] = np.where(data['Age'] > 90, None, data['Age'])\n"
    },
    {
      "raw": "# Categorical feautes\ndata[['Book-Author', 'Publisher']] = data[['Book-Author', 'Publisher']].fillna('Unknown')",
      "rewrite-ns": 831249,
      "overhead-ns": 831249,
      "exec-ns": 707374071,
      "total-ns": 708205320,
      "patts-hit": {},
      "rewritten": "data[['Book-Author', 'Publisher']] = data[['Book-Author', 'Publisher']].fillna(\n    'Unknown')\n"
    },
    {
      "raw": "# Check cat features\ndata[['Book-Author', 'Publisher']].isnull().sum()",
      "rewrite-ns": 647888,
      "overhead-ns": 647888,
      "exec-ns": 465209798,
      "total-ns": 465857686,
      "patts-hit": {},
      "rewritten": "data[['Book-Author', 'Publisher']].isnull().sum()\n"
    },
    {
      "raw": "# Age\nmedian = data[\"Age\"].median()\nstd = data[\"Age\"].std()\nis_null = data[\"Age\"].isnull().sum()\nrand_age = np.random.randint(median - std, median + std, size = is_null)\nage_slice = data[\"Age\"].copy()\nage_slice[pd.isnull(age_slice)] = rand_age\ndata[\"Age\"] = age_slice\ndata[\"Age\"] = data[\"Age\"].astype(int)",
      "rewrite-ns": 3557337,
      "overhead-ns": 3557337,
      "exec-ns": 514830410,
      "total-ns": 518387747,
      "patts-hit": {},
      "rewritten": "median = data['Age'].median()\nstd = data['Age'].std()\nis_null = data['Age'].isnull().sum()\nrand_age = np.random.randint(median - std, median + std, size=is_null)\nage_slice = data['Age'].copy()\nage_slice[pd.isnull(age_slice)] = rand_age\ndata['Age'] = age_slice\ndata['Age'] = data['Age'].astype(int)\n"
    },
    {
      "raw": "# Check Age\ndata['Age'].isnull().sum()",
      "rewrite-ns": 541173,
      "overhead-ns": 541173,
      "exec-ns": 1625384,
      "total-ns": 2166557,
      "patts-hit": {},
      "rewritten": "data['Age'].isnull().sum()\n"
    },
    {
      "raw": "data['Country'] = data['Location'].apply(lambda row: str(row).split(',')[-1])",
      "rewrite-ns": 1081153,
      "overhead-ns": 1081153,
      "exec-ns": 387260668,
      "total-ns": 388341821,
      "patts-hit": {},
      "rewritten": "data['Country'] = data['Location'].apply(lambda row: str(row).split(',')[-1])\n"
    },
    {
      "raw": "# Drop irelevant\ndata = data.drop('Location', axis=1)",
      "rewrite-ns": 500524,
      "overhead-ns": 500524,
      "exec-ns": 135991461,
      "total-ns": 136491985,
      "patts-hit": {},
      "rewritten": "data = data.drop('Location', axis=1)\n"
    },
    {
      "raw": "data['Country'].head()",
      "rewrite-ns": 435664,
      "overhead-ns": 435664,
      "exec-ns": 1221983,
      "total-ns": 1657647,
      "patts-hit": {},
      "rewritten": "data['Country'].head()\n"
    },
    {
      "raw": "#TODO: country/language analysis (Babel lib?)",
      "rewrite-ns": 16024,
      "overhead-ns": 16024,
      "exec-ns": 86240,
      "total-ns": 102264,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "#en_list = ['usa', 'canada', 'united kingdom', 'australia']",
      "rewrite-ns": 11655,
      "overhead-ns": 11655,
      "exec-ns": 64728,
      "total-ns": 76383,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "#data[data['Country'].isin(en_list)]",
      "rewrite-ns": 10807,
      "overhead-ns": 10807,
      "exec-ns": 59969,
      "total-ns": 70776,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "df = data",
      "rewrite-ns": 225351,
      "overhead-ns": 225351,
      "exec-ns": 199973,
      "total-ns": 425324,
      "patts-hit": {},
      "rewritten": "df = data\n"
    },
    {
      "raw": "# Relevant score\ndf = df[df['Book-Rating'] >= 6]",
      "rewrite-ns": 515347,
      "overhead-ns": 515347,
      "exec-ns": 297483346,
      "total-ns": 297998693,
      "patts-hit": {},
      "rewritten": "df = df[df['Book-Rating'] >= 6]\n"
    },
    {
      "raw": "# Check\ndf.groupby('ISBN')['User-ID'].count().describe()",
      "rewrite-ns": 675066,
      "overhead-ns": 675066,
      "exec-ns": 117728814,
      "total-ns": 118403880,
      "patts-hit": {},
      "rewritten": "df.groupby('ISBN')['User-ID'].count().describe()\n"
    },
    {
      "raw": "df = df.groupby('ISBN').filter(lambda x: len(x) >= 5)",
      "rewrite-ns": 878634,
      "overhead-ns": 878634,
      "exec-ns": 1593082362,
      "total-ns": 1593960996,
      "patts-hit": {},
      "rewritten": "df = df.groupby('ISBN').filter(lambda x: len(x) >= 5)\n"
    },
    {
      "raw": "df.groupby('User-ID')['ISBN'].count().describe()",
      "rewrite-ns": 682109,
      "overhead-ns": 682109,
      "exec-ns": 22297401,
      "total-ns": 22979510,
      "patts-hit": {},
      "rewritten": "df.groupby('User-ID')['ISBN'].count().describe()\n"
    },
    {
      "raw": "df = df.groupby('User-ID').filter(lambda x: len(x) >= 5)",
      "rewrite-ns": 846778,
      "overhead-ns": 846778,
      "exec-ns": 562433192,
      "total-ns": 563279970,
      "patts-hit": {},
      "rewritten": "df = df.groupby('User-ID').filter(lambda x: len(x) >= 5)\n"
    },
    {
      "raw": "df.shape",
      "rewrite-ns": 83162,
      "overhead-ns": 83162,
      "exec-ns": 6593086,
      "total-ns": 6676248,
      "patts-hit": {},
      "rewritten": "df.shape\n"
    },
    {
      "raw": "df_p = df.pivot_table(index='ISBN', columns='User-ID', values='Book-Rating')",
      "rewrite-ns": 581423,
      "overhead-ns": 581423,
      "exec-ns": 9457208755,
      "total-ns": 9457790178,
      "patts-hit": {},
      "rewritten": "df_p = df.pivot_table(index='ISBN', columns='User-ID', values='Book-Rating')\n"
    },
    {
      "raw": "# Select users who liked LOTR\nlotr = df_p.loc['0345339703'] # Lord of the Rings Part 1\nlike_lotr = lotr[lotr == 10].to_frame().reset_index()\nusers = like_lotr['User-ID'].to_frame()",
      "rewrite-ns": 1490015,
      "overhead-ns": 1490015,
      "exec-ns": 5476527,
      "total-ns": 6966542,
      "patts-hit": {},
      "rewritten": "lotr = df_p.loc['0345339703']\nlike_lotr = lotr[lotr == 10].to_frame().reset_index()\nusers = like_lotr['User-ID'].to_frame()\n"
    },
    {
      "raw": "# Trim original dataset\nliked = pd.merge(users, df, on='User-ID', how='inner')",
      "rewrite-ns": 603291,
      "overhead-ns": 603291,
      "exec-ns": 58839070,
      "total-ns": 59442361,
      "patts-hit": {},
      "rewritten": "liked = pd.merge(users, df, on='User-ID', how='inner')\n"
    },
    {
      "raw": "rating_count = liked.groupby('ISBN')['Book-Rating'].count().to_frame()",
      "rewrite-ns": 714300,
      "overhead-ns": 714300,
      "exec-ns": 1674759,
      "total-ns": 2389059,
      "patts-hit": {},
      "rewritten": "rating_count = liked.groupby('ISBN')['Book-Rating'].count().to_frame()\n"
    },
    {
      "raw": "rating_mean = liked.groupby('ISBN')['Book-Rating'].mean().to_frame()",
      "rewrite-ns": 789585,
      "overhead-ns": 789585,
      "exec-ns": 86977835,
      "total-ns": 87767420,
      "patts-hit": {},
      "rewritten": "rating_mean = liked.groupby('ISBN')['Book-Rating'].mean().to_frame()\n"
    },
    {
      "raw": "rating_count.rename(columns={'Book-Rating':'Rating-Count'}, inplace=True)",
      "rewrite-ns": 500676,
      "overhead-ns": 500676,
      "exec-ns": 593534,
      "total-ns": 1094210,
      "patts-hit": {},
      "rewritten": "rating_count.rename(columns={'Book-Rating': 'Rating-Count'}, inplace=True)\n"
    },
    {
      "raw": "rating_mean.rename(columns={'Book-Rating':'Rating-Mean'}, inplace=True)",
      "rewrite-ns": 473802,
      "overhead-ns": 473802,
      "exec-ns": 504155,
      "total-ns": 977957,
      "patts-hit": {},
      "rewritten": "rating_mean.rename(columns={'Book-Rating': 'Rating-Mean'}, inplace=True)\n"
    },
    {
      "raw": "liked = pd.merge(liked, rating_count, on='ISBN', how='inner')",
      "rewrite-ns": 537652,
      "overhead-ns": 537652,
      "exec-ns": 2166361,
      "total-ns": 2704013,
      "patts-hit": {},
      "rewritten": "liked = pd.merge(liked, rating_count, on='ISBN', how='inner')\n"
    },
    {
      "raw": "liked = pd.merge(liked, rating_mean, on='ISBN', how='inner')",
      "rewrite-ns": 548955,
      "overhead-ns": 548955,
      "exec-ns": 2027452,
      "total-ns": 2576407,
      "patts-hit": {},
      "rewritten": "liked = pd.merge(liked, rating_mean, on='ISBN', how='inner')\n"
    },
    {
      "raw": "liked['Rating-Mean'] = liked['Rating-Mean'].round(2)",
      "rewrite-ns": 548334,
      "overhead-ns": 548334,
      "exec-ns": 450509,
      "total-ns": 998843,
      "patts-hit": {},
      "rewritten": "liked['Rating-Mean'] = liked['Rating-Mean'].round(2)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# liked['Rating-Count'].hist()\nliked['Rating-Count']",
      "rewrite-ns": 241808,
      "overhead-ns": 241808,
      "exec-ns": 1244244,
      "total-ns": 1486052,
      "patts-hit": {},
      "rewritten": "liked['Rating-Count']\n"
    },
    {
      "raw": "C = liked['Rating-Mean'].mean()\nC",
      "rewrite-ns": 452610,
      "overhead-ns": 452610,
      "exec-ns": 626959,
      "total-ns": 1079569,
      "patts-hit": {},
      "rewritten": "C = liked['Rating-Mean'].mean()\nC\n"
    },
    {
      "raw": "m = rating_count.quantile(.995)[0] # .9\nm",
      "rewrite-ns": 468686,
      "overhead-ns": 468686,
      "exec-ns": 1041881,
      "total-ns": 1510567,
      "patts-hit": {},
      "rewritten": "m = rating_count.quantile(0.995)[0]\nm\n"
    },
    {
      "raw": "# IMDB formula; source: http://trailerpark.weebly.com/imdb-rating.html?source=post_page---------------------------\ndef weighted_rating(x, m=m, C=C):\n    v = x['Rating-Count']\n    R = x['Rating-Mean']\n\n    return (v/(v+m) * R) + (m/(m+v) * C)",
      "rewrite-ns": 1606632,
      "overhead-ns": 1606632,
      "exec-ns": 370640,
      "total-ns": 1977272,
      "patts-hit": {},
      "rewritten": "def weighted_rating(x, m=m, C=C):\n    v = x['Rating-Count']\n    R = x['Rating-Mean']\n    return v / (v + m) * R + m / (m + v) * C\n"
    },
    {
      "raw": "# Create relevant sub-dataset\nliked_q = liked.copy().loc[liked['Rating-Count'] >= m]\nliked_q.shape",
      "rewrite-ns": 691715,
      "overhead-ns": 691715,
      "exec-ns": 1623324,
      "total-ns": 2315039,
      "patts-hit": {},
      "rewritten": "liked_q = liked.copy().loc[liked['Rating-Count'] >= m]\nliked_q.shape\n"
    },
    {
      "raw": "liked_q['Score'] = liked_q.apply(weighted_rating, axis=1)",
      "rewrite-ns": 558126,
      "overhead-ns": 1262207,
      "exec-ns": 1714270,
      "total-ns": 2272396,
      "patts-hit": {
        "HasOnlyMath": 1
      },
      "rewritten": "liked_q['Score'] = liked_q.apply(weighted_rating, axis=1)\n"
    },
    {
      "raw": "top_r = liked_q[['Book-Title', 'Rating-Mean']]",
      "rewrite-ns": 390898,
      "overhead-ns": 390898,
      "exec-ns": 725601,
      "total-ns": 1116499,
      "patts-hit": {},
      "rewritten": "top_r = liked_q[['Book-Title', 'Rating-Mean']]\n"
    },
    {
      "raw": "top_r = top_r.groupby(['Book-Title'])['Rating-Mean'].mean().to_frame()",
      "rewrite-ns": 681395,
      "overhead-ns": 681395,
      "exec-ns": 849280,
      "total-ns": 1530675,
      "patts-hit": {},
      "rewritten": "top_r = top_r.groupby(['Book-Title'])['Rating-Mean'].mean().to_frame()\n"
    },
    {
      "raw": "top_r.sort_values(by='Rating-Mean', ascending=False).head(10)",
      "rewrite-ns": 320903,
      "overhead-ns": 320903,
      "exec-ns": 3554154,
      "total-ns": 3875057,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "dias.rewriter.sort_head(called_on=top_r, by='Rating-Mean', n=10, asc=False,\n    orig=lambda _DIAS_x: _DIAS_x.sort_values(by='Rating-Mean', ascending=\n    False).head(10))\n"
    },
    {
      "raw": "top_p = liked[['Book-Title', 'Rating-Count']]",
      "rewrite-ns": 391512,
      "overhead-ns": 391512,
      "exec-ns": 1067790,
      "total-ns": 1459302,
      "patts-hit": {},
      "rewritten": "top_p = liked[['Book-Title', 'Rating-Count']]\n"
    },
    {
      "raw": "top_p = top_p.groupby(['Book-Title'])['Rating-Count'].mean().to_frame()",
      "rewrite-ns": 696426,
      "overhead-ns": 696426,
      "exec-ns": 1506132,
      "total-ns": 2202558,
      "patts-hit": {},
      "rewritten": "top_p = top_p.groupby(['Book-Title'])['Rating-Count'].mean().to_frame()\n"
    },
    {
      "raw": "top_p.sort_values(by='Rating-Count', ascending=False).head(10)#.plot(kind='barh')",
      "rewrite-ns": 312539,
      "overhead-ns": 312539,
      "exec-ns": 3235013,
      "total-ns": 3547552,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "dias.rewriter.sort_head(called_on=top_p, by='Rating-Count', n=10, asc=False,\n    orig=lambda _DIAS_x: _DIAS_x.sort_values(by='Rating-Count', ascending=\n    False).head(10))\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# from tqdm import tqdm\n# from gensim.models import Word2Vec \nimport random",
      "rewrite-ns": 123725,
      "overhead-ns": 123725,
      "exec-ns": 182218,
      "total-ns": 305943,
      "patts-hit": {},
      "rewritten": "import random\n"
    },
    {
      "raw": "users = df[\"User-ID\"].unique().tolist()\nlen(users)",
      "rewrite-ns": 543154,
      "overhead-ns": 543154,
      "exec-ns": 1877905,
      "total-ns": 2421059,
      "patts-hit": {},
      "rewritten": "users = df['User-ID'].unique().tolist()\nlen(users)\n"
    },
    {
      "raw": "# shuffle users ID's\nrandom.shuffle(users)\n\n# extract 90% of customer ID's\nusers_train = [users[i] for i in range(round(0.9*len(users)))]\n\n# split data into train and validation set\ntrain_df = df[df['User-ID'].isin(users_train)]\nvalidation_df = df[~df['User-ID'].isin(users_train)]",
      "rewrite-ns": 2133352,
      "overhead-ns": 2133352,
      "exec-ns": 26098913,
      "total-ns": 28232265,
      "patts-hit": {},
      "rewritten": "random.shuffle(users)\nusers_train = [users[i] for i in range(round(0.9 * len(users)))]\ntrain_df = df[df['User-ID'].isin(users_train)]\nvalidation_df = df[~df['User-ID'].isin(users_train)]\n"
    },
    {
      "raw": "# list to capture purchase history of the customers\nreads_train = []\n\n# populate the list with the product codes\n# ALEX: remove extra display code\n# for i in tqdm(users_train):\nfor i in users_train:\n    temp = train_df[train_df[\"User-ID\"] == i][\"ISBN\"].tolist()\n    reads_train.append(temp)",
      "rewrite-ns": 1295978,
      "overhead-ns": 1295978,
      "exec-ns": 2431198987,
      "total-ns": 2432494965,
      "patts-hit": {},
      "rewritten": "reads_train = []\nfor i in users_train:\n    temp = train_df[train_df['User-ID'] == i]['ISBN'].tolist()\n    reads_train.append(temp)\n"
    },
    {
      "raw": "# list to capture purchase history of the customers\nreads_val = []\n\n# populate the list with the product codes\n# ALEX: remove extra display code\n# for i in tqdm(validation_df['User-ID'].unique()):\nfor i in validation_df['User-ID'].unique():\n    temp = validation_df[validation_df[\"User-ID\"] == i][\"ISBN\"].tolist()\n    reads_val.append(temp)",
      "rewrite-ns": 1482940,
      "overhead-ns": 1482940,
      "exec-ns": 167674826,
      "total-ns": 169157766,
      "patts-hit": {},
      "rewritten": "reads_val = []\nfor i in validation_df['User-ID'].unique():\n    temp = validation_df[validation_df['User-ID'] == i]['ISBN'].tolist()\n    reads_val.append(temp)\n"
    },
    {
      "raw": "# train word2vec model\n# ALEX: remove ML code\n# model = Word2Vec(window = 10, sg = 1, hs = 0,\n#                  negative = 10, # for negative sampling\n#                  alpha=0.03, min_alpha=0.0007,\n#                  seed = 14)\n\n# model.build_vocab(reads_train, progress_per=200)\n\n# model.train(reads_train, total_examples = model.corpus_count, \n#             epochs=10, report_delay=1)",
      "rewrite-ns": 21280,
      "overhead-ns": 21280,
      "exec-ns": 99957,
      "total-ns": 121237,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# model.init_sims(replace=True)",
      "rewrite-ns": 12571,
      "overhead-ns": 12571,
      "exec-ns": 75163,
      "total-ns": 87734,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# print(model)",
      "rewrite-ns": 11069,
      "overhead-ns": 11069,
      "exec-ns": 63977,
      "total-ns": 75046,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# extract all vectors\n# ALEX: remove ML code\n# X = model[model.wv.vocab]\n\n# X.shape",
      "rewrite-ns": 10432,
      "overhead-ns": 10432,
      "exec-ns": 60999,
      "total-ns": 71431,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code, plotting\n# import umap\n\n# cluster_embedding = umap.UMAP(n_neighbors=30, min_dist=0.0,\n#                               n_components=2, random_state=42).fit_transform(X)\n\n# plt.figure(figsize=(10,9))\n# plt.scatter(cluster_embedding[:, 0], cluster_embedding[:, 1], s=3, cmap='Spectral')",
      "rewrite-ns": 11418,
      "overhead-ns": 11418,
      "exec-ns": 58115,
      "total-ns": 69533,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "books = train_df[[\"ISBN\", \"Book-Title\"]]\n\n# remove duplicates\nbooks.drop_duplicates(inplace=True, subset='ISBN', keep=\"last\")\n\n# create product-ID and product-description dictionary\nbooks_dict = books.groupby('ISBN')['Book-Title'].apply(list).to_dict()",
      "rewrite-ns": 1562025,
      "overhead-ns": 1562025,
      "exec-ns": 228820651,
      "total-ns": 230382676,
      "patts-hit": {},
      "rewritten": "books = train_df[['ISBN', 'Book-Title']]\nbooks.drop_duplicates(inplace=True, subset='ISBN', keep='last')\nbooks_dict = books.groupby('ISBN')['Book-Title'].apply(list).to_dict()\n"
    },
    {
      "raw": "# Find LOTR\ndf[df['Book-Title'].str.contains('Lord of the Rings')].sample()",
      "rewrite-ns": 690599,
      "overhead-ns": 690599,
      "exec-ns": 51274642,
      "total-ns": 51965241,
      "patts-hit": {},
      "rewritten": "df[df['Book-Title'].str.contains('Lord of the Rings')].sample()\n"
    },
    {
      "raw": "# Check\nbooks_dict['0345339703']",
      "rewrite-ns": 280311,
      "overhead-ns": 280311,
      "exec-ns": 484750,
      "total-ns": 765061,
      "patts-hit": {},
      "rewritten": "books_dict['0345339703']\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# def similar_books(v, n = 15):\n    \n#     # extract most similar products for the input vector\n#     ms = model.similar_by_vector(v, topn= n+1)[1:]\n    \n#     # extract name and similarity score of the similar products\n#     new_ms = []\n#     for j in ms:\n#         pair = (books_dict[j[0]][0], j[1])\n#         new_ms.append(pair)\n        \n#     return new_ms ",
      "rewrite-ns": 16120,
      "overhead-ns": 16120,
      "exec-ns": 72778,
      "total-ns": 88898,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Recommend\n# ALEX: remove ML code\n# similar_books(model['0345339703'])",
      "rewrite-ns": 11666,
      "overhead-ns": 11666,
      "exec-ns": 62224,
      "total-ns": 73890,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 22.963037469,
  "max-disk-in-mb": 0
}