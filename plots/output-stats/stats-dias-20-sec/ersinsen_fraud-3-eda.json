{
  "max-mem-in-mb": 4862,
  "max-mem-in-mb2": 4932,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n# FIRST-AUTHOR: remove plotting\n# from matplotlib import pyplot as plt\n# import seaborn as sns\n# import missingno as msno\nimport datetime\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# FIRST-AUTHOR: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('./input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session",
      "rewrite-ns": 567255,
      "overhead-ns": 567255,
      "exec-ns": 287826,
      "total-ns": 855081,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\nimport datetime\n"
    },
    {
      "raw": "# CALISACAGIM DATASET\ntrain_transaction=pd.read_csv('./input/train_transaction.scaled.csv')\ntest_transaction=pd.read_csv('./input/test_transaction.scaled.csv')",
      "rewrite-ns": 660278,
      "overhead-ns": 660278,
      "exec-ns": 8741123754,
      "total-ns": 8741784032,
      "patts-hit": {},
      "rewritten": "train_transaction = pd.read_csv('./input/train_transaction.scaled.csv')\ntest_transaction = pd.read_csv('./input/test_transaction.scaled.csv')\n"
    },
    {
      "raw": "# test_transaction setinde isFraud sutunu bulunmadigindan concat oncesi yeni ekliyoruz ve 2 degerini dolduruyoruz\ntest_transaction['isFraud']=2\n# train_transaction ve test_transaction setlerini concat ediyoruz\ntransaction=pd.concat([train_transaction, test_transaction], ignore_index=True)",
      "rewrite-ns": 984308,
      "overhead-ns": 984308,
      "exec-ns": 611795500,
      "total-ns": 612779808,
      "patts-hit": {},
      "rewritten": "test_transaction['isFraud'] = 2\ntransaction = pd.concat([train_transaction, test_transaction], ignore_index\n    =True)\n"
    },
    {
      "raw": "transaction['D1'].head(40)",
      "rewrite-ns": 505477,
      "overhead-ns": 505477,
      "exec-ns": 2862236,
      "total-ns": 3367713,
      "patts-hit": {},
      "rewritten": "transaction['D1'].head(40)\n"
    },
    {
      "raw": "# Column ve Degerlerine genel bakis\nfor col, values in transaction.iteritems():\n    num_uniques = values.nunique()\n    print ('{name}: {num_unique}'.format(name=col, num_unique=num_uniques))\n    print (values.unique())\n    print ('\\n')",
      "rewrite-ns": 1631402,
      "overhead-ns": 1631402,
      "exec-ns": 3080398329,
      "total-ns": 3082029731,
      "patts-hit": {},
      "rewritten": "for col, values in transaction.iteritems():\n    num_uniques = values.nunique()\n    print('{name}: {num_unique}'.format(name=col, num_unique=num_uniques))\n    print(values.unique())\n    print('\\n')\n"
    },
    {
      "raw": "# NE KADAR ROW-COLINM OLDUGU\n\nprint(f'Train Transaction has {transaction.shape[0]} rows and {transaction.shape[1]} columns.')",
      "rewrite-ns": 904254,
      "overhead-ns": 904254,
      "exec-ns": 326251,
      "total-ns": 1230505,
      "patts-hit": {},
      "rewritten": "print(\n    f'Train Transaction has {transaction.shape[0]} rows and {transaction.shape[1]} columns.'\n    )\n"
    },
    {
      "raw": "#COLUMN ISIMLER\ntransaction.columns",
      "rewrite-ns": 76597,
      "overhead-ns": 76597,
      "exec-ns": 767664,
      "total-ns": 844261,
      "patts-hit": {},
      "rewritten": "transaction.columns\n"
    },
    {
      "raw": "# BENIM KISIM OLAN COLUMNLARI BASKA BIR VARIABLE ATIYORUZ ve CALISMAMIZDA COPYASINI KULLANIYORUZ\ntransaction_mycolumns=transaction.iloc[:,0:55]\nmy_transaction=transaction_mycolumns.copy()",
      "rewrite-ns": 855314,
      "overhead-ns": 855314,
      "exec-ns": 276348036,
      "total-ns": 277203350,
      "patts-hit": {},
      "rewritten": "transaction_mycolumns = transaction.iloc[:, 0:55]\nmy_transaction = transaction_mycolumns.copy()\n"
    },
    {
      "raw": "my_transaction.info()",
      "rewrite-ns": 124768,
      "overhead-ns": 124768,
      "exec-ns": 597716751,
      "total-ns": 597841519,
      "patts-hit": {},
      "rewritten": "my_transaction.info()\n"
    },
    {
      "raw": "my_transaction.info(memory_usage='deep')",
      "rewrite-ns": 135989,
      "overhead-ns": 135989,
      "exec-ns": 1071795076,
      "total-ns": 1071931065,
      "patts-hit": {},
      "rewritten": "my_transaction.info(memory_usage='deep')\n"
    },
    {
      "raw": "my_transaction.describe()",
      "rewrite-ns": 149591,
      "overhead-ns": 149591,
      "exec-ns": 640488290,
      "total-ns": 640637881,
      "patts-hit": {},
      "rewritten": "my_transaction.describe()\n"
    },
    {
      "raw": "# kololasyonu anlam ifade eden kisimlari gozlemleyelim\na=my_transaction.corr().abs()<1\nb=my_transaction.corr().abs()>0.5\nmy_transaction.corr().abs()[a&b]\n",
      "rewrite-ns": 1575875,
      "overhead-ns": 1575875,
      "exec-ns": 4799320171,
      "total-ns": 4800896046,
      "patts-hit": {},
      "rewritten": "a = my_transaction.corr().abs() < 1\nb = my_transaction.corr().abs() > 0.5\nmy_transaction.corr().abs()[a & b]\n"
    },
    {
      "raw": "# NE KADAR COLUMNDA MISSING VALUE OLDUGU\nprint(f'There are {my_transaction.isnull().any().sum()} columns in my_train transaction dataset with missing values.')",
      "rewrite-ns": 784897,
      "overhead-ns": 784897,
      "exec-ns": 586334329,
      "total-ns": 587119226,
      "patts-hit": {},
      "rewritten": "print(\n    f'There are {my_transaction.isnull().any().sum()} columns in my_train transaction dataset with missing values.'\n    )\n"
    },
    {
      "raw": "# Eksik verileri oransal bar ile gorsellestirme\n# FIRST-AUTHOR: remove plotting\n# msno.bar(train_Mytransaction);",
      "rewrite-ns": 24935,
      "overhead-ns": 24935,
      "exec-ns": 114902,
      "total-ns": 139837,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# msno.matrix(my_transaction);",
      "rewrite-ns": 21327,
      "overhead-ns": 21327,
      "exec-ns": 98753,
      "total-ns": 120080,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# degiskenler arasindaki yokluk koralasyonu  -1 demek- birinde null varsa digerinde de null her durumda var\n# FIRST-AUTHOR: remove plotting\n# msno.heatmap(my_transaction);",
      "rewrite-ns": 15850,
      "overhead-ns": 15850,
      "exec-ns": 79499,
      "total-ns": 95349,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "emails = {'gmail': 'google', 'att.net': 'att', 'twc.com': 'spectrum', \n          'scranton.edu': 'other', 'optonline.net': 'other', 'hotmail.co.uk': 'microsoft',\n          'comcast.net': 'other', 'yahoo.com.mx': 'yahoo', 'yahoo.fr': 'yahoo',\n          'yahoo.es': 'yahoo', 'charter.net': 'spectrum', 'live.com': 'microsoft', \n          'aim.com': 'aol', 'hotmail.de': 'microsoft', 'centurylink.net': 'centurylink',\n          'gmail.com': 'google', 'me.com': 'apple', 'earthlink.net': 'other', 'gmx.de': 'other',\n          'web.de': 'other', 'cfl.rr.com': 'other', 'hotmail.com': 'microsoft', \n          'protonmail.com': 'other', 'hotmail.fr': 'microsoft', 'windstream.net': 'other', \n          'outlook.es': 'microsoft', 'yahoo.co.jp': 'yahoo', 'yahoo.de': 'yahoo',\n          'servicios-ta.com': 'other', 'netzero.net': 'other', 'suddenlink.net': 'other',\n          'roadrunner.com': 'other', 'sc.rr.com': 'other', 'live.fr': 'microsoft',\n          'verizon.net': 'yahoo', 'msn.com': 'microsoft', 'q.com': 'centurylink', \n          'prodigy.net.mx': 'att', 'frontier.com': 'yahoo', 'anonymous.com': 'other', \n          'rocketmail.com': 'yahoo', 'sbcglobal.net': 'att', 'frontiernet.net': 'yahoo', \n          'ymail.com': 'yahoo', 'outlook.com': 'microsoft', 'mail.com': 'other', \n          'bellsouth.net': 'other', 'embarqmail.com': 'centurylink', 'cableone.net': 'other', \n          'hotmail.es': 'microsoft', 'mac.com': 'apple', 'yahoo.co.uk': 'yahoo', 'netzero.com': 'other', \n          'yahoo.com': 'yahoo', 'live.com.mx': 'microsoft', 'ptd.net': 'other', 'cox.net': 'other',\n          'aol.com': 'aol', 'juno.com': 'other', 'icloud.com': 'apple'}\n\nus_emails = ['gmail', 'net', 'edu']\n\n# https://www.kaggle.com/c/ieee-fraud-detection/discussion/100499#latest-579654\nfor c in ['P_emaildomain', 'R_emaildomain']:\n    my_transaction[c + '_bin'] = my_transaction[c].map(emails)\n    my_transaction[c + '_suffix'] = my_transaction[c].map(lambda x: str(x).split('.')[-1])\n    my_transaction[c + '_suffix'] = my_transaction[c + '_suffix'].map(lambda x: x if str(x) not in us_emails else 'us')\n",
      "rewrite-ns": 7924346,
      "overhead-ns": 7924346,
      "exec-ns": 471969346,
      "total-ns": 479893692,
      "patts-hit": {},
      "rewritten": "emails = {'gmail': 'google', 'att.net': 'att', 'twc.com': 'spectrum',\n    'scranton.edu': 'other', 'optonline.net': 'other', 'hotmail.co.uk':\n    'microsoft', 'comcast.net': 'other', 'yahoo.com.mx': 'yahoo',\n    'yahoo.fr': 'yahoo', 'yahoo.es': 'yahoo', 'charter.net': 'spectrum',\n    'live.com': 'microsoft', 'aim.com': 'aol', 'hotmail.de': 'microsoft',\n    'centurylink.net': 'centurylink', 'gmail.com': 'google', 'me.com':\n    'apple', 'earthlink.net': 'other', 'gmx.de': 'other', 'web.de': 'other',\n    'cfl.rr.com': 'other', 'hotmail.com': 'microsoft', 'protonmail.com':\n    'other', 'hotmail.fr': 'microsoft', 'windstream.net': 'other',\n    'outlook.es': 'microsoft', 'yahoo.co.jp': 'yahoo', 'yahoo.de': 'yahoo',\n    'servicios-ta.com': 'other', 'netzero.net': 'other', 'suddenlink.net':\n    'other', 'roadrunner.com': 'other', 'sc.rr.com': 'other', 'live.fr':\n    'microsoft', 'verizon.net': 'yahoo', 'msn.com': 'microsoft', 'q.com':\n    'centurylink', 'prodigy.net.mx': 'att', 'frontier.com': 'yahoo',\n    'anonymous.com': 'other', 'rocketmail.com': 'yahoo', 'sbcglobal.net':\n    'att', 'frontiernet.net': 'yahoo', 'ymail.com': 'yahoo', 'outlook.com':\n    'microsoft', 'mail.com': 'other', 'bellsouth.net': 'other',\n    'embarqmail.com': 'centurylink', 'cableone.net': 'other', 'hotmail.es':\n    'microsoft', 'mac.com': 'apple', 'yahoo.co.uk': 'yahoo', 'netzero.com':\n    'other', 'yahoo.com': 'yahoo', 'live.com.mx': 'microsoft', 'ptd.net':\n    'other', 'cox.net': 'other', 'aol.com': 'aol', 'juno.com': 'other',\n    'icloud.com': 'apple'}\nus_emails = ['gmail', 'net', 'edu']\nfor c in ['P_emaildomain', 'R_emaildomain']:\n    my_transaction[c + '_bin'] = my_transaction[c].map(emails)\n    my_transaction[c + '_suffix'] = my_transaction[c].map(lambda x: str(x).\n        split('.')[-1])\n    my_transaction[c + '_suffix'] = my_transaction[c + '_suffix'].map(lambda\n        x: x if str(x) not in us_emails else 'us')\n"
    },
    {
      "raw": "for column_name in ['P_emaildomain', 'R_emaildomain']:\n    my_transaction.drop(column_name, axis=1, inplace=True)",
      "rewrite-ns": 768119,
      "overhead-ns": 768119,
      "exec-ns": 230060571,
      "total-ns": 230828690,
      "patts-hit": {},
      "rewritten": "for column_name in ['P_emaildomain', 'R_emaildomain']:\n    my_transaction.drop(column_name, axis=1, inplace=True)\n"
    },
    {
      "raw": "object_columns_name=my_transaction.select_dtypes(include='object').columns",
      "rewrite-ns": 529713,
      "overhead-ns": 529713,
      "exec-ns": 173713064,
      "total-ns": 174242777,
      "patts-hit": {},
      "rewritten": "object_columns_name = my_transaction.select_dtypes(include='object').columns\n"
    },
    {
      "raw": "object_columns_name",
      "rewrite-ns": 79704,
      "overhead-ns": 79704,
      "exec-ns": 801341,
      "total-ns": 881045,
      "patts-hit": {},
      "rewritten": "object_columns_name\n"
    },
    {
      "raw": "for kategorik_sutun in object_columns_name:\n    modun_stringdegeri=my_transaction[kategorik_sutun].mode()[0]\n    my_transaction[kategorik_sutun].fillna(modun_stringdegeri,inplace=True)",
      "rewrite-ns": 1099774,
      "overhead-ns": 1099774,
      "exec-ns": 493568292,
      "total-ns": 494668066,
      "patts-hit": {},
      "rewritten": "for kategorik_sutun in object_columns_name:\n    modun_stringdegeri = my_transaction[kategorik_sutun].mode()[0]\n    my_transaction[kategorik_sutun].fillna(modun_stringdegeri, inplace=True)\n"
    },
    {
      "raw": "# Kategorik degerlerin eksik degerlerini doldurma yontemlerinden Frekansi kullanacagiz\ndef frekans(data,columns,n_label=\"NONE\"):\n    \n    for col in columns:\n        #data[col].fillna(n_label,inplace=True)\n        fq_encode = data[col].value_counts(dropna=False).to_dict()   \n        data[col+\"_Fr\"] = data[col].map(fq_encode)\n        data=data.drop(col,axis=1)\n    return data",
      "rewrite-ns": 1986421,
      "overhead-ns": 1986421,
      "exec-ns": 620456,
      "total-ns": 2606877,
      "patts-hit": {},
      "rewritten": "def frekans(data, columns, n_label='NONE'):\n    for col in columns:\n        fq_encode = data[col].value_counts(dropna=False).to_dict()\n        data[col + '_Fr'] = data[col].map(fq_encode)\n        data = data.drop(col, axis=1)\n    return data\n"
    },
    {
      "raw": "my_transaction = frekans(my_transaction,object_columns_name)",
      "rewrite-ns": 384006,
      "overhead-ns": 384006,
      "exec-ns": 1648630964,
      "total-ns": 1649014970,
      "patts-hit": {},
      "rewritten": "my_transaction = frekans(my_transaction, object_columns_name)\n"
    },
    {
      "raw": "my_transaction.head()",
      "rewrite-ns": 130452,
      "overhead-ns": 130452,
      "exec-ns": 29644133,
      "total-ns": 29774585,
      "patts-hit": {},
      "rewritten": "my_transaction.head()\n"
    },
    {
      "raw": "my_transaction.info()",
      "rewrite-ns": 108879,
      "overhead-ns": 108879,
      "exec-ns": 37074209,
      "total-ns": 37183088,
      "patts-hit": {},
      "rewritten": "my_transaction.info()\n"
    },
    {
      "raw": "# Preprocess date column\nSTART_DATE = '2017-12-01'\nmy_transaction = my_transaction.rename(columns={'TransactionDT': 'TransactionDate'})\nstartdate = datetime.datetime.strptime(START_DATE, '%Y-%m-%d')\nmy_transaction['TransactionDate'] = my_transaction['TransactionDate'].apply(lambda x: (startdate + datetime.timedelta(seconds = x)))\n\n\nprint(my_transaction['TransactionDate'].head())\nprint(my_transaction['TransactionDate'].tail())",
      "rewrite-ns": 2678770,
      "overhead-ns": 2678770,
      "exec-ns": 459640806,
      "total-ns": 462319576,
      "patts-hit": {},
      "rewritten": "START_DATE = '2017-12-01'\nmy_transaction = my_transaction.rename(columns={'TransactionDT':\n    'TransactionDate'})\nstartdate = datetime.datetime.strptime(START_DATE, '%Y-%m-%d')\nmy_transaction['TransactionDate'] = my_transaction['TransactionDate'].apply(\n    lambda x: startdate + datetime.timedelta(seconds=x))\nprint(my_transaction['TransactionDate'].head())\nprint(my_transaction['TransactionDate'].tail())\n"
    },
    {
      "raw": "my_transaction.columns",
      "rewrite-ns": 82900,
      "overhead-ns": 82900,
      "exec-ns": 845412,
      "total-ns": 928312,
      "patts-hit": {},
      "rewritten": "my_transaction.columns\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# import seaborn as sns\nmy_transaction_TransactionAmt_Fraud=my_transaction[['isFraud','TransactionAmt']]\n# FIRST-AUTHOR: remove plotting\n# fig, ax = plt.subplots(figsize=(5,5))\n# sns.heatmap(my_transaction_TransactionAmt_Fraud.corr(), ax=ax,linewidths=.5,annot=True)\n# plt.show()\n_ = my_transaction_TransactionAmt_Fraud.corr()",
      "rewrite-ns": 738000,
      "overhead-ns": 738000,
      "exec-ns": 9997582,
      "total-ns": 10735582,
      "patts-hit": {},
      "rewritten": "my_transaction_TransactionAmt_Fraud = my_transaction[['isFraud',\n    'TransactionAmt']]\n_ = my_transaction_TransactionAmt_Fraud.corr()\n"
    },
    {
      "raw": "# boxplot\n# FIRST-AUTHOR: remove plotting\n# sns.boxplot(x=my_transaction['TransactionAmt']);\n_ = my_transaction['TransactionAmt']",
      "rewrite-ns": 322359,
      "overhead-ns": 322359,
      "exec-ns": 293249,
      "total-ns": 615608,
      "patts-hit": {},
      "rewritten": "_ = my_transaction['TransactionAmt']\n"
    },
    {
      "raw": "# boxplot da esik deger atama\nQ1=my_transaction['TransactionAmt'].quantile(0.25)\nQ3=my_transaction['TransactionAmt'].quantile(0.75)\nIQR=Q3-Q1\nmy_TransactionAmt_Alt_Sinir = Q1-2.5*IQR\nmy_TransactionAmt_Ust_Sinir = Q3 + 2.5*IQR",
      "rewrite-ns": 1780996,
      "overhead-ns": 1780996,
      "exec-ns": 14013921,
      "total-ns": 15794917,
      "patts-hit": {},
      "rewritten": "Q1 = my_transaction['TransactionAmt'].quantile(0.25)\nQ3 = my_transaction['TransactionAmt'].quantile(0.75)\nIQR = Q3 - Q1\nmy_TransactionAmt_Alt_Sinir = Q1 - 2.5 * IQR\nmy_TransactionAmt_Ust_Sinir = Q3 + 2.5 * IQR\n"
    },
    {
      "raw": "Q1, Q3 , IQR,my_TransactionAmt_Alt_Sinir,my_TransactionAmt_Ust_Sinir",
      "rewrite-ns": 418985,
      "overhead-ns": 418985,
      "exec-ns": 565840,
      "total-ns": 984825,
      "patts-hit": {},
      "rewritten": "Q1, Q3, IQR, my_TransactionAmt_Alt_Sinir, my_TransactionAmt_Ust_Sinir\n"
    },
    {
      "raw": "# boxplot ile belirlenen aykiri degerlere erismek\naykiri_TF=(my_transaction['TransactionAmt']<my_TransactionAmt_Alt_Sinir)|(my_transaction['TransactionAmt']>my_TransactionAmt_Ust_Sinir)\nmy_transaction[aykiri_TF].index",
      "rewrite-ns": 992698,
      "overhead-ns": 992698,
      "exec-ns": 16575648,
      "total-ns": 17568346,
      "patts-hit": {},
      "rewritten": "aykiri_TF = (my_transaction['TransactionAmt'] < my_TransactionAmt_Alt_Sinir\n    ) | (my_transaction['TransactionAmt'] > my_TransactionAmt_Ust_Sinir)\nmy_transaction[aykiri_TF].index\n"
    },
    {
      "raw": "# baskilama ile ust deger sonrasi degerlere ust degeri, alt deger sonrasina ise alt degeri atama\ndef AykiriDegeriBaskila(deger):\n    \n    if deger > my_TransactionAmt_Ust_Sinir:\n       \n        deger=my_TransactionAmt_Ust_Sinir\n    elif deger < my_TransactionAmt_Alt_Sinir:\n       \n        deger=-my_TransactionAmt_Alt_Sinir\n    \n    return deger\n\nmy_transaction['TransactionAmt'] = my_transaction['TransactionAmt'].apply(lambda x: AykiriDegeriBaskila(x))",
      "rewrite-ns": 1744002,
      "overhead-ns": 1744002,
      "exec-ns": 151973577,
      "total-ns": 153717579,
      "patts-hit": {},
      "rewritten": "def AykiriDegeriBaskila(deger):\n    if deger > my_TransactionAmt_Ust_Sinir:\n        deger = my_TransactionAmt_Ust_Sinir\n    elif deger < my_TransactionAmt_Alt_Sinir:\n        deger = -my_TransactionAmt_Alt_Sinir\n    return deger\nmy_transaction['TransactionAmt'] = my_transaction['TransactionAmt'].apply(\n    lambda x: AykiriDegeriBaskila(x))\n"
    },
    {
      "raw": "my_transaction.card1.describe()",
      "rewrite-ns": 417804,
      "overhead-ns": 417804,
      "exec-ns": 14083765,
      "total-ns": 14501569,
      "patts-hit": {},
      "rewritten": "my_transaction.card1.describe()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: make notebook run\ndf = my_transaction\n\ndf_train, df_test = df[df['isFraud'] != 'test'], df[df['isFraud'] == 2].drop('isFraud', axis=1)",
      "rewrite-ns": 1434931,
      "overhead-ns": 1434931,
      "exec-ns": 203616174,
      "total-ns": 205051105,
      "patts-hit": {},
      "rewritten": "df = my_transaction\ndf_train, df_test = df[df['isFraud'] != 'test'], df[df['isFraud'] == 2].drop(\n    'isFraud', axis=1)\n"
    },
    {
      "raw": "",
      "rewrite-ns": 25533,
      "overhead-ns": 25533,
      "exec-ns": 122651,
      "total-ns": 148184,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 24.400334877,
  "max-disk-in-mb": 0
}