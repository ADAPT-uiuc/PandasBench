{
  "max-mem-in-mb": 153,
  "max-mem-in-mb2": 159,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n\n# ALEX: remove plotting\n# import matplotlib.pyplot as plt\n# plt.style.use(\"seaborn-whitegrid\")\n\n# import seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# ALEX: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('./input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.",
      "rewrite-ns": 1233351,
      "overhead-ns": 1233351,
      "exec-ns": 573157,
      "total-ns": 1806508,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')\n"
    },
    {
      "raw": "train_df = pd.read_csv(\"./input/train.scaled.csv\")\ntest_df = pd.read_csv(\"./input/test.scaled.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]",
      "rewrite-ns": 1225038,
      "overhead-ns": 1225038,
      "exec-ns": 60167176,
      "total-ns": 61392214,
      "patts-hit": {},
      "rewritten": "train_df = pd.read_csv('./input/train.scaled.csv')\ntest_df = pd.read_csv('./input/test.scaled.csv')\ntest_PassengerId = test_df['PassengerId']\n"
    },
    {
      "raw": "train_df.columns",
      "rewrite-ns": 86149,
      "overhead-ns": 86149,
      "exec-ns": 1484769,
      "total-ns": 1570918,
      "patts-hit": {},
      "rewritten": "train_df.columns\n"
    },
    {
      "raw": "train_df.head()",
      "rewrite-ns": 122384,
      "overhead-ns": 122384,
      "exec-ns": 11697606,
      "total-ns": 11819990,
      "patts-hit": {},
      "rewritten": "train_df.head()\n"
    },
    {
      "raw": "train_df.describe()",
      "rewrite-ns": 120589,
      "overhead-ns": 120589,
      "exec-ns": 27189545,
      "total-ns": 27310134,
      "patts-hit": {},
      "rewritten": "train_df.describe()\n"
    },
    {
      "raw": "train_df.info()",
      "rewrite-ns": 118243,
      "overhead-ns": 118243,
      "exec-ns": 24670657,
      "total-ns": 24788900,
      "patts-hit": {},
      "rewritten": "train_df.info()\n"
    },
    {
      "raw": "def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n# ALEX: remove plotting\n#     plt.figure(figsize = (9,3))\n#     plt.bar(varValue.index, varValue)\n#     plt.xticks(varValue.index, varValue.index.values)\n#     plt.ylabel(\"Frequency\")\n#     plt.title(variable)\n#     plt.show()\n#     print(\"{}: \\n {}\".format(variable,varValue))\n    _ = varValue.index\n    _ = varValue.index\n    _ = varValue.index.values\n    _ = \"{}: \\n {}\".format(variable,varValue)\n    ",
      "rewrite-ns": 2312579,
      "overhead-ns": 2312579,
      "exec-ns": 804432,
      "total-ns": 3117011,
      "patts-hit": {},
      "rewritten": "def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    var = train_df[variable]\n    varValue = var.value_counts()\n    _ = varValue.index\n    _ = varValue.index\n    _ = varValue.index.values\n    _ = '{}: \\n {}'.format(variable, varValue)\n"
    },
    {
      "raw": "category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)",
      "rewrite-ns": 1136973,
      "overhead-ns": 1136973,
      "exec-ns": 6825334,
      "total-ns": 7962307,
      "patts-hit": {},
      "rewritten": "category1 = ['Survived', 'Sex', 'Pclass', 'Embarked', 'SibSp', 'Parch']\nfor c in category1:\n    bar_plot(c)\n"
    },
    {
      "raw": "category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))",
      "rewrite-ns": 1381263,
      "overhead-ns": 1381263,
      "exec-ns": 7094527,
      "total-ns": 8475790,
      "patts-hit": {},
      "rewritten": "category2 = ['Cabin', 'Name', 'Ticket']\nfor c in category2:\n    print('{} \\n'.format(train_df[c].value_counts()))\n"
    },
    {
      "raw": "def plot_hist(variable):\n# ALEX: remove plotting\n#     plt.figure(figsize = (9,3))\n#     plt.hist(train_df[variable], bins = 50)\n#     plt.xlabel(variable)\n#     plt.ylabel(\"Frequency\")\n#     plt.title(\"{} distribution with hist\".format(variable))\n#     plt.show()\n    _ = train_df[variable]\n    _ = \"{} distribution with hist\".format(variable)",
      "rewrite-ns": 976250,
      "overhead-ns": 976250,
      "exec-ns": 402847,
      "total-ns": 1379097,
      "patts-hit": {},
      "rewritten": "def plot_hist(variable):\n    _ = train_df[variable]\n    _ = '{} distribution with hist'.format(variable)\n"
    },
    {
      "raw": "numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)",
      "rewrite-ns": 900172,
      "overhead-ns": 900172,
      "exec-ns": 415790,
      "total-ns": 1315962,
      "patts-hit": {},
      "rewritten": "numericVar = ['Fare', 'Age', 'PassengerId']\nfor n in numericVar:\n    plot_hist(n)\n"
    },
    {
      "raw": "# Plcass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)",
      "rewrite-ns": 1336588,
      "overhead-ns": 1336588,
      "exec-ns": 6345848,
      "total-ns": 7682436,
      "patts-hit": {},
      "rewritten": "train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean(\n    ).sort_values(by='Survived', ascending=False)\n"
    },
    {
      "raw": "# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)",
      "rewrite-ns": 1333392,
      "overhead-ns": 1333392,
      "exec-ns": 7472240,
      "total-ns": 8805632,
      "patts-hit": {},
      "rewritten": "train_df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean(\n    ).sort_values(by='Survived', ascending=False)\n"
    },
    {
      "raw": "# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)",
      "rewrite-ns": 1329225,
      "overhead-ns": 1329225,
      "exec-ns": 6339360,
      "total-ns": 7668585,
      "patts-hit": {},
      "rewritten": "train_df[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean(\n    ).sort_values(by='Survived', ascending=False)\n"
    },
    {
      "raw": "# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)",
      "rewrite-ns": 1322961,
      "overhead-ns": 1322961,
      "exec-ns": 6345253,
      "total-ns": 7668214,
      "patts-hit": {},
      "rewritten": "train_df[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean(\n    ).sort_values(by='Survived', ascending=False)\n"
    },
    {
      "raw": "def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers",
      "rewrite-ns": 5538859,
      "overhead-ns": 5538859,
      "exec-ns": 1130031,
      "total-ns": 6668890,
      "patts-hit": {},
      "rewritten": "def detect_outliers(df, features):\n    outlier_indices = []\n    for c in features:\n        Q1 = np.percentile(df[c], 25)\n        Q3 = np.percentile(df[c], 75)\n        IQR = Q3 - Q1\n        outlier_step = IQR * 1.5\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 +\n            outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    return multiple_outliers\n"
    },
    {
      "raw": "train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]",
      "rewrite-ns": 810270,
      "overhead-ns": 810270,
      "exec-ns": 24266374,
      "total-ns": 25076644,
      "patts-hit": {},
      "rewritten": "train_df.loc[detect_outliers(train_df, ['Age', 'SibSp', 'Parch', 'Fare'])]\n"
    },
    {
      "raw": "# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)",
      "rewrite-ns": 1249677,
      "overhead-ns": 1249677,
      "exec-ns": 15962336,
      "total-ns": 17212013,
      "patts-hit": {},
      "rewritten": "train_df = train_df.drop(detect_outliers(train_df, ['Age', 'SibSp', 'Parch',\n    'Fare']), axis=0).reset_index(drop=True)\n"
    },
    {
      "raw": "train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)",
      "rewrite-ns": 1286940,
      "overhead-ns": 1286940,
      "exec-ns": 17973985,
      "total-ns": 19260925,
      "patts-hit": {},
      "rewritten": "train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis=0).reset_index(drop=True)\n"
    },
    {
      "raw": "train_df.head()",
      "rewrite-ns": 121667,
      "overhead-ns": 121667,
      "exec-ns": 10676625,
      "total-ns": 10798292,
      "patts-hit": {},
      "rewritten": "train_df.head()\n"
    },
    {
      "raw": "train_df.columns[train_df.isnull().any()]",
      "rewrite-ns": 699131,
      "overhead-ns": 699131,
      "exec-ns": 29747092,
      "total-ns": 30446223,
      "patts-hit": {},
      "rewritten": "train_df.columns[train_df.isnull().any()]\n"
    },
    {
      "raw": "train_df.isnull().sum()",
      "rewrite-ns": 511954,
      "overhead-ns": 511954,
      "exec-ns": 30456402,
      "total-ns": 30968356,
      "patts-hit": {},
      "rewritten": "train_df.isnull().sum()\n"
    },
    {
      "raw": "train_df[train_df[\"Embarked\"].isnull()]",
      "rewrite-ns": 641250,
      "overhead-ns": 641250,
      "exec-ns": 15623723,
      "total-ns": 16264973,
      "patts-hit": {},
      "rewritten": "train_df[train_df['Embarked'].isnull()]\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# train_df.boxplot(column=\"Fare\",by = \"Embarked\")\n# plt.show()",
      "rewrite-ns": 21335,
      "overhead-ns": 21335,
      "exec-ns": 109300,
      "total-ns": 130635,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]",
      "rewrite-ns": 1063931,
      "overhead-ns": 1063931,
      "exec-ns": 6255697,
      "total-ns": 7319628,
      "patts-hit": {
        "IsInplaceUpdate": 1
      },
      "rewritten": "_DIAS_ser = train_df['Embarked']\nif type(_DIAS_ser) != pd.Series:\n    train_df['Embarked'] = train_df['Embarked'].fillna('C')\nelse:\n    train_df['Embarked'].fillna('C', inplace=True)\ntrain_df[train_df['Embarked'].isnull()]\n"
    },
    {
      "raw": "train_df[train_df[\"Fare\"].isnull()]",
      "rewrite-ns": 636578,
      "overhead-ns": 636578,
      "exec-ns": 14100249,
      "total-ns": 14736827,
      "patts-hit": {},
      "rewritten": "train_df[train_df['Fare'].isnull()]\n"
    },
    {
      "raw": "train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))",
      "rewrite-ns": 792149,
      "overhead-ns": 792149,
      "exec-ns": 3726128,
      "total-ns": 4518277,
      "patts-hit": {
        "IsInplaceUpdate": 1
      },
      "rewritten": "_DIAS_ser = train_df['Fare']\nif type(_DIAS_ser) != pd.Series:\n    train_df['Fare'] = train_df['Fare'].fillna(np.mean(train_df[train_df[\n        'Pclass'] == 3]['Fare']))\nelse:\n    train_df['Fare'].fillna(np.mean(train_df[train_df['Pclass'] == 3][\n        'Fare']), inplace=True)\n"
    },
    {
      "raw": "train_df[train_df[\"Fare\"].isnull()]",
      "rewrite-ns": 624010,
      "overhead-ns": 624010,
      "exec-ns": 1596209,
      "total-ns": 2220219,
      "patts-hit": {},
      "rewritten": "train_df[train_df['Fare'].isnull()]\n"
    },
    {
      "raw": "list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\n# ALEX: remove plotting\n# sns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\n# plt.show()\n_ = train_df[list1].corr()",
      "rewrite-ns": 1023278,
      "overhead-ns": 1023278,
      "exec-ns": 6117106,
      "total-ns": 7140384,
      "patts-hit": {},
      "rewritten": "list1 = ['SibSp', 'Parch', 'Age', 'Fare', 'Survived']\n_ = train_df[list1].corr()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\n# g.set_ylabels(\"Survived Probability\")\n# plt.show()",
      "rewrite-ns": 22211,
      "overhead-ns": 22211,
      "exec-ns": 104521,
      "total-ns": 126732,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\n# g.set_ylabels(\"Survived Probability\")\n# plt.show()",
      "rewrite-ns": 19826,
      "overhead-ns": 19826,
      "exec-ns": 96497,
      "total-ns": 116323,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\n# g.set_ylabels(\"Survived Probability\")\n# plt.show()",
      "rewrite-ns": 17981,
      "overhead-ns": 17981,
      "exec-ns": 91372,
      "total-ns": 109353,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.FacetGrid(train_df, col = \"Survived\")\n# g.map(sns.distplot, \"Age\", bins = 25)\n# plt.show()",
      "rewrite-ns": 17405,
      "overhead-ns": 17405,
      "exec-ns": 88557,
      "total-ns": 105962,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\n# g.map(plt.hist, \"Age\", bins = 25)\n# g.add_legend()\n# plt.show()",
      "rewrite-ns": 17579,
      "overhead-ns": 17579,
      "exec-ns": 85459,
      "total-ns": 103038,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\n# g.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\n# g.add_legend()\n# plt.show()",
      "rewrite-ns": 17727,
      "overhead-ns": 17727,
      "exec-ns": 85439,
      "total-ns": 103166,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\n# g.map(sns.barplot, \"Sex\", \"Fare\")\n# g.add_legend()\n# plt.show()",
      "rewrite-ns": 17787,
      "overhead-ns": 17787,
      "exec-ns": 86043,
      "total-ns": 103830,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df[train_df[\"Age\"].isnull()]",
      "rewrite-ns": 624290,
      "overhead-ns": 624290,
      "exec-ns": 14225425,
      "total-ns": 14849715,
      "patts-hit": {},
      "rewritten": "train_df[train_df['Age'].isnull()]\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\n# plt.show()",
      "rewrite-ns": 22144,
      "overhead-ns": 22144,
      "exec-ns": 108045,
      "total-ns": 130189,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\n# plt.show()",
      "rewrite-ns": 20083,
      "overhead-ns": 20083,
      "exec-ns": 97832,
      "total-ns": 117915,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\n# sns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\n# plt.show()",
      "rewrite-ns": 19729,
      "overhead-ns": 19729,
      "exec-ns": 90668,
      "total-ns": 110397,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "#train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]",
      "rewrite-ns": 16834,
      "overhead-ns": 16834,
      "exec-ns": 86894,
      "total-ns": 103728,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\n# plt.show()\n_ = train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr()",
      "rewrite-ns": 821273,
      "overhead-ns": 821273,
      "exec-ns": 5297775,
      "total-ns": 6119048,
      "patts-hit": {},
      "rewritten": "_ = train_df[['Age', 'Sex', 'SibSp', 'Parch', 'Pclass']].corr()\n"
    },
    {
      "raw": "index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med",
      "rewrite-ns": 5431081,
      "overhead-ns": 5431081,
      "exec-ns": 21841301354,
      "total-ns": 21846732435,
      "patts-hit": {},
      "rewritten": "index_nan_age = list(train_df['Age'][train_df['Age'].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df['Age'][(train_df['SibSp'] == train_df.iloc[i][\n        'SibSp']) & (train_df['Parch'] == train_df.iloc[i]['Parch']) & (\n        train_df['Pclass'] == train_df.iloc[i]['Pclass'])].median()\n    age_med = train_df['Age'].median()\n    if not np.isnan(age_pred):\n        train_df['Age'].iloc[i] = age_pred\n    else:\n        train_df['Age'].iloc[i] = age_med\n"
    },
    {
      "raw": "train_df[train_df[\"Age\"].isnull()]",
      "rewrite-ns": 653208,
      "overhead-ns": 653208,
      "exec-ns": 1880938,
      "total-ns": 2534146,
      "patts-hit": {},
      "rewritten": "train_df[train_df['Age'].isnull()]\n"
    },
    {
      "raw": "train_df[\"Name\"].head(10)",
      "rewrite-ns": 444232,
      "overhead-ns": 444232,
      "exec-ns": 978007,
      "total-ns": 1422239,
      "patts-hit": {},
      "rewritten": "train_df['Name'].head(10)\n"
    },
    {
      "raw": "name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]",
      "rewrite-ns": 1326728,
      "overhead-ns": 1326728,
      "exec-ns": 20308307,
      "total-ns": 21635035,
      "patts-hit": {},
      "rewritten": "name = train_df['Name']\ntrain_df['Title'] = [i.split('.')[0].split(',')[-1].strip() for i in name]\n"
    },
    {
      "raw": "train_df[\"Title\"].head(10)",
      "rewrite-ns": 402453,
      "overhead-ns": 402453,
      "exec-ns": 1003065,
      "total-ns": 1405518,
      "patts-hit": {},
      "rewritten": "train_df['Title'].head(10)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.countplot(x=\"Title\", data = train_df)\n# plt.xticks(rotation = 60)\n# plt.show()",
      "rewrite-ns": 13060,
      "overhead-ns": 13060,
      "exec-ns": 63284,
      "total-ns": 76344,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)",
      "rewrite-ns": 2241597,
      "overhead-ns": 2241597,
      "exec-ns": 29492262,
      "total-ns": 31733859,
      "patts-hit": {},
      "rewritten": "train_df['Title'] = train_df['Title'].replace(['Lady', 'the Countess',\n    'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],\n    'other')\ntrain_df['Title'] = [(0 if i == 'Master' else 1 if i == 'Miss' or i == 'Ms' or\n    i == 'Mlle' or i == 'Mrs' else 2 if i == 'Mr' else 3) for i in train_df\n    ['Title']]\ntrain_df['Title'].head(20)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.countplot(x=\"Title\", data = train_df)\n# plt.xticks(rotation = 60)\n# plt.show()",
      "rewrite-ns": 12665,
      "overhead-ns": 12665,
      "exec-ns": 67989,
      "total-ns": 80654,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\n# g.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\n# g.set_ylabels(\"Survival Probability\")\n# plt.show()",
      "rewrite-ns": 12442,
      "overhead-ns": 12442,
      "exec-ns": 61072,
      "total-ns": 73514,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)",
      "rewrite-ns": 532981,
      "overhead-ns": 532981,
      "exec-ns": 3007374,
      "total-ns": 3540355,
      "patts-hit": {},
      "rewritten": "train_df.drop(labels=['Name'], axis=1, inplace=True)\n"
    },
    {
      "raw": "train_df.head()",
      "rewrite-ns": 72372,
      "overhead-ns": 72372,
      "exec-ns": 7943805,
      "total-ns": 8016177,
      "patts-hit": {},
      "rewritten": "train_df.head()\n"
    },
    {
      "raw": "train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()",
      "rewrite-ns": 536547,
      "overhead-ns": 536547,
      "exec-ns": 17223833,
      "total-ns": 17760380,
      "patts-hit": {},
      "rewritten": "train_df = pd.get_dummies(train_df, columns=['Title'])\ntrain_df.head()\n"
    },
    {
      "raw": "train_df.head()",
      "rewrite-ns": 77529,
      "overhead-ns": 77529,
      "exec-ns": 8664807,
      "total-ns": 8742336,
      "patts-hit": {},
      "rewritten": "train_df.head()\n"
    },
    {
      "raw": "train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1",
      "rewrite-ns": 679943,
      "overhead-ns": 679943,
      "exec-ns": 804144,
      "total-ns": 1484087,
      "patts-hit": {},
      "rewritten": "train_df['Fsize'] = train_df['SibSp'] + train_df['Parch'] + 1\n"
    },
    {
      "raw": "train_df.head()",
      "rewrite-ns": 74664,
      "overhead-ns": 74664,
      "exec-ns": 9214135,
      "total-ns": 9288799,
      "patts-hit": {},
      "rewritten": "train_df.head()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\n# g.set_ylabels(\"Survival\")\n# plt.show()",
      "rewrite-ns": 12852,
      "overhead-ns": 12852,
      "exec-ns": 66724,
      "total-ns": 79576,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]",
      "rewrite-ns": 747492,
      "overhead-ns": 747492,
      "exec-ns": 10795746,
      "total-ns": 11543238,
      "patts-hit": {},
      "rewritten": "train_df['family_size'] = [(1 if i < 5 else 0) for i in train_df['Fsize']]\n"
    },
    {
      "raw": "train_df.head(10)",
      "rewrite-ns": 88504,
      "overhead-ns": 88504,
      "exec-ns": 9829004,
      "total-ns": 9917508,
      "patts-hit": {},
      "rewritten": "train_df.head(10)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.countplot(x = \"family_size\", data = train_df)\n# plt.show()",
      "rewrite-ns": 12738,
      "overhead-ns": 12738,
      "exec-ns": 66300,
      "total-ns": 79038,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\n# g.set_ylabels(\"Survival\")\n# plt.show()",
      "rewrite-ns": 11670,
      "overhead-ns": 11670,
      "exec-ns": 59016,
      "total-ns": 70686,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()",
      "rewrite-ns": 539701,
      "overhead-ns": 539701,
      "exec-ns": 17272073,
      "total-ns": 17811774,
      "patts-hit": {},
      "rewritten": "train_df = pd.get_dummies(train_df, columns=['family_size'])\ntrain_df.head()\n"
    },
    {
      "raw": "train_df[\"Embarked\"].head()",
      "rewrite-ns": 368525,
      "overhead-ns": 368525,
      "exec-ns": 765820,
      "total-ns": 1134345,
      "patts-hit": {},
      "rewritten": "train_df['Embarked'].head()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.countplot(x = \"Embarked\", data = train_df)\n# plt.show()",
      "rewrite-ns": 12536,
      "overhead-ns": 12536,
      "exec-ns": 70360,
      "total-ns": 82896,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()",
      "rewrite-ns": 528195,
      "overhead-ns": 528195,
      "exec-ns": 19371056,
      "total-ns": 19899251,
      "patts-hit": {},
      "rewritten": "train_df = pd.get_dummies(train_df, columns=['Embarked'])\ntrain_df.head()\n"
    },
    {
      "raw": "train_df[\"Ticket\"].head(20)",
      "rewrite-ns": 409440,
      "overhead-ns": 409440,
      "exec-ns": 981138,
      "total-ns": 1390578,
      "patts-hit": {},
      "rewritten": "train_df['Ticket'].head(20)\n"
    },
    {
      "raw": "a = \"A/5. 2151\"\na.replace(\".\",\"\").replace(\"/\",\"\").strip().split(\" \")[0]",
      "rewrite-ns": 949791,
      "overhead-ns": 949791,
      "exec-ns": 667232,
      "total-ns": 1617023,
      "patts-hit": {},
      "rewritten": "a = 'A/5. 2151'\na.replace('.', '').replace('/', '').strip().split(' ')[0]\n"
    },
    {
      "raw": "tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets",
      "rewrite-ns": 2055437,
      "overhead-ns": 2055437,
      "exec-ns": 12189002,
      "total-ns": 14244439,
      "patts-hit": {},
      "rewritten": "tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace('.', '').replace('/', '').strip().split(\n            ' ')[0])\n    else:\n        tickets.append('x')\ntrain_df['Ticket'] = tickets\n"
    },
    {
      "raw": "train_df[\"Ticket\"].head(20)",
      "rewrite-ns": 396919,
      "overhead-ns": 396919,
      "exec-ns": 832372,
      "total-ns": 1229291,
      "patts-hit": {},
      "rewritten": "train_df['Ticket'].head(20)\n"
    },
    {
      "raw": "train_df.head()",
      "rewrite-ns": 73499,
      "overhead-ns": 73499,
      "exec-ns": 10666523,
      "total-ns": 10740022,
      "patts-hit": {},
      "rewritten": "train_df.head()\n"
    },
    {
      "raw": "train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)",
      "rewrite-ns": 604709,
      "overhead-ns": 604709,
      "exec-ns": 36473621,
      "total-ns": 37078330,
      "patts-hit": {},
      "rewritten": "train_df = pd.get_dummies(train_df, columns=['Ticket'], prefix='T')\ntrain_df.head(10)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.countplot(x = \"Pclass\", data = train_df)\n# plt.show()",
      "rewrite-ns": 14199,
      "overhead-ns": 14199,
      "exec-ns": 70415,
      "total-ns": 84614,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()",
      "rewrite-ns": 1000093,
      "overhead-ns": 1000093,
      "exec-ns": 34768756,
      "total-ns": 35768849,
      "patts-hit": {},
      "rewritten": "train_df['Pclass'] = train_df['Pclass'].astype('category')\ntrain_df = pd.get_dummies(train_df, columns=['Pclass'])\ntrain_df.head()\n"
    },
    {
      "raw": "train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()",
      "rewrite-ns": 1015543,
      "overhead-ns": 1015543,
      "exec-ns": 34504840,
      "total-ns": 35520383,
      "patts-hit": {},
      "rewritten": "train_df['Sex'] = train_df['Sex'].astype('category')\ntrain_df = pd.get_dummies(train_df, columns=['Sex'])\ntrain_df.head()\n"
    },
    {
      "raw": "train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)",
      "rewrite-ns": 572837,
      "overhead-ns": 572837,
      "exec-ns": 1729429,
      "total-ns": 2302266,
      "patts-hit": {},
      "rewritten": "train_df.drop(labels=['PassengerId', 'Cabin'], axis=1, inplace=True)\n"
    },
    {
      "raw": "train_df.columns",
      "rewrite-ns": 55487,
      "overhead-ns": 55487,
      "exec-ns": 820847,
      "total-ns": 876334,
      "patts-hit": {},
      "rewritten": "train_df.columns\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\n# from sklearn.linear_model import LogisticRegression\n# from sklearn.svm import SVC\n# from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n# from sklearn.neighbors import KNeighborsClassifier\n# from sklearn.tree import DecisionTreeClassifier\n# from sklearn.metrics import accuracy_score",
      "rewrite-ns": 14236,
      "overhead-ns": 14236,
      "exec-ns": 66723,
      "total-ns": 80959,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "train_df_len",
      "rewrite-ns": 49991,
      "overhead-ns": 49991,
      "exec-ns": 556715,
      "total-ns": 606706,
      "patts-hit": {},
      "rewritten": "train_df_len\n"
    },
    {
      "raw": "test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)\n",
      "rewrite-ns": 812962,
      "overhead-ns": 812962,
      "exec-ns": 1218090,
      "total-ns": 2031052,
      "patts-hit": {},
      "rewritten": "test = train_df[train_df_len:]\ntest.drop(labels=['Survived'], axis=1, inplace=True)\n"
    },
    {
      "raw": "test.head()",
      "rewrite-ns": 71662,
      "overhead-ns": 71662,
      "exec-ns": 23835596,
      "total-ns": 23907258,
      "patts-hit": {},
      "rewritten": "test.head()\n"
    },
    {
      "raw": "train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\n# ALEX: remove ML code\n# X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\n# print(\"X_train\",len(X_train))\n# print(\"X_test\",len(X_test))\n# print(\"y_train\",len(y_train))\n# print(\"y_test\",len(y_test))\nprint(\"test\",len(test))",
      "rewrite-ns": 1274211,
      "overhead-ns": 1274211,
      "exec-ns": 1670160,
      "total-ns": 2944371,
      "patts-hit": {},
      "rewritten": "train = train_df[:train_df_len]\nX_train = train.drop(labels='Survived', axis=1)\ny_train = train['Survived']\nprint('test', len(test))\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# logreg = LogisticRegression()\n# logreg.fit(X_train, y_train)\n# acc_log_train = round(logreg.score(X_train, y_train)*100,2) \n# acc_log_test = round(logreg.score(X_test,y_test)*100,2)\n# print(\"Training Accuracy: % {}\".format(acc_log_train))\n# print(\"Testing Accuracy: % {}\".format(acc_log_test))",
      "rewrite-ns": 14753,
      "overhead-ns": 14753,
      "exec-ns": 63964,
      "total-ns": 78717,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# random_state = 42\n# classifier = [DecisionTreeClassifier(random_state = random_state),\n#              SVC(random_state = random_state),\n#              RandomForestClassifier(random_state = random_state),\n#              LogisticRegression(random_state = random_state),\n#              KNeighborsClassifier()]\n\n# dt_param_grid = {\"min_samples_split\" : range(10,500,20),\n#                 \"max_depth\": range(1,20,2)}\n\n# svc_param_grid = {\"kernel\" : [\"rbf\"],\n#                  \"gamma\": [0.001, 0.01, 0.1, 1],\n#                  \"C\": [1,10,50,100,200,300,1000]}\n\n# rf_param_grid = {\"max_features\": [1,3,10],\n#                 \"min_samples_split\":[2,3,10],\n#                 \"min_samples_leaf\":[1,3,10],\n#                 \"bootstrap\":[False],\n#                 \"n_estimators\":[100,300],\n#                 \"criterion\":[\"gini\"]}\n\n# logreg_param_grid = {\"C\":np.logspace(-3,3,7),\n#                     \"penalty\": [\"l1\",\"l2\"]}\n\n# knn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n#                  \"weights\": [\"uniform\",\"distance\"],\n#                  \"metric\":[\"euclidean\",\"manhattan\"]}\n# classifier_param = [dt_param_grid,\n#                    svc_param_grid,\n#                    rf_param_grid,\n#                    logreg_param_grid,\n#                    knn_param_grid]",
      "rewrite-ns": 17024,
      "overhead-ns": 17024,
      "exec-ns": 58123,
      "total-ns": 75147,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# cv_result = []\n# best_estimators = []\n# for i in range(len(classifier)):\n#     clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n#     clf.fit(X_train,y_train)\n#     cv_result.append(clf.best_score_)\n#     best_estimators.append(clf.best_estimator_)\n#     print(cv_result[i])",
      "rewrite-ns": 12127,
      "overhead-ns": 12127,
      "exec-ns": 57708,
      "total-ns": 69835,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n#              \"LogisticRegression\",\n#              \"KNeighborsClassifier\"]})\n\n# g = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\n# g.set_xlabel(\"Mean Accuracy\")\n# g.set_title(\"Cross Validation Scores\")",
      "rewrite-ns": 11759,
      "overhead-ns": 11759,
      "exec-ns": 57231,
      "total-ns": 68990,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n#                                         (\"rfc\",best_estimators[2]),\n#                                         (\"lr\",best_estimators[3])],\n#                                         voting = \"soft\", n_jobs = -1)\n# votingC = votingC.fit(X_train, y_train)\n# print(accuracy_score(votingC.predict(X_test),y_test))",
      "rewrite-ns": 11547,
      "overhead-ns": 11547,
      "exec-ns": 55222,
      "total-ns": 66769,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove ML code\n# test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\n# results = pd.concat([test_PassengerId, test_survived],axis = 1)\n# results.to_csv(\"titanic.csv\", index = False)",
      "rewrite-ns": 10351,
      "overhead-ns": 10351,
      "exec-ns": 53771,
      "total-ns": 64122,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 22.583715625,
  "max-disk-in-mb": 0
}