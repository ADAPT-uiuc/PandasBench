{
  "max-mem-in-mb": 1549,
  "max-mem-in-mb2": 2109,
  "cells": [
    {
      "raw": "# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\n# ALEX: remove plotting\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n# %matplotlib inline",
      "rewrite-ns": 685759,
      "overhead-ns": 685759,
      "exec-ns": 405551,
      "total-ns": 1091310,
      "patts-hit": {},
      "rewritten": "exec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\n"
    },
    {
      "raw": "df = pd.read_csv('./input/train.scaled.csv')\ndf_test = pd.read_csv('./input/test.scaled.csv')",
      "rewrite-ns": 939830,
      "overhead-ns": 939830,
      "exec-ns": 3436302181,
      "total-ns": 3437242011,
      "patts-hit": {},
      "rewritten": "df = pd.read_csv('./input/train.scaled.csv')\ndf_test = pd.read_csv('./input/test.scaled.csv')\n"
    },
    {
      "raw": "train_size = len(df)",
      "rewrite-ns": 428183,
      "overhead-ns": 428183,
      "exec-ns": 357120,
      "total-ns": 785303,
      "patts-hit": {},
      "rewritten": "train_size = len(df)\n"
    },
    {
      "raw": "features = pd.concat([df.drop('SalePrice',axis=1),df_test],sort=False).reset_index(drop=True)\ntarget = df['SalePrice'].copy()",
      "rewrite-ns": 1397736,
      "overhead-ns": 1397736,
      "exec-ns": 1166657371,
      "total-ns": 1168055107,
      "patts-hit": {},
      "rewritten": "features = pd.concat([df.drop('SalePrice', axis=1), df_test], sort=False\n    ).reset_index(drop=True)\ntarget = df['SalePrice'].copy()\n"
    },
    {
      "raw": "df.head()",
      "rewrite-ns": 123402,
      "overhead-ns": 123402,
      "exec-ns": 40848689,
      "total-ns": 40972091,
      "patts-hit": {},
      "rewritten": "df.head()\n"
    },
    {
      "raw": "print('number of numeric columns: ' + str(len(df.select_dtypes(['int64','float64']).columns)))\nprint('number of categorical columns: ' + str(len(df.select_dtypes(['object']).columns)))",
      "rewrite-ns": 1614783,
      "overhead-ns": 1614783,
      "exec-ns": 67845100,
      "total-ns": 69459883,
      "patts-hit": {},
      "rewritten": "print('number of numeric columns: ' + str(len(df.select_dtypes(['int64',\n    'float64']).columns)))\nprint('number of categorical columns: ' + str(len(df.select_dtypes([\n    'object']).columns)))\n"
    },
    {
      "raw": "#correlation to SalePrice\n# ALEX: remove plotting\n# plt.figure(figsize=(12,6))\n# df.corr()['SalePrice'].drop('SalePrice').sort_values().plot(kind='bar')\ndf.corr()['SalePrice'].drop('SalePrice').sort_values()",
      "rewrite-ns": 660667,
      "overhead-ns": 660667,
      "exec-ns": 1050024408,
      "total-ns": 1050685075,
      "patts-hit": {},
      "rewritten": "df.corr()['SalePrice'].drop('SalePrice').sort_values()\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.jointplot(x='OverallQual', y='SalePrice', data=df)\n\n# sns.jointplot(x='GrLivArea', y='SalePrice', data=df)",
      "rewrite-ns": 23078,
      "overhead-ns": 23078,
      "exec-ns": 110223,
      "total-ns": 133301,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "#23 catergorical columns with missing values\nmissing_str = features.select_dtypes('object').isnull().sum().sort_values(ascending=False)\nmissing_str[missing_str>0]",
      "rewrite-ns": 1156706,
      "overhead-ns": 1156706,
      "exec-ns": 2507375564,
      "total-ns": 2508532270,
      "patts-hit": {},
      "rewritten": "missing_str = features.select_dtypes('object').isnull().sum().sort_values(\n    ascending=False)\nmissing_str[missing_str > 0]\n"
    },
    {
      "raw": "fill_none = ['MiscFeature','Alley','Fence','FireplaceQu','GarageType','GarageCond', 'GarageQual','GarageFinish','BsmtCond','BsmtFinType1', 'BsmtFinType2', 'BsmtExposure', 'BsmtQual','MasVnrType']\nfeatures[fill_none] = features[fill_none].fillna('None',inplace=False)",
      "rewrite-ns": 1386910,
      "overhead-ns": 1386910,
      "exec-ns": 3015249375,
      "total-ns": 3016636285,
      "patts-hit": {},
      "rewritten": "fill_none = ['MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'GarageType',\n    'GarageCond', 'GarageQual', 'GarageFinish', 'BsmtCond', 'BsmtFinType1',\n    'BsmtFinType2', 'BsmtExposure', 'BsmtQual', 'MasVnrType']\nfeatures[fill_none] = features[fill_none].fillna('None', inplace=False)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.scatterplot(x='PoolArea',y='SalePrice',data=df.fillna('Missing'),hue='PoolQC')\n_ = df.fillna('Missing')",
      "rewrite-ns": 515972,
      "overhead-ns": 515972,
      "exec-ns": 1268372486,
      "total-ns": 1268888458,
      "patts-hit": {},
      "rewritten": "_ = df.fillna('Missing')\n"
    },
    {
      "raw": "features['PoolQC'].fillna('N',inplace=True)\nfeatures['PoolQC'].replace({'Ex':'Y','Fa':'Y','Gd':'Y'},inplace=True)\nfeatures.drop('PoolArea',axis=1,inplace=True)",
      "rewrite-ns": 1585863,
      "overhead-ns": 1585863,
      "exec-ns": 353734763,
      "total-ns": 355320626,
      "patts-hit": {},
      "rewritten": "features['PoolQC'].fillna('N', inplace=True)\nfeatures['PoolQC'].replace({'Ex': 'Y', 'Fa': 'Y', 'Gd': 'Y'}, inplace=True)\nfeatures.drop('PoolArea', axis=1, inplace=True)\n"
    },
    {
      "raw": "otr_cate = ['MSZoning', 'Utilities', 'Functional', 'Electrical', 'SaleType', 'Exterior2nd', 'Exterior1st', 'KitchenQual']\nfor c in otr_cate:\n    features[c] = features[c].fillna(features[c].mode()[0],inplace=False)",
      "rewrite-ns": 1654051,
      "overhead-ns": 1654051,
      "exec-ns": 1324686694,
      "total-ns": 1326340745,
      "patts-hit": {},
      "rewritten": "otr_cate = ['MSZoning', 'Utilities', 'Functional', 'Electrical', 'SaleType',\n    'Exterior2nd', 'Exterior1st', 'KitchenQual']\nfor c in otr_cate:\n    features[c] = features[c].fillna(features[c].mode()[0], inplace=False)\n"
    },
    {
      "raw": "#11 catergorical columns with missing values\nmissing_num = features.select_dtypes(['int64','float64']).isnull().sum().sort_values(ascending=False)\nmissing_num[missing_num>0]",
      "rewrite-ns": 1259680,
      "overhead-ns": 1259680,
      "exec-ns": 79741120,
      "total-ns": 81000800,
      "patts-hit": {},
      "rewritten": "missing_num = features.select_dtypes(['int64', 'float64']).isnull().sum(\n    ).sort_values(ascending=False)\nmissing_num[missing_num > 0]\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# df.plot(x='LotFrontage',y='LotArea',kind='scatter')",
      "rewrite-ns": 20865,
      "overhead-ns": 20865,
      "exec-ns": 107514,
      "total-ns": 128379,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "features['LotFrontage'].fillna(features['LotFrontage'].median(),inplace=True)",
      "rewrite-ns": 750800,
      "overhead-ns": 750800,
      "exec-ns": 12335984,
      "total-ns": 13086784,
      "patts-hit": {},
      "rewritten": "features['LotFrontage'].fillna(features['LotFrontage'].median(), inplace=True)\n"
    },
    {
      "raw": "features[features['GarageCond']=='None']['GarageYrBlt'].isnull().sum()",
      "rewrite-ns": 803493,
      "overhead-ns": 803493,
      "exec-ns": 467811652,
      "total-ns": 468615145,
      "patts-hit": {},
      "rewritten": "features[features['GarageCond'] == 'None']['GarageYrBlt'].isnull().sum()\n"
    },
    {
      "raw": "features['GarageYrBlt'].fillna(0,inplace=True)",
      "rewrite-ns": 546654,
      "overhead-ns": 546654,
      "exec-ns": 1870619,
      "total-ns": 2417273,
      "patts-hit": {},
      "rewritten": "features['GarageYrBlt'].fillna(0, inplace=True)\n"
    },
    {
      "raw": "fill_zero = ['GarageArea','GarageCars','MasVnrArea','BsmtFullBath','BsmtHalfBath','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF']\nfeatures[fill_zero] = features[fill_zero].fillna(0)",
      "rewrite-ns": 1080533,
      "overhead-ns": 1080533,
      "exec-ns": 60867207,
      "total-ns": 61947740,
      "patts-hit": {},
      "rewritten": "fill_zero = ['GarageArea', 'GarageCars', 'MasVnrArea', 'BsmtFullBath',\n    'BsmtHalfBath', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF']\nfeatures[fill_zero] = features[fill_zero].fillna(0)\n"
    },
    {
      "raw": "# focusing on first row, and found some point does not follow the trend\n# ALEX: remove plotting\n# sns.pairplot(df[['SalePrice','GrLivArea','1stFlrSF','TotalBsmtSF','LotFrontage','LotArea']].dropna())\n_ = df[['SalePrice','GrLivArea','1stFlrSF','TotalBsmtSF','LotFrontage','LotArea']].dropna()",
      "rewrite-ns": 755490,
      "overhead-ns": 755490,
      "exec-ns": 61100937,
      "total-ns": 61856427,
      "patts-hit": {},
      "rewritten": "_ = df[['SalePrice', 'GrLivArea', '1stFlrSF', 'TotalBsmtSF', 'LotFrontage',\n    'LotArea']].dropna()\n"
    },
    {
      "raw": "drop_index = [] # list to contain all rows should be excluded\ndrop_index.append(df[(df['GrLivArea']>4500) & (df['SalePrice']<400000)].loc[:train_size].index)\ndrop_index.append(df[(df['1stFlrSF']>4000) & (df['SalePrice']<400000)].loc[:train_size].index)\ndrop_index.append(df[(df['TotalBsmtSF']>6000) & (df['SalePrice']<400000)].loc[:train_size].index)\ndrop_index.append(df[df['LotArea']>100000].index)\ndrop_index.append(df[df['LotFrontage']>300].index)\n\ndrop_index = list(map(list,drop_index)) # IndexObject -> python list\ntmp = []\nfor sublist in drop_index:\n    for item in sublist:\n        tmp.append(item)\ndrop_index = list(set(tmp))  # merge into single list and take set() to remove the duplicated\n\nfeatures.drop(drop_index,inplace=True)\ntarget.drop(drop_index,inplace=True)",
      "rewrite-ns": 6598087,
      "overhead-ns": 6598087,
      "exec-ns": 321658733,
      "total-ns": 328256820,
      "patts-hit": {},
      "rewritten": "drop_index = []\ndrop_index.append(df[(df['GrLivArea'] > 4500) & (df['SalePrice'] < 400000)]\n    .loc[:train_size].index)\ndrop_index.append(df[(df['1stFlrSF'] > 4000) & (df['SalePrice'] < 400000)].\n    loc[:train_size].index)\ndrop_index.append(df[(df['TotalBsmtSF'] > 6000) & (df['SalePrice'] < 400000\n    )].loc[:train_size].index)\ndrop_index.append(df[df['LotArea'] > 100000].index)\ndrop_index.append(df[df['LotFrontage'] > 300].index)\ndrop_index = list(map(list, drop_index))\ntmp = []\nfor sublist in drop_index:\n    for item in sublist:\n        tmp.append(item)\ndrop_index = list(set(tmp))\nfeatures.drop(drop_index, inplace=True)\ntarget.drop(drop_index, inplace=True)\n"
    },
    {
      "raw": "features['MSSubClass'] = features['MSSubClass'].astype('object')",
      "rewrite-ns": 607496,
      "overhead-ns": 607496,
      "exec-ns": 28360621,
      "total-ns": 28968117,
      "patts-hit": {},
      "rewritten": "features['MSSubClass'] = features['MSSubClass'].astype('object')\n"
    },
    {
      "raw": "features['Utilities'].value_counts()",
      "rewrite-ns": 429306,
      "overhead-ns": 429306,
      "exec-ns": 26662906,
      "total-ns": 27092212,
      "patts-hit": {},
      "rewritten": "features['Utilities'].value_counts()\n"
    },
    {
      "raw": "features.drop('Utilities',axis=1,inplace=True)",
      "rewrite-ns": 502847,
      "overhead-ns": 502847,
      "exec-ns": 263637248,
      "total-ns": 264140095,
      "patts-hit": {},
      "rewritten": "features.drop('Utilities', axis=1, inplace=True)\n"
    },
    {
      "raw": "features.drop('Id',axis=1,inplace=True)",
      "rewrite-ns": 509180,
      "overhead-ns": 509180,
      "exec-ns": 260981564,
      "total-ns": 261490744,
      "patts-hit": {},
      "rewritten": "features.drop('Id', axis=1, inplace=True)\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# df.plot(x='LowQualFinSF',y='SalePrice',kind='scatter')",
      "rewrite-ns": 22296,
      "overhead-ns": 22296,
      "exec-ns": 107553,
      "total-ns": 129849,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "features['LowQualFinSF'] = features['LowQualFinSF'].apply(lambda x: 'Y' if x>0 else 'N')",
      "rewrite-ns": 1001360,
      "overhead-ns": 1001360,
      "exec-ns": 66902038,
      "total-ns": 67903398,
      "patts-hit": {},
      "rewritten": "features['LowQualFinSF'] = features['LowQualFinSF'].apply(lambda x: 'Y' if \n    x > 0 else 'N')\n"
    },
    {
      "raw": "#before take square root\n# ALEX: remove plotting\n# sns.jointplot(x=df['GrLivArea'],y=df['SalePrice'].apply(np.log1p),data=df,kind='reg')\n_ = df['GrLivArea']\n_ = df['SalePrice'].apply(np.log1p)",
      "rewrite-ns": 832765,
      "overhead-ns": 832765,
      "exec-ns": 1266001,
      "total-ns": 2098766,
      "patts-hit": {},
      "rewritten": "_ = df['GrLivArea']\n_ = df['SalePrice'].apply(np.log1p)\n"
    },
    {
      "raw": "#after take square root\n# ALEX: remove plotting\n# sns.jointplot(x=df['GrLivArea']**0.5,y=df['SalePrice'].apply(np.log1p),data=df,kind='reg')\n_ = df['GrLivArea']**0.5\n_ = df['SalePrice'].apply(np.log1p)",
      "rewrite-ns": 907412,
      "overhead-ns": 907412,
      "exec-ns": 6575737,
      "total-ns": 7483149,
      "patts-hit": {},
      "rewritten": "_ = df['GrLivArea'] ** 0.5\n_ = df['SalePrice'].apply(np.log1p)\n"
    },
    {
      "raw": "features['GrLivArea'] = features['GrLivArea']**0.5",
      "rewrite-ns": 504184,
      "overhead-ns": 504184,
      "exec-ns": 21121928,
      "total-ns": 21626112,
      "patts-hit": {},
      "rewritten": "features['GrLivArea'] = features['GrLivArea'] ** 0.5\n"
    },
    {
      "raw": "#predictor pairwise correlation check\ncorr_matrix = features.corr()\ncolinearity = {}\nfor column in corr_matrix.columns:\n    index = corr_matrix[corr_matrix[column]>0.6].index\n    for indice in index:\n        if not column == indice:\n            if not indice+' '+column in colinearity.keys():\n                colinearity[column+' '+indice]=corr_matrix.loc[indice,column]\ncolinearity",
      "rewrite-ns": 2873662,
      "overhead-ns": 2873662,
      "exec-ns": 1651783323,
      "total-ns": 1654656985,
      "patts-hit": {},
      "rewritten": "corr_matrix = features.corr()\ncolinearity = {}\nfor column in corr_matrix.columns:\n    index = corr_matrix[corr_matrix[column] > 0.6].index\n    for indice in index:\n        if not column == indice:\n            if not indice + ' ' + column in colinearity.keys():\n                colinearity[column + ' ' + indice] = corr_matrix.loc[indice,\n                    column]\ncolinearity\n"
    },
    {
      "raw": "high_collinerarity = ['GarageArea','TotRmsAbvGrd','1stFlrSF','2ndFlrSF','BsmtFinSF1','BsmtFinSF2','FullBath']\nfeatures = features.drop(high_collinerarity,axis=1)",
      "rewrite-ns": 934087,
      "overhead-ns": 934087,
      "exec-ns": 297661392,
      "total-ns": 298595479,
      "patts-hit": {},
      "rewritten": "high_collinerarity = ['GarageArea', 'TotRmsAbvGrd', '1stFlrSF', '2ndFlrSF',\n    'BsmtFinSF1', 'BsmtFinSF2', 'FullBath']\nfeatures = features.drop(high_collinerarity, axis=1)\n"
    },
    {
      "raw": "categorical_cols = list(features.select_dtypes('object').columns)\ndummies = pd.get_dummies(features[categorical_cols],drop_first=True)\nfeatures = pd.concat([features.drop(categorical_cols,axis=1),dummies],axis=1)",
      "rewrite-ns": 1752853,
      "overhead-ns": 1752853,
      "exec-ns": 3004140415,
      "total-ns": 3005893268,
      "patts-hit": {},
      "rewritten": "categorical_cols = list(features.select_dtypes('object').columns)\ndummies = pd.get_dummies(features[categorical_cols], drop_first=True)\nfeatures = pd.concat([features.drop(categorical_cols, axis=1), dummies], axis=1\n    )\n"
    },
    {
      "raw": "X_train = features.loc[0:train_size-1]\ny_train = target\nX_test = features.loc[train_size:]",
      "rewrite-ns": 1178583,
      "overhead-ns": 1178583,
      "exec-ns": 11775589,
      "total-ns": 12954172,
      "patts-hit": {},
      "rewritten": "X_train = features.loc[0:train_size - 1]\ny_train = target\nX_test = features.loc[train_size:]\n"
    },
    {
      "raw": "X_train.shape",
      "rewrite-ns": 79910,
      "overhead-ns": 79910,
      "exec-ns": 732673,
      "total-ns": 812583,
      "patts-hit": {},
      "rewritten": "X_train.shape\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# from sklearn.linear_model import RidgeCV\n# reg = RidgeCV()\n# reg.fit(X_train,np.log1p(y_train))\n_ = np.log1p(y_train)\n#reg.fit(X_train,y_train)",
      "rewrite-ns": 416373,
      "overhead-ns": 416373,
      "exec-ns": 1213732,
      "total-ns": 1630105,
      "patts-hit": {},
      "rewritten": "_ = np.log1p(y_train)\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# from sklearn.model_selection import cross_val_score\n# log_rms = np.sqrt(-np.mean(cross_val_score(reg, X_train,np.log1p(y_train), cv=5,scoring='neg_mean_squared_error')))\n# #log_rms = np.sqrt(-np.mean(cross_val_score(reg, X_train,y_train, cv=5,scoring='neg_mean_squared_log_error')))\n# print(f'RMLS : {log_rms}')\n_ = np.log1p(y_train)",
      "rewrite-ns": 374399,
      "overhead-ns": 374399,
      "exec-ns": 1133550,
      "total-ns": 1507949,
      "patts-hit": {},
      "rewritten": "_ = np.log1p(y_train)\n"
    },
    {
      "raw": "# ALEX: remove ML code\n# pred = np.expm1(reg.predict(X_train))\npred = np.expm1(y_train.to_numpy())\n#pred = reg.predict(X_train)",
      "rewrite-ns": 477053,
      "overhead-ns": 477053,
      "exec-ns": 1807555,
      "total-ns": 2284608,
      "patts-hit": {},
      "rewritten": "pred = np.expm1(y_train.to_numpy())\n"
    },
    {
      "raw": "comparison = pd.DataFrame({'prediction':pred.reshape(pred.shape[0],),'actual':y_train,'error':pred.reshape(pred.shape[0],)-y_train})\n# ALEX: remove plotting\n# sns.distplot(comparison['error'])\n_ = comparison['error']",
      "rewrite-ns": 1577313,
      "overhead-ns": 1577313,
      "exec-ns": 3916370,
      "total-ns": 5493683,
      "patts-hit": {},
      "rewritten": "comparison = pd.DataFrame({'prediction': pred.reshape(pred.shape[0]),\n    'actual': y_train, 'error': pred.reshape(pred.shape[0]) - y_train})\n_ = comparison['error']\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# comparison.plot(x='prediction',y='error',kind='scatter')",
      "rewrite-ns": 17052,
      "overhead-ns": 17052,
      "exec-ns": 86949,
      "total-ns": 104001,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# ALEX: remove plotting\n# comparison.plot(x='prediction',y='actual',kind='scatter')",
      "rewrite-ns": 14744,
      "overhead-ns": 14744,
      "exec-ns": 78352,
      "total-ns": 93096,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# output result for submission\n# ALEX: remove ML code\n# pred = np.expm1(reg.predict(X_test))\npred = np.expm1(y_train.to_numpy())\n# ALEX: make notebook run\n# pred = pd.DataFrame(pred.reshape(1459, ))\npred = pd.DataFrame(pred.reshape(pred.shape[0], ))\noutput = pd.concat([df_test['Id'],pred],axis=1).rename(columns={0:'SalePrice'})\noutput.to_csv('submission.csv',index=False)",
      "rewrite-ns": 2231514,
      "overhead-ns": 2231514,
      "exec-ns": 286565401,
      "total-ns": 288796915,
      "patts-hit": {},
      "rewritten": "pred = np.expm1(y_train.to_numpy())\npred = pd.DataFrame(pred.reshape(pred.shape[0]))\noutput = pd.concat([df_test['Id'], pred], axis=1).rename(columns={(0):\n    'SalePrice'})\noutput.to_csv('submission.csv', index=False)\n"
    },
    {
      "raw": "steps = ['Control','Outliers','Log_y','Modification','Non-linearity','Collinearity']\nrmls = [0.15494899171649665,0.14154336306738766,0.11543537404168344,0.11479554199015254,0.11394995795225088,0.11326714995779572]\nscores = pd.DataFrame({'steps':steps,'rmls':rmls})\n\n# ALEX: remove plotting\n# scores.plot(x='steps',y='rmls',marker='o',rot=90)\n# plt.xlabel('Preprocessing Actions',fontsize=14)\n# plt.ylabel('RMLS',fontsize=14)\n# plt.title('RMLS Changing wrt to Preprocessing Actions',fontsize=16)",
      "rewrite-ns": 1354685,
      "overhead-ns": 1354685,
      "exec-ns": 755102,
      "total-ns": 2109787,
      "patts-hit": {},
      "rewritten": "steps = ['Control', 'Outliers', 'Log_y', 'Modification', 'Non-linearity',\n    'Collinearity']\nrmls = [0.15494899171649665, 0.14154336306738766, 0.11543537404168344, \n    0.11479554199015254, 0.11394995795225088, 0.11326714995779572]\nscores = pd.DataFrame({'steps': steps, 'rmls': rmls})\n"
    }
  ],
  "total-time-in-sec": 21.217316906,
  "max-disk-in-mb": 0
}