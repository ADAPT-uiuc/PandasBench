{
  "max-mem-in-mb": 1867,
  "max-mem-in-mb2": 2168,
  "cells": [
    {
      "raw": "from datetime import date\n# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\n# FIRST-AUTHOR: remove plotting\n# import matplotlib.pyplot as graphic\n\n# from math import sqrt, factorial, log, ceil\n# from sklearn.neighbors import KNeighborsClassifier\n# from sklearn.model_selection import cross_val_score\n\n# from sklearn.model_selection import train_test_split\n# from sklearn.preprocessing import LabelEncoder\n\n# import matplotlib.pyplot as plt\n# import seaborn as sns\n# import random \n# import warnings\n# import operator\n# warnings.filterwarnings(\"ignore\")",
      "rewrite-ns": 817974,
      "overhead-ns": 817974,
      "exec-ns": 441922,
      "total-ns": 1259896,
      "patts-hit": {},
      "rewritten": "from datetime import date\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\n"
    },
    {
      "raw": "train = pd.read_csv('./input/train.scaled.csv')\ntest = pd.read_csv('./input/test.scaled.csv')",
      "rewrite-ns": 953176,
      "overhead-ns": 953176,
      "exec-ns": 2183595300,
      "total-ns": 2184548476,
      "patts-hit": {},
      "rewritten": "train = pd.read_csv('./input/train.scaled.csv')\ntest = pd.read_csv('./input/test.scaled.csv')\n"
    },
    {
      "raw": "target_name = 'Target'\nprint (\"Tamanho train: \", train.shape)\nprint (\"Tamanho test: \", test.shape)",
      "rewrite-ns": 894143,
      "overhead-ns": 894143,
      "exec-ns": 433217,
      "total-ns": 1327360,
      "patts-hit": {},
      "rewritten": "target_name = 'Target'\nprint('Tamanho train: ', train.shape)\nprint('Tamanho test: ', test.shape)\n"
    },
    {
      "raw": "train.describe()",
      "rewrite-ns": 109028,
      "overhead-ns": 109028,
      "exec-ns": 382615137,
      "total-ns": 382724165,
      "patts-hit": {},
      "rewritten": "train.describe()\n"
    },
    {
      "raw": "from collections import OrderedDict\n\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize = (15, 12))\n# plt.style.use('fivethirtyeight')\n\ncolors = OrderedDict({1: 'red', 2: 'orange', 3: 'yellow', 4: 'green'})\npoverty_mapping = OrderedDict({1: 'extreme', 2: 'moderate', 3: 'vulnerable', 4: 'non vulnerable'})\n\nfor i, col in enumerate(train.select_dtypes('float')):\n# FIRST-AUTHOR: remove plotting\n#     ax = plt.subplot(4, 2, i + 1)\n    for poverty_level, color in colors.items():\n# FIRST-AUTHOR: remove plotting\n#         sns.kdeplot(train.loc[train['Target'] == poverty_level, col].dropna(), \n#                     ax = ax, color = color, label = poverty_mapping[poverty_level])\n        _ = train.loc[train['Target'] == poverty_level, col].dropna()\n\n# FIRST-AUTHOR: remove plotting\n#     plt.title(f'{col.capitalize()} Distribution'); plt.xlabel(f'{col}'); plt.ylabel('Density')\n    _ = col.capitalize()\n\n# FIRST-AUTHOR: remove plotting\n# plt.subplots_adjust(top = 2)",
      "rewrite-ns": 3100934,
      "overhead-ns": 3100934,
      "exec-ns": 22999705,
      "total-ns": 26100639,
      "patts-hit": {},
      "rewritten": "from collections import OrderedDict\ncolors = OrderedDict({(1): 'red', (2): 'orange', (3): 'yellow', (4): 'green'})\npoverty_mapping = OrderedDict({(1): 'extreme', (2): 'moderate', (3):\n    'vulnerable', (4): 'non vulnerable'})\nfor i, col in enumerate(train.select_dtypes('float')):\n    for poverty_level, color in colors.items():\n        _ = train.loc[train['Target'] == poverty_level, col].dropna()\n    _ = col.capitalize()\n"
    },
    {
      "raw": "train.select_dtypes('object').head()",
      "rewrite-ns": 467006,
      "overhead-ns": 467006,
      "exec-ns": 7981282,
      "total-ns": 8448288,
      "patts-hit": {},
      "rewritten": "train.select_dtypes('object').head()\n"
    },
    {
      "raw": "mapping = {\"yes\": 1, \"no\": 0}\n\nfor df in [train, test]:\n    df['dependency'] = df['dependency'].replace(mapping).astype(np.float64)\n    df['edjefa'] = df['edjefa'].replace(mapping).astype(np.float64)\n    df['edjefe'] = df['edjefe'].replace(mapping).astype(np.float64)\n\ntrain[['dependency', 'edjefa', 'edjefe']].describe()",
      "rewrite-ns": 3149123,
      "overhead-ns": 3149123,
      "exec-ns": 183571610,
      "total-ns": 186720733,
      "patts-hit": {},
      "rewritten": "mapping = {'yes': 1, 'no': 0}\nfor df in [train, test]:\n    df['dependency'] = df['dependency'].replace(mapping).astype(np.float64)\n    df['edjefa'] = df['edjefa'].replace(mapping).astype(np.float64)\n    df['edjefe'] = df['edjefe'].replace(mapping).astype(np.float64)\ntrain[['dependency', 'edjefa', 'edjefe']].describe()\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize = (8, 8))\n\nfor i, col in enumerate(['dependency', 'edjefa', 'edjefe']):\n# FIRST-AUTHOR: remove plotting\n#     ax = plt.subplot(3, 1, i + 1)\n \n    for poverty_level, color in colors.items():\n        \n# FIRST-AUTHOR: remove plotting\n#         sns.kdeplot(train.loc[train['Target'] == poverty_level, col].dropna(), \n#                     ax = ax, color = color, label = poverty_mapping[poverty_level])\n        _ = train.loc[train['Target'] == poverty_level, col].dropna()\n        \n# FIRST-AUTHOR: remove plotting\n#     plt.title(f'{col.capitalize()} Distribution'); plt.xlabel(f'{col}'); plt.ylabel('Density')\n\n# plt.subplots_adjust(top = 2)",
      "rewrite-ns": 1671317,
      "overhead-ns": 1671317,
      "exec-ns": 8441676,
      "total-ns": 10112993,
      "patts-hit": {},
      "rewritten": "for i, col in enumerate(['dependency', 'edjefa', 'edjefe']):\n    for poverty_level, color in colors.items():\n        _ = train.loc[train['Target'] == poverty_level, col].dropna()\n"
    },
    {
      "raw": "test['Target'] = np.nan\ndata = train.append(test, ignore_index = True)",
      "rewrite-ns": 806158,
      "overhead-ns": 806158,
      "exec-ns": 159762238,
      "total-ns": 160568396,
      "patts-hit": {},
      "rewritten": "test['Target'] = np.nan\ndata = train.append(test, ignore_index=True)\n"
    },
    {
      "raw": "all_equal = train.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1)\n\nnot_equal = all_equal[all_equal != True]",
      "rewrite-ns": 1407426,
      "overhead-ns": 1407426,
      "exec-ns": 118291938,
      "total-ns": 119699364,
      "patts-hit": {},
      "rewritten": "all_equal = train.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1\n    )\nnot_equal = all_equal[all_equal != True]\n"
    },
    {
      "raw": "households_leader = train.groupby('idhogar')['parentesco1'].sum()\nhouseholds_no_head = train.loc[train['idhogar'].isin(households_leader[households_leader == 0].index), :]\nhouseholds_no_head_equal = households_no_head.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1)",
      "rewrite-ns": 2477543,
      "overhead-ns": 2477543,
      "exec-ns": 11252570,
      "total-ns": 13730113,
      "patts-hit": {},
      "rewritten": "households_leader = train.groupby('idhogar')['parentesco1'].sum()\nhouseholds_no_head = train.loc[train['idhogar'].isin(households_leader[\n    households_leader == 0].index), :]\nhouseholds_no_head_equal = households_no_head.groupby('idhogar')['Target'\n    ].apply(lambda x: x.nunique() == 1)\n"
    },
    {
      "raw": "for household in not_equal.index:\n# FIRST-AUTHOR: make notebook run with input scaling\n#     true_target = int(train[(train['idhogar'] == household) & (train['parentesco1'] == 1.0)]['Target'])\n    true_target = int(train[(train['idhogar'] == household) & (train['parentesco1'] == 1.0)].iloc[0]['Target'])\n    train.loc[train['idhogar'] == household, 'Target'] = true_target\n    \nall_equal = train.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1)\nnot_equal = all_equal[all_equal != True]",
      "rewrite-ns": 3130235,
      "overhead-ns": 3130235,
      "exec-ns": 862660046,
      "total-ns": 865790281,
      "patts-hit": {},
      "rewritten": "for household in not_equal.index:\n    true_target = int(train[(train['idhogar'] == household) & (train[\n        'parentesco1'] == 1.0)].iloc[0]['Target'])\n    train.loc[train['idhogar'] == household, 'Target'] = true_target\nall_equal = train.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1\n    )\nnot_equal = all_equal[all_equal != True]\n"
    },
    {
      "raw": "print('\\n Missing Values')\nmissing = pd.DataFrame(data.isnull().sum()).rename(columns = {0: 'total'})\nmissing['percent'] = missing['total'] / len(data)\nmissing.sort_values('percent', ascending = False).head(10).drop('Target')",
      "rewrite-ns": 1752188,
      "overhead-ns": 1752188,
      "exec-ns": 103546903,
      "total-ns": 105299091,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "print('\\n Missing Values')\nmissing = pd.DataFrame(data.isnull().sum()).rename(columns={(0): 'total'})\nmissing['percent'] = missing['total'] / len(data)\ndias.rewriter.sort_head(called_on=missing, by='percent', n=10, asc=False,\n    orig=lambda _DIAS_x: _DIAS_x.sort_values('percent', ascending=False).\n    head(10)).drop('Target')\n"
    },
    {
      "raw": "def plot_value_counts(df, col, heads_only = False):\n    if heads_only:\n        df = df.loc[df['parentesco1'] == 1].copy()\n        \n# FIRST-AUTHOR: remove plotting\n#     plt.figure(figsize = (8, 6))\n#     df[col].value_counts().sort_index().plot.bar(color = 'blue',\n#                                                  edgecolor = 'k',\n#                                                  linewidth = 2)\n#     plt.xlabel(f'{col}'); plt.title(f'{col} Value Counts'); plt.ylabel('Count')\n#     plt.show();\n    df[col].value_counts().sort_index()",
      "rewrite-ns": 1399758,
      "overhead-ns": 1399758,
      "exec-ns": 443512,
      "total-ns": 1843270,
      "patts-hit": {},
      "rewritten": "def plot_value_counts(df, col, heads_only=False):\n    if heads_only:\n        df = df.loc[df['parentesco1'] == 1].copy()\n    df[col].value_counts().sort_index()\n"
    },
    {
      "raw": "data['v18q1'] = data['v18q1'].fillna(0)",
      "rewrite-ns": 403740,
      "overhead-ns": 403740,
      "exec-ns": 1604549,
      "total-ns": 2008289,
      "patts-hit": {
        "IsInplaceUpdate": 1
      },
      "rewritten": "_DIAS_ser = data['v18q1']\nif type(_DIAS_ser) != pd.Series:\n    data['v18q1'] = data['v18q1'].fillna(0)\nelse:\n    data['v18q1'].fillna(0, inplace=True)\n"
    },
    {
      "raw": "own_variables = [x for x in data if x.startswith('tipo')]\n# FIRST-AUTHOR: remove plotting\n# data.loc[data['v2a1'].isnull(), own_variables].sum().plot.bar(figsize = (8, 6),\n#                                                                         color = 'blue',\n#                                                               edgecolor = 'k', linewidth = 2);\n# plt.xticks([0, 1, 2, 3, 4],\n#            ['Owns and Paid Off', 'Owns and Paying', 'Rented', 'Precarious', 'Other'],\n#           rotation = 60)\n# plt.title('Home Ownership Status for Households Missing Rent Payments', size = 18);\ndata.loc[data['v2a1'].isnull(), own_variables].sum()",
      "rewrite-ns": 1261046,
      "overhead-ns": 1261046,
      "exec-ns": 342378731,
      "total-ns": 343639777,
      "patts-hit": {},
      "rewritten": "own_variables = [x for x in data if x.startswith('tipo')]\ndata.loc[data['v2a1'].isnull(), own_variables].sum()\n"
    },
    {
      "raw": "data.loc[(data['tipovivi1'] == 1), 'v2a1'] = 0\ndata['v2a1-missing'] = data['v2a1'].isnull()\ndata['v2a1-missing'].value_counts()",
      "rewrite-ns": 1445614,
      "overhead-ns": 1445614,
      "exec-ns": 5050422,
      "total-ns": 6496036,
      "patts-hit": {},
      "rewritten": "data.loc[data['tipovivi1'] == 1, 'v2a1'] = 0\ndata['v2a1-missing'] = data['v2a1'].isnull()\ndata['v2a1-missing'].value_counts()\n"
    },
    {
      "raw": "data.loc[((data['age'] > 19) | (data['age'] < 7)) & (data['rez_esc'].isnull()), 'rez_esc'] = 0\ndata['rez_esc-missing'] = data['rez_esc'].isnull()\ndata.loc[data['rez_esc'] > 5, 'rez_esc'] = 5",
      "rewrite-ns": 2315155,
      "overhead-ns": 2315155,
      "exec-ns": 5016127,
      "total-ns": 7331282,
      "patts-hit": {},
      "rewritten": "data.loc[((data['age'] > 19) | (data['age'] < 7)) & data['rez_esc'].isnull(\n    ), 'rez_esc'] = 0\ndata['rez_esc-missing'] = data['rez_esc'].isnull()\ndata.loc[data['rez_esc'] > 5, 'rez_esc'] = 5\n"
    },
    {
      "raw": "id_ = ['Id', 'idhogar', 'Target']\nind_bool = ['v18q', 'dis', 'male', 'female', 'estadocivil1', 'estadocivil2', 'estadocivil3', \n            'estadocivil4', 'estadocivil5', 'estadocivil6', 'estadocivil7', \n            'parentesco1', 'parentesco2',  'parentesco3', 'parentesco4', 'parentesco5', \n            'parentesco6', 'parentesco7', 'parentesco8',  'parentesco9', 'parentesco10', \n            'parentesco11', 'parentesco12', 'instlevel1', 'instlevel2', 'instlevel3', \n            'instlevel4', 'instlevel5', 'instlevel6', 'instlevel7', 'instlevel8', \n            'instlevel9', 'mobilephone', 'rez_esc-missing']\nind_ordered = ['rez_esc', 'escolari', 'age']\nhh_bool = ['hacdor', 'hacapo', 'v14a', 'refrig', 'paredblolad', 'paredzocalo', \n           'paredpreb','pisocemento', 'pareddes', 'paredmad',\n           'paredzinc', 'paredfibras', 'paredother', 'pisomoscer', 'pisoother', \n           'pisonatur', 'pisonotiene', 'pisomadera',\n           'techozinc', 'techoentrepiso', 'techocane', 'techootro', 'cielorazo', \n           'abastaguadentro', 'abastaguafuera', 'abastaguano',\n            'public', 'planpri', 'noelec', 'coopele', 'sanitario1', \n           'sanitario2', 'sanitario3', 'sanitario5',   'sanitario6',\n           'energcocinar1', 'energcocinar2', 'energcocinar3', 'energcocinar4', \n           'elimbasu1', 'elimbasu2', 'elimbasu3', 'elimbasu4', \n           'elimbasu5', 'elimbasu6', 'epared1', 'epared2', 'epared3',\n           'etecho1', 'etecho2', 'etecho3', 'eviv1', 'eviv2', 'eviv3', \n           'tipovivi1', 'tipovivi2', 'tipovivi3', 'tipovivi4', 'tipovivi5', \n           'computer', 'television', 'lugar1', 'lugar2', 'lugar3',\n           'lugar4', 'lugar5', 'lugar6', 'area1', 'area2', 'v2a1-missing']\nhh_ordered = [ 'rooms', 'r4h1', 'r4h2', 'r4h3', 'r4m1','r4m2','r4m3', 'r4t1',  'r4t2', \n              'r4t3', 'v18q1', 'tamhog','tamviv','hhsize','hogar_nin',\n              'hogar_adul','hogar_mayor','hogar_total',  'bedrooms', 'qmobilephone']\nhh_cont = ['v2a1', 'dependency', 'edjefe', 'edjefa', 'meaneduc', 'overcrowding']\nsqr_ = ['SQBescolari', 'SQBage', 'SQBhogar_total', 'SQBedjefe', \n        'SQBhogar_nin', 'SQBovercrowding', 'SQBdependency', 'SQBmeaned', 'agesq']",
      "rewrite-ns": 6303135,
      "overhead-ns": 6303135,
      "exec-ns": 1558587,
      "total-ns": 7861722,
      "patts-hit": {},
      "rewritten": "id_ = ['Id', 'idhogar', 'Target']\nind_bool = ['v18q', 'dis', 'male', 'female', 'estadocivil1', 'estadocivil2',\n    'estadocivil3', 'estadocivil4', 'estadocivil5', 'estadocivil6',\n    'estadocivil7', 'parentesco1', 'parentesco2', 'parentesco3',\n    'parentesco4', 'parentesco5', 'parentesco6', 'parentesco7',\n    'parentesco8', 'parentesco9', 'parentesco10', 'parentesco11',\n    'parentesco12', 'instlevel1', 'instlevel2', 'instlevel3', 'instlevel4',\n    'instlevel5', 'instlevel6', 'instlevel7', 'instlevel8', 'instlevel9',\n    'mobilephone', 'rez_esc-missing']\nind_ordered = ['rez_esc', 'escolari', 'age']\nhh_bool = ['hacdor', 'hacapo', 'v14a', 'refrig', 'paredblolad',\n    'paredzocalo', 'paredpreb', 'pisocemento', 'pareddes', 'paredmad',\n    'paredzinc', 'paredfibras', 'paredother', 'pisomoscer', 'pisoother',\n    'pisonatur', 'pisonotiene', 'pisomadera', 'techozinc', 'techoentrepiso',\n    'techocane', 'techootro', 'cielorazo', 'abastaguadentro',\n    'abastaguafuera', 'abastaguano', 'public', 'planpri', 'noelec',\n    'coopele', 'sanitario1', 'sanitario2', 'sanitario3', 'sanitario5',\n    'sanitario6', 'energcocinar1', 'energcocinar2', 'energcocinar3',\n    'energcocinar4', 'elimbasu1', 'elimbasu2', 'elimbasu3', 'elimbasu4',\n    'elimbasu5', 'elimbasu6', 'epared1', 'epared2', 'epared3', 'etecho1',\n    'etecho2', 'etecho3', 'eviv1', 'eviv2', 'eviv3', 'tipovivi1',\n    'tipovivi2', 'tipovivi3', 'tipovivi4', 'tipovivi5', 'computer',\n    'television', 'lugar1', 'lugar2', 'lugar3', 'lugar4', 'lugar5',\n    'lugar6', 'area1', 'area2', 'v2a1-missing']\nhh_ordered = ['rooms', 'r4h1', 'r4h2', 'r4h3', 'r4m1', 'r4m2', 'r4m3',\n    'r4t1', 'r4t2', 'r4t3', 'v18q1', 'tamhog', 'tamviv', 'hhsize',\n    'hogar_nin', 'hogar_adul', 'hogar_mayor', 'hogar_total', 'bedrooms',\n    'qmobilephone']\nhh_cont = ['v2a1', 'dependency', 'edjefe', 'edjefa', 'meaneduc', 'overcrowding'\n    ]\nsqr_ = ['SQBescolari', 'SQBage', 'SQBhogar_total', 'SQBedjefe',\n    'SQBhogar_nin', 'SQBovercrowding', 'SQBdependency', 'SQBmeaned', 'agesq']\n"
    },
    {
      "raw": "data = data.drop(columns = sqr_)",
      "rewrite-ns": 415934,
      "overhead-ns": 415934,
      "exec-ns": 108388649,
      "total-ns": 108804583,
      "patts-hit": {},
      "rewritten": "data = data.drop(columns=sqr_)\n"
    },
    {
      "raw": "heads = data.loc[data['parentesco1'] == 1, :]\nheads = heads[id_ + hh_bool + hh_cont + hh_ordered]\nheads = heads.drop(columns = ['tamhog', 'hogar_total', 'r4t3'])",
      "rewrite-ns": 1767480,
      "overhead-ns": 1767480,
      "exec-ns": 77502117,
      "total-ns": 79269597,
      "patts-hit": {},
      "rewritten": "heads = data.loc[data['parentesco1'] == 1, :]\nheads = heads[id_ + hh_bool + hh_cont + hh_ordered]\nheads = heads.drop(columns=['tamhog', 'hogar_total', 'r4t3'])\n"
    },
    {
      "raw": "elec = []\nfor i, row in heads.iterrows():\n    if row['noelec'] == 1:\n        elec.append(0)\n    elif row['coopele'] == 1:\n        elec.append(1)\n    elif row['public'] == 1:\n        elec.append(2)\n    elif row['planpri'] == 1:\n        elec.append(3)\n    else:\n        elec.append(np.nan)\n        \nheads['elec'] = elec\nheads['elec-missing'] = heads['elec'].isnull()\nheads = heads.drop(columns = ['noelec', 'coopele', 'public', 'planpri'])",
      "rewrite-ns": 3971949,
      "overhead-ns": 3971949,
      "exec-ns": 3996563774,
      "total-ns": 4000535723,
      "patts-hit": {},
      "rewritten": "elec = []\nfor i, row in heads.iterrows():\n    if row['noelec'] == 1:\n        elec.append(0)\n    elif row['coopele'] == 1:\n        elec.append(1)\n    elif row['public'] == 1:\n        elec.append(2)\n    elif row['planpri'] == 1:\n        elec.append(3)\n    else:\n        elec.append(np.nan)\nheads['elec'] = elec\nheads['elec-missing'] = heads['elec'].isnull()\nheads = heads.drop(columns=['noelec', 'coopele', 'public', 'planpri'])\n"
    },
    {
      "raw": "water = []\nfor i, row in heads.iterrows():\n    if row['abastaguano'] == 1:\n        water.append(0)\n    elif row['abastaguafuera'] == 1:\n        water.append(1)\n    elif row['abastaguadentro'] == 1:\n        water.append(2)\n    else:\n        water.append(np.nan)\n        \nheads['water'] = water\nheads['water-missing'] = heads['water'].isnull()\nheads = heads.drop(columns = ['abastaguano', 'abastaguafuera', 'abastaguadentro'])",
      "rewrite-ns": 3512645,
      "overhead-ns": 3512645,
      "exec-ns": 4045296143,
      "total-ns": 4048808788,
      "patts-hit": {},
      "rewritten": "water = []\nfor i, row in heads.iterrows():\n    if row['abastaguano'] == 1:\n        water.append(0)\n    elif row['abastaguafuera'] == 1:\n        water.append(1)\n    elif row['abastaguadentro'] == 1:\n        water.append(2)\n    else:\n        water.append(np.nan)\nheads['water'] = water\nheads['water-missing'] = heads['water'].isnull()\nheads = heads.drop(columns=['abastaguano', 'abastaguafuera', 'abastaguadentro']\n    )\n"
    },
    {
      "raw": "sanit = []\nfor i, row in heads.iterrows():\n    if row['sanitario1'] == 1:\n        sanit.append(0)\n    elif row['v14a'] == 0:\n        sanit.append(0)\n    elif row['sanitario2'] == 1:\n        sanit.append(3)\n    elif row['sanitario3'] == 1:\n        sanit.append(2)\n    elif row['sanitario5'] == 1:\n        sanit.append(1)\n    elif row['sanitario6'] == 1:\n        sanit.append(2)\n    else:\n        sanit.append(np.nan)\n        \nheads['sanit'] = sanit\nheads['sanit-missing'] = heads['sanit'].isnull()\nheads = heads.drop(columns = ['sanitario1', 'sanitario2', 'sanitario3', 'sanitario5', 'sanitario6', 'v14a'])",
      "rewrite-ns": 6028836,
      "overhead-ns": 6028836,
      "exec-ns": 4297127524,
      "total-ns": 4303156360,
      "patts-hit": {},
      "rewritten": "sanit = []\nfor i, row in heads.iterrows():\n    if row['sanitario1'] == 1:\n        sanit.append(0)\n    elif row['v14a'] == 0:\n        sanit.append(0)\n    elif row['sanitario2'] == 1:\n        sanit.append(3)\n    elif row['sanitario3'] == 1:\n        sanit.append(2)\n    elif row['sanitario5'] == 1:\n        sanit.append(1)\n    elif row['sanitario6'] == 1:\n        sanit.append(2)\n    else:\n        sanit.append(np.nan)\nheads['sanit'] = sanit\nheads['sanit-missing'] = heads['sanit'].isnull()\nheads = heads.drop(columns=['sanitario1', 'sanitario2', 'sanitario3',\n    'sanitario5', 'sanitario6', 'v14a'])\n"
    },
    {
      "raw": "cozinhar = []\nfor i, row in heads.iterrows():\n    if row['energcocinar1'] == 1:\n        cozinhar.append(0)\n    elif row['energcocinar2'] == 1:\n        cozinhar.append(2)\n    elif row['energcocinar3'] == 1:\n        cozinhar.append(2)\n    elif row['energcocinar4'] == 1:\n        cozinhar.append(1)\n    else:\n        cozinhar.append(np.nan)\n        \nheads['cozinhar'] = cozinhar\nheads['cozinhar-missing'] = heads['cozinhar'].isnull()\nheads = heads.drop(columns = ['energcocinar1', 'energcocinar2', 'energcocinar3', 'energcocinar4'])",
      "rewrite-ns": 4032650,
      "overhead-ns": 4032650,
      "exec-ns": 3962876915,
      "total-ns": 3966909565,
      "patts-hit": {},
      "rewritten": "cozinhar = []\nfor i, row in heads.iterrows():\n    if row['energcocinar1'] == 1:\n        cozinhar.append(0)\n    elif row['energcocinar2'] == 1:\n        cozinhar.append(2)\n    elif row['energcocinar3'] == 1:\n        cozinhar.append(2)\n    elif row['energcocinar4'] == 1:\n        cozinhar.append(1)\n    else:\n        cozinhar.append(np.nan)\nheads['cozinhar'] = cozinhar\nheads['cozinhar-missing'] = heads['cozinhar'].isnull()\nheads = heads.drop(columns=['energcocinar1', 'energcocinar2',\n    'energcocinar3', 'energcocinar4'])\n"
    },
    {
      "raw": "heads = heads.drop(columns = ['area2', 'elimbasu1', 'elimbasu2', 'elimbasu3', 'elimbasu4', 'elimbasu5', 'elimbasu6'])",
      "rewrite-ns": 865870,
      "overhead-ns": 865870,
      "exec-ns": 27542298,
      "total-ns": 28408168,
      "patts-hit": {},
      "rewritten": "heads = heads.drop(columns=['area2', 'elimbasu1', 'elimbasu2', 'elimbasu3',\n    'elimbasu4', 'elimbasu5', 'elimbasu6'])\n"
    },
    {
      "raw": "heads['walls'] = np.argmax(np.array(heads[['epared1', 'epared2', 'epared3']]), axis = 1)\nheads = heads.drop(columns = ['epared1', 'epared2', 'epared3'])\n\nheads['roof'] = np.argmax(np.array(heads[['etecho1', 'etecho2', 'etecho3']]), axis = 1)\nheads = heads.drop(columns = ['etecho1', 'etecho2', 'etecho3'])\n\nheads['floor'] = np.argmax(np.array(heads[['eviv1', 'eviv2', 'eviv3']]), axis = 1)\nheads = heads.drop(columns = ['eviv1', 'eviv2', 'eviv3'])\n",
      "rewrite-ns": 3938907,
      "overhead-ns": 3938907,
      "exec-ns": 89878256,
      "total-ns": 93817163,
      "patts-hit": {},
      "rewritten": "heads['walls'] = np.argmax(np.array(heads[['epared1', 'epared2', 'epared3']\n    ]), axis=1)\nheads = heads.drop(columns=['epared1', 'epared2', 'epared3'])\nheads['roof'] = np.argmax(np.array(heads[['etecho1', 'etecho2', 'etecho3']]\n    ), axis=1)\nheads = heads.drop(columns=['etecho1', 'etecho2', 'etecho3'])\nheads['floor'] = np.argmax(np.array(heads[['eviv1', 'eviv2', 'eviv3']]), axis=1\n    )\nheads = heads.drop(columns=['eviv1', 'eviv2', 'eviv3'])\n"
    },
    {
      "raw": "heads['walls+roof+floor'] = heads['walls'] + heads['roof'] + heads['floor']\ncounts = pd.DataFrame(heads.groupby(['walls+roof+floor'])['Target'].value_counts(normalize = True)).rename(columns = {'Target': 'Normalized Count'}).reset_index()\ncounts.head()",
      "rewrite-ns": 2055280,
      "overhead-ns": 2055280,
      "exec-ns": 18897423,
      "total-ns": 20952703,
      "patts-hit": {},
      "rewritten": "heads['walls+roof+floor'] = heads['walls'] + heads['roof'] + heads['floor']\ncounts = pd.DataFrame(heads.groupby(['walls+roof+floor'])['Target'].\n    value_counts(normalize=True)).rename(columns={'Target': 'Normalized Count'}\n    ).reset_index()\ncounts.head()\n"
    },
    {
      "raw": "heads['rooms-per-capita'] = heads['rooms'] / heads['tamviv']\nheads['rent-per-capita'] = heads['v2a1'] / heads['tamviv']\nheads['electronics-per-capita'] = (heads['v18q1'] + heads['qmobilephone']) / heads['tamviv']",
      "rewrite-ns": 1816383,
      "overhead-ns": 1816383,
      "exec-ns": 2655452,
      "total-ns": 4471835,
      "patts-hit": {},
      "rewritten": "heads['rooms-per-capita'] = heads['rooms'] / heads['tamviv']\nheads['rent-per-capita'] = heads['v2a1'] / heads['tamviv']\nheads['electronics-per-capita'] = (heads['v18q1'] + heads['qmobilephone']\n    ) / heads['tamviv']\n"
    },
    {
      "raw": "ind = data[id_ + ind_bool + ind_ordered]",
      "rewrite-ns": 550464,
      "overhead-ns": 550464,
      "exec-ns": 23603295,
      "total-ns": 24153759,
      "patts-hit": {},
      "rewritten": "ind = data[id_ + ind_bool + ind_ordered]\n"
    },
    {
      "raw": "ind[[c for c in ind if c.startswith('instl')]].head()",
      "rewrite-ns": 811161,
      "overhead-ns": 811161,
      "exec-ns": 14840245,
      "total-ns": 15651406,
      "patts-hit": {},
      "rewritten": "ind[[c for c in ind if c.startswith('instl')]].head()\n"
    },
    {
      "raw": "ind['inst'] = np.argmax(np.array(ind[[c for c in ind if c.startswith('instl')]]), axis = 1)",
      "rewrite-ns": 1205237,
      "overhead-ns": 1205237,
      "exec-ns": 19980651,
      "total-ns": 21185888,
      "patts-hit": {},
      "rewritten": "ind['inst'] = np.argmax(np.array(ind[[c for c in ind if c.startswith(\n    'instl')]]), axis=1)\n"
    },
    {
      "raw": "ind = ind.drop(columns = [c for c in ind if c.startswith('instlevel')])\nind['inst/age'] = ind['inst'] / ind['age']\nind['escolari/age'] = ind['escolari'] / ind['age']\nind['tech'] = ind['v18q'] + ind['mobilephone']\nind['tech'].describe()",
      "rewrite-ns": 2639311,
      "overhead-ns": 2639311,
      "exec-ns": 44451343,
      "total-ns": 47090654,
      "patts-hit": {},
      "rewritten": "ind = ind.drop(columns=[c for c in ind if c.startswith('instlevel')])\nind['inst/age'] = ind['inst'] / ind['age']\nind['escolari/age'] = ind['escolari'] / ind['age']\nind['tech'] = ind['v18q'] + ind['mobilephone']\nind['tech'].describe()\n"
    },
    {
      "raw": "def combine_features(data, cols=[], name=''):\n    df = data.copy()\n    for i, col in enumerate(cols):\n        print(i + 1, col)\n    df[cols] = df[cols].multiply([i for i in range(1, len(cols) + 1)], axis=1)\n    df[name] = df[cols].sum(axis=1)\n    df.drop(cols, axis=1, inplace=True)\n    return df",
      "rewrite-ns": 3313929,
      "overhead-ns": 3313929,
      "exec-ns": 773502,
      "total-ns": 4087431,
      "patts-hit": {},
      "rewritten": "def combine_features(data, cols=[], name=''):\n    df = data.copy()\n    for i, col in enumerate(cols):\n        print(i + 1, col)\n    df[cols] = df[cols].multiply([i for i in range(1, len(cols) + 1)], axis=1)\n    df[name] = df[cols].sum(axis=1)\n    df.drop(cols, axis=1, inplace=True)\n    return df\n"
    },
    {
      "raw": "heads = combine_features(heads, cols=[col for col in heads.columns if col.startswith('lugar')], name='region')\nprint('Region count by target.');\n# FIRST-AUTHOR: remove plotting\n# sns.factorplot(\"region\", col=\"Target\", col_wrap=4, data=heads, kind=\"count\");",
      "rewrite-ns": 988861,
      "overhead-ns": 988861,
      "exec-ns": 83259159,
      "total-ns": 84248020,
      "patts-hit": {},
      "rewritten": "heads = combine_features(heads, cols=[col for col in heads.columns if col.\n    startswith('lugar')], name='region')\nprint('Region count by target.')\n"
    },
    {
      "raw": "heads = combine_features(heads, cols=[col for col in heads.columns if col.startswith('tipovivi')], name='home_own')\nprint('Home ownership type count by target.');\n# FIRST-AUTHOR: remove plotting\n# sns.factorplot(\"home_own\", col=\"Target\", col_wrap=4, data=heads, kind=\"count\");",
      "rewrite-ns": 1016724,
      "overhead-ns": 1016724,
      "exec-ns": 69072968,
      "total-ns": 70089692,
      "patts-hit": {},
      "rewritten": "heads = combine_features(heads, cols=[col for col in heads.columns if col.\n    startswith('tipovivi')], name='home_own')\nprint('Home ownership type count by target.')\n"
    },
    {
      "raw": "heads = heads.drop(columns = ['paredblolad', 'paredzocalo', 'paredpreb', 'pareddes', 'paredmad', 'paredzinc', 'paredfibras',\n                             'paredother', 'pisomoscer', 'pisocemento', 'pisoother', 'pisonatur', 'pisomadera', 'techozinc',\n                             'techoentrepiso', 'techocane', 'techootro', 'hogar_nin', 'hogar_mayor', 'hogar_adul',\n                             'dependency', 'edjefe', 'edjefa', 'meaneduc', 'r4h1', 'r4h2', 'r4h3', 'r4m1',\n                             'r4m2', 'r4m3', 'r4t1', 'r4t2', 'walls', 'roof', 'floor', 'rooms', 'v2a1', 'qmobilephone',\n                             'v18q1', 'hacapo', 'cielorazo', 'bedrooms', 'pisonotiene', 'hacdor'])",
      "rewrite-ns": 2042853,
      "overhead-ns": 2042853,
      "exec-ns": 7690015,
      "total-ns": 9732868,
      "patts-hit": {},
      "rewritten": "heads = heads.drop(columns=['paredblolad', 'paredzocalo', 'paredpreb',\n    'pareddes', 'paredmad', 'paredzinc', 'paredfibras', 'paredother',\n    'pisomoscer', 'pisocemento', 'pisoother', 'pisonatur', 'pisomadera',\n    'techozinc', 'techoentrepiso', 'techocane', 'techootro', 'hogar_nin',\n    'hogar_mayor', 'hogar_adul', 'dependency', 'edjefe', 'edjefa',\n    'meaneduc', 'r4h1', 'r4h2', 'r4h3', 'r4m1', 'r4m2', 'r4m3', 'r4t1',\n    'r4t2', 'walls', 'roof', 'floor', 'rooms', 'v2a1', 'qmobilephone',\n    'v18q1', 'hacapo', 'cielorazo', 'bedrooms', 'pisonotiene', 'hacdor'])\n"
    },
    {
      "raw": "ind = ind.drop(columns = ['estadocivil1', 'estadocivil2', 'estadocivil3', 'estadocivil4', 'estadocivil5', 'estadocivil6',\n                              'estadocivil7', 'parentesco1', 'parentesco2',  'parentesco3', 'parentesco4', 'parentesco5', \n                              'parentesco6', 'parentesco7', 'parentesco8',  'parentesco9', 'parentesco10', 'parentesco11',\n                              'parentesco12', 'mobilephone', 'escolari', 'inst', 'age', 'v18q', 'male'])",
      "rewrite-ns": 1355411,
      "overhead-ns": 1355411,
      "exec-ns": 12752067,
      "total-ns": 14107478,
      "patts-hit": {},
      "rewritten": "ind = ind.drop(columns=['estadocivil1', 'estadocivil2', 'estadocivil3',\n    'estadocivil4', 'estadocivil5', 'estadocivil6', 'estadocivil7',\n    'parentesco1', 'parentesco2', 'parentesco3', 'parentesco4',\n    'parentesco5', 'parentesco6', 'parentesco7', 'parentesco8',\n    'parentesco9', 'parentesco10', 'parentesco11', 'parentesco12',\n    'mobilephone', 'escolari', 'inst', 'age', 'v18q', 'male'])\n"
    },
    {
      "raw": "final = heads.merge(ind, on = id_ , how = 'left')\nprint('Final features shape: ', final.shape)",
      "rewrite-ns": 887283,
      "overhead-ns": 887283,
      "exec-ns": 326509706,
      "total-ns": 327396989,
      "patts-hit": {},
      "rewritten": "final = heads.merge(ind, on=id_, how='left')\nprint('Final features shape: ', final.shape)\n"
    },
    {
      "raw": "print('\\n Missing Values')\nmissing = pd.DataFrame(final.isnull().sum()).rename(columns = {0: 'total'})\nmissing['percent'] = missing['total'] / len(final)\nmissing.sort_values('percent', ascending = False).head(10).drop('Target')",
      "rewrite-ns": 1847756,
      "overhead-ns": 1847756,
      "exec-ns": 283789346,
      "total-ns": 285637102,
      "patts-hit": {
        "SortHead": 1
      },
      "rewritten": "print('\\n Missing Values')\nmissing = pd.DataFrame(final.isnull().sum()).rename(columns={(0): 'total'})\nmissing['percent'] = missing['total'] / len(final)\ndias.rewriter.sort_head(called_on=missing, by='percent', n=10, asc=False,\n    orig=lambda _DIAS_x: _DIAS_x.sort_values('percent', ascending=False).\n    head(10)).drop('Target')\n"
    },
    {
      "raw": "final = final[final['elec-missing'] != True]\nfinal = final[final['rez_esc-missing'] != True]\nfinal = final[final['cozinhar-missing'] != True]\nfinal = final[final['water-missing'] != True]\nfinal = final[final['sanit-missing'] != True]\nfinal = final[final['v2a1-missing'] != True]",
      "rewrite-ns": 2675794,
      "overhead-ns": 2675794,
      "exec-ns": 746900967,
      "total-ns": 749576761,
      "patts-hit": {},
      "rewritten": "final = final[final['elec-missing'] != True]\nfinal = final[final['rez_esc-missing'] != True]\nfinal = final[final['cozinhar-missing'] != True]\nfinal = final[final['water-missing'] != True]\nfinal = final[final['sanit-missing'] != True]\nfinal = final[final['v2a1-missing'] != True]\n"
    },
    {
      "raw": "print('Final features shape: ', final.shape)",
      "rewrite-ns": 425424,
      "overhead-ns": 425424,
      "exec-ns": 354928,
      "total-ns": 780352,
      "patts-hit": {},
      "rewritten": "print('Final features shape: ', final.shape)\n"
    },
    {
      "raw": "final = final.drop(columns = ['sanit-missing', 'cozinhar-missing', 'water-missing', 'elec-missing', 'v2a1-missing',\n                              'rez_esc-missing'])",
      "rewrite-ns": 714378,
      "overhead-ns": 714378,
      "exec-ns": 71880314,
      "total-ns": 72594692,
      "patts-hit": {},
      "rewritten": "final = final.drop(columns=['sanit-missing', 'cozinhar-missing',\n    'water-missing', 'elec-missing', 'v2a1-missing', 'rez_esc-missing'])\n"
    },
    {
      "raw": "print('Final features shape: ', final.shape)",
      "rewrite-ns": 417340,
      "overhead-ns": 417340,
      "exec-ns": 341644,
      "total-ns": 758984,
      "patts-hit": {},
      "rewritten": "print('Final features shape: ', final.shape)\n"
    },
    {
      "raw": "train_labels = np.array(list(final[final['Target'].notnull()]['Target'].astype(np.uint8)))\n\nSPLIT = final[final['Target'].notnull()].drop(columns = ['Id', 'idhogar'])\nFINALtest = final[final['Target'].isnull()]\nsubmission_base = FINALtest[['Id', 'idhogar']].copy()\nFINALtest = FINALtest.drop(columns = ['Id', 'idhogar', 'Target' ])",
      "rewrite-ns": 3236513,
      "overhead-ns": 3236513,
      "exec-ns": 221183360,
      "total-ns": 224419873,
      "patts-hit": {},
      "rewritten": "train_labels = np.array(list(final[final['Target'].notnull()]['Target'].\n    astype(np.uint8)))\nSPLIT = final[final['Target'].notnull()].drop(columns=['Id', 'idhogar'])\nFINALtest = final[final['Target'].isnull()]\nsubmission_base = FINALtest[['Id', 'idhogar']].copy()\nFINALtest = FINALtest.drop(columns=['Id', 'idhogar', 'Target'])\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# train, test = train_test_split(SPLIT, test_size=0.2)",
      "rewrite-ns": 26508,
      "overhead-ns": 26508,
      "exec-ns": 126909,
      "total-ns": 153417,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "neighbors = [3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35]\nXtrain = train\nYtrain = train.Target\nXtest = test\nYtest = test.Target",
      "rewrite-ns": 1541573,
      "overhead-ns": 1541573,
      "exec-ns": 646989,
      "total-ns": 2188562,
      "patts-hit": {},
      "rewritten": "neighbors = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35]\nXtrain = train\nYtrain = train.Target\nXtest = test\nYtest = test.Target\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# print('With CV = 3:')\n# cv_scores = []\n\n# for k in neighbors:\n#     knn = KNeighborsClassifier(n_neighbors=k)\n#     scores = cross_val_score(knn, Xtrain, Ytrain, cv=3, scoring='accuracy')\n#     cv_scores.append(scores.mean())\n    \n    \n# MSE = [1 - x for x in cv_scores]\n# optimal_k = neighbors[MSE.index(min(MSE))]\n# print(\"The optimal number of neighbors is %d\" % optimal_k)",
      "rewrite-ns": 17178,
      "overhead-ns": 17178,
      "exec-ns": 81637,
      "total-ns": 98815,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.plot(neighbors, MSE)\n# plt.xlabel('Number of Neighbors K')\n# plt.ylabel('Misclassification Error')\n# plt.show()",
      "rewrite-ns": 12921,
      "overhead-ns": 12921,
      "exec-ns": 73816,
      "total-ns": 86737,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# print('With CV = 5:')\n# cv_scores = []\n\n# for k in neighbors:\n#     knn = KNeighborsClassifier(n_neighbors=k)\n#     scores = cross_val_score(knn, Xtrain, Ytrain, cv=5, scoring='accuracy')\n#     cv_scores.append(scores.mean())\n    \n    \n# MSE = [1 - x for x in cv_scores]\n# optimal_k = neighbors[MSE.index(min(MSE))]\n# print(\"The optimal number of neighbors is %d\" % optimal_k)",
      "rewrite-ns": 12655,
      "overhead-ns": 12655,
      "exec-ns": 62326,
      "total-ns": 74981,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.plot(neighbors, MSE)\n# plt.xlabel('Number of Neighbors K')\n# plt.ylabel('Misclassification Error')\n# plt.show()",
      "rewrite-ns": 10840,
      "overhead-ns": 10840,
      "exec-ns": 60195,
      "total-ns": 71035,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# print('With CV = 10:')\n# cv_scores = []\n\n# for k in neighbors:\n#     knn = KNeighborsClassifier(n_neighbors=k)\n#     scores = cross_val_score(knn, Xtrain, Ytrain, cv=10, scoring='accuracy')\n#     cv_scores.append(scores.mean())\n    \n    \n# MSE = [1 - x for x in cv_scores]\n# optimal_k = neighbors[MSE.index(min(MSE))]\n# print(\"The optimal number of neighbors is %d\" % optimal_k)",
      "rewrite-ns": 11917,
      "overhead-ns": 11917,
      "exec-ns": 60307,
      "total-ns": 72224,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.plot(neighbors, MSE)\n# plt.xlabel('Number of Neighbors K')\n# plt.ylabel('Misclassification Error')\n# plt.show()",
      "rewrite-ns": 10568,
      "overhead-ns": 10568,
      "exec-ns": 59391,
      "total-ns": 69959,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# print('With CV = 15:')\n# cv_scores = []\n\n# for k in neighbors:\n#     knn = KNeighborsClassifier(n_neighbors=k)\n#     scores = cross_val_score(knn, Xtrain, Ytrain, cv=15, scoring='accuracy')\n#     cv_scores.append(scores.mean())\n    \n    \n# MSE = [1 - x for x in cv_scores]\n# optimal_k = neighbors[MSE.index(min(MSE))]\n# print(\"The optimal number of neighbors is %d\" % optimal_k)",
      "rewrite-ns": 11809,
      "overhead-ns": 11809,
      "exec-ns": 57519,
      "total-ns": 69328,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.plot(neighbors, MSE)\n# plt.xlabel('Number of Neighbors K')\n# plt.ylabel('Misclassification Error')\n# plt.show()",
      "rewrite-ns": 10699,
      "overhead-ns": 10699,
      "exec-ns": 57512,
      "total-ns": 68211,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# print('With CV = 20:')\n# cv_scores = []\n\n# for k in neighbors:\n#     knn = KNeighborsClassifier(n_neighbors=k)\n#     scores = cross_val_score(knn, Xtrain, Ytrain, cv=20, scoring='accuracy')\n#     cv_scores.append(scores.mean())\n    \n    \n# MSE = [1 - x for x in cv_scores]\n# optimal_k = neighbors[MSE.index(min(MSE))]\n# print(\"The optimal number of neighbors is %d\" % optimal_k)",
      "rewrite-ns": 12050,
      "overhead-ns": 12050,
      "exec-ns": 52886,
      "total-ns": 64936,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.plot(neighbors, MSE)\n# plt.xlabel('Number of Neighbors K')\n# plt.ylabel('Misclassification Error')\n# plt.show()",
      "rewrite-ns": 9930,
      "overhead-ns": 9930,
      "exec-ns": 52353,
      "total-ns": 62283,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# knn = KNeighborsClassifier(n_neighbors=7)",
      "rewrite-ns": 10400,
      "overhead-ns": 10400,
      "exec-ns": 63820,
      "total-ns": 74220,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# knn.fit(Xtrain,Ytrain)",
      "rewrite-ns": 10069,
      "overhead-ns": 10069,
      "exec-ns": 57826,
      "total-ns": 67895,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# scores = cross_val_score(knn, Xtrain, Ytrain, cv=10)\n# scores",
      "rewrite-ns": 9653,
      "overhead-ns": 9653,
      "exec-ns": 57102,
      "total-ns": 66755,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# YtestPred = knn.predict(Xtest)",
      "rewrite-ns": 9433,
      "overhead-ns": 9433,
      "exec-ns": 74221,
      "total-ns": 83654,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# from sklearn.metrics import accuracy_score\n# accuracy_score(Ytest,YtestPred)",
      "rewrite-ns": 9653,
      "overhead-ns": 9653,
      "exec-ns": 57597,
      "total-ns": 67250,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "FINALtest.insert(0,'Target',0.0)",
      "rewrite-ns": 440704,
      "overhead-ns": 440704,
      "exec-ns": 1230442,
      "total-ns": 1671146,
      "patts-hit": {},
      "rewritten": "FINALtest.insert(0, 'Target', 0.0)\n"
    },
    {
      "raw": "FINALtest.dtypes",
      "rewrite-ns": 62302,
      "overhead-ns": 62302,
      "exec-ns": 1260580,
      "total-ns": 1322882,
      "patts-hit": {},
      "rewritten": "FINALtest.dtypes\n"
    },
    {
      "raw": "XFINALtest = FINALtest\n# FIRST-AUTHOR: remove ML code\n# YFINALtestPred = knn.predict(XFINALtest)",
      "rewrite-ns": 218930,
      "overhead-ns": 218930,
      "exec-ns": 184570,
      "total-ns": 403500,
      "patts-hit": {},
      "rewritten": "XFINALtest = FINALtest\n"
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# YFINALtestPred",
      "rewrite-ns": 11542,
      "overhead-ns": 11542,
      "exec-ns": 69052,
      "total-ns": 80594,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "pred = pd.DataFrame(submission_base)\n# FIRST-AUTHOR: remove ML code\n# pred[\"Target\"] = YFINALtestPred",
      "rewrite-ns": 390037,
      "overhead-ns": 390037,
      "exec-ns": 206926,
      "total-ns": 596963,
      "patts-hit": {},
      "rewritten": "pred = pd.DataFrame(submission_base)\n"
    },
    {
      "raw": "pred.to_csv(\"prediction.csv\", index=False)",
      "rewrite-ns": 391279,
      "overhead-ns": 391279,
      "exec-ns": 903935454,
      "total-ns": 904326733,
      "patts-hit": {},
      "rewritten": "pred.to_csv('prediction.csv', index=False)\n"
    },
    {
      "raw": "",
      "rewrite-ns": 23165,
      "overhead-ns": 23165,
      "exec-ns": 112405,
      "total-ns": 135570,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 23.954134255,
  "max-disk-in-mb": 0
}