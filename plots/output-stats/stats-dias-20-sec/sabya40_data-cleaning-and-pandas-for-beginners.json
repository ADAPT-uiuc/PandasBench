{
  "max-mem-in-mb": 1296,
  "max-mem-in-mb2": 1577,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n# ALEX: remove plotting\n# import seaborn as sns\nimport re\n# ALEX: remove plotting\n# import matplotlib.pyplot as plt\n# %matplotlib inline\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# ALEX: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session",
      "rewrite-ns": 568057,
      "overhead-ns": 568057,
      "exec-ns": 290727,
      "total-ns": 858784,
      "patts-hit": {},
      "rewritten": "import numpy as np\nexec(os.environ['IREWR_IMPORTS'])\nimport re\n"
    },
    {
      "raw": "flipkart_data = pd.read_csv(r\"./input/OnlineOrders_of_a_ecommerce_website.scaled.csv\")",
      "rewrite-ns": 385144,
      "overhead-ns": 385144,
      "exec-ns": 3390039450,
      "total-ns": 3390424594,
      "patts-hit": {},
      "rewritten": "flipkart_data = pd.read_csv(\n    './input/OnlineOrders_of_a_ecommerce_website.scaled.csv')\n"
    },
    {
      "raw": "flipkart_data.head()",
      "rewrite-ns": 183134,
      "overhead-ns": 183134,
      "exec-ns": 7807306,
      "total-ns": 7990440,
      "patts-hit": {},
      "rewritten": "flipkart_data.head()\n"
    },
    {
      "raw": "flipkart_data.rename(columns={'crawl_timestamp': 'Timestamp',\n                              'product_name': 'Product_Name',\n                             'product_category_tree': 'Product_Category_Tree',\n                             'retail_price': 'Retail_Price',\n                             'discounted_price': 'Discounted_Price',\n                             'brand': 'Brand'}, inplace=True)",
      "rewrite-ns": 978908,
      "overhead-ns": 978908,
      "exec-ns": 649392,
      "total-ns": 1628300,
      "patts-hit": {},
      "rewritten": "flipkart_data.rename(columns={'crawl_timestamp': 'Timestamp',\n    'product_name': 'Product_Name', 'product_category_tree':\n    'Product_Category_Tree', 'retail_price': 'Retail_Price',\n    'discounted_price': 'Discounted_Price', 'brand': 'Brand'}, inplace=True)\n"
    },
    {
      "raw": "flipkart_data.head()",
      "rewrite-ns": 77602,
      "overhead-ns": 77602,
      "exec-ns": 5116203,
      "total-ns": 5193805,
      "patts-hit": {},
      "rewritten": "flipkart_data.head()\n"
    },
    {
      "raw": "flipkart_data['Category'] = flipkart_data['Product_Category_Tree'].apply(lambda x: re.split('\\[]*|\\\"|\\>>|\\,', x)[2])",
      "rewrite-ns": 1037219,
      "overhead-ns": 1037219,
      "exec-ns": 5405772677,
      "total-ns": 5406809896,
      "patts-hit": {},
      "rewritten": "flipkart_data['Category'] = flipkart_data['Product_Category_Tree'].apply(lambda\n    x: re.split('\\\\[]*|\"|\\\\>>|\\\\,', x)[2])\n"
    },
    {
      "raw": "flipkart_data.head(5)",
      "rewrite-ns": 144820,
      "overhead-ns": 144820,
      "exec-ns": 6117757,
      "total-ns": 6262577,
      "patts-hit": {},
      "rewritten": "flipkart_data.head(5)\n"
    },
    {
      "raw": "flipkart_data.drop(['Product_Category_Tree'], axis = 1, inplace= True)",
      "rewrite-ns": 561482,
      "overhead-ns": 561482,
      "exec-ns": 85054961,
      "total-ns": 85616443,
      "patts-hit": {},
      "rewritten": "flipkart_data.drop(['Product_Category_Tree'], axis=1, inplace=True)\n"
    },
    {
      "raw": "flipkart_data.head()",
      "rewrite-ns": 117479,
      "overhead-ns": 117479,
      "exec-ns": 5663753,
      "total-ns": 5781232,
      "patts-hit": {},
      "rewritten": "flipkart_data.head()\n"
    },
    {
      "raw": "flipkart_data['Timestamp'] = flipkart_data['Timestamp'].apply(lambda x: x.split('+')[0])",
      "rewrite-ns": 993908,
      "overhead-ns": 993908,
      "exec-ns": 689903189,
      "total-ns": 690897097,
      "patts-hit": {},
      "rewritten": "flipkart_data['Timestamp'] = flipkart_data['Timestamp'].apply(lambda x: x.\n    split('+')[0])\n"
    },
    {
      "raw": "flipkart_data.head()",
      "rewrite-ns": 120215,
      "overhead-ns": 120215,
      "exec-ns": 5704228,
      "total-ns": 5824443,
      "patts-hit": {},
      "rewritten": "flipkart_data.head()\n"
    },
    {
      "raw": "# Save the data as csv file\nflipkart_data.to_csv('fkartDataset.csv', index=False)",
      "rewrite-ns": 449894,
      "overhead-ns": 449894,
      "exec-ns": 8479850985,
      "total-ns": 8480300879,
      "patts-hit": {},
      "rewritten": "flipkart_data.to_csv('fkartDataset.csv', index=False)\n"
    },
    {
      "raw": "flkart_data = pd.read_csv('fkartDataset.csv')\nflkart_data.head()",
      "rewrite-ns": 649820,
      "overhead-ns": 649820,
      "exec-ns": 2291941557,
      "total-ns": 2292591377,
      "patts-hit": {},
      "rewritten": "flkart_data = pd.read_csv('fkartDataset.csv')\nflkart_data.head()\n"
    },
    {
      "raw": "flkart_data.isnull().sum()",
      "rewrite-ns": 457828,
      "overhead-ns": 457828,
      "exec-ns": 991262116,
      "total-ns": 991719944,
      "patts-hit": {},
      "rewritten": "flkart_data.isnull().sum()\n"
    },
    {
      "raw": "#Adding the month column\nflkart_data['Month'] = pd.to_numeric(pd.DatetimeIndex(flkart_data['Timestamp']).month)\nflkart_data.head()",
      "rewrite-ns": 926853,
      "overhead-ns": 926853,
      "exec-ns": 371511073,
      "total-ns": 372437926,
      "patts-hit": {},
      "rewritten": "flkart_data['Month'] = pd.to_numeric(pd.DatetimeIndex(flkart_data[\n    'Timestamp']).month)\nflkart_data.head()\n"
    },
    {
      "raw": "totalsum = flkart_data.groupby('Month').sum()\ntotalsum ",
      "rewrite-ns": 559849,
      "overhead-ns": 559849,
      "exec-ns": 43950458,
      "total-ns": 44510307,
      "patts-hit": {},
      "rewritten": "totalsum = flkart_data.groupby('Month').sum()\ntotalsum\n"
    },
    {
      "raw": "# ALEX: remove plotting\n# months = range(1, 7)\n# plt.bar(months, totalsum['Discounted_Price'])\n# plt.xticks(months)\n# plt.xlabel(\"Months\")\n# plt.ylabel('Sales in INR')\n# plt.show()\n_ = totalsum['Discounted_Price']",
      "rewrite-ns": 356237,
      "overhead-ns": 356237,
      "exec-ns": 331785,
      "total-ns": 688022,
      "patts-hit": {},
      "rewritten": "_ = totalsum['Discounted_Price']\n"
    },
    {
      "raw": "flkart_data['Timestamp'] = pd.to_datetime(flkart_data['Timestamp'])",
      "rewrite-ns": 591034,
      "overhead-ns": 591034,
      "exec-ns": 252891253,
      "total-ns": 253482287,
      "patts-hit": {},
      "rewritten": "flkart_data['Timestamp'] = pd.to_datetime(flkart_data['Timestamp'])\n"
    },
    {
      "raw": "flkart_data['Hour'] = flkart_data['Timestamp'].dt.hour\nflkart_data['Minute'] = flkart_data['Timestamp'].dt.minute",
      "rewrite-ns": 990150,
      "overhead-ns": 990150,
      "exec-ns": 139618354,
      "total-ns": 140608504,
      "patts-hit": {},
      "rewritten": "flkart_data['Hour'] = flkart_data['Timestamp'].dt.hour\nflkart_data['Minute'] = flkart_data['Timestamp'].dt.minute\n"
    },
    {
      "raw": "flkart_data.head()",
      "rewrite-ns": 117485,
      "overhead-ns": 117485,
      "exec-ns": 7155511,
      "total-ns": 7272996,
      "patts-hit": {},
      "rewritten": "flkart_data.head()\n"
    },
    {
      "raw": "hours = [hour for hour, df in flkart_data.groupby('Hour')]\n\n# ALEX: remove plotting\n# plt.plot(hours, flkart_data.groupby(['Hour']).count())\n# plt.xticks(hours)\n# plt.xlabel('Hour')\n# plt.ylabel('Number of Orders')\n# plt.grid()\n# plt.show()\n_ = flkart_data.groupby(['Hour']).count()",
      "rewrite-ns": 1184224,
      "overhead-ns": 1184224,
      "exec-ns": 1042407568,
      "total-ns": 1043591792,
      "patts-hit": {},
      "rewritten": "hours = [hour for hour, df in flkart_data.groupby('Hour')]\n_ = flkart_data.groupby(['Hour']).count()\n"
    },
    {
      "raw": "# So our target is to look after duplicates rows\ndups_category = flkart_data.pivot_table(index=['Category'], aggfunc='size')",
      "rewrite-ns": 613381,
      "overhead-ns": 613381,
      "exec-ns": 123555637,
      "total-ns": 124169018,
      "patts-hit": {},
      "rewritten": "dups_category = flkart_data.pivot_table(index=['Category'], aggfunc='size')\n"
    },
    {
      "raw": "print(dups_category.nlargest(6))\n\n# ALEX: remove plotting\n# x =list(range(1,7))\n\n# fig, ax = plt.subplots()\n# bar = sns.barplot(data=flkart_data, x=x , y=dups_category.nlargest(6), edgecolor=\"white\")\n# ax.set_xticklabels([\"Clothes\", \"Jewel\", 'Mobile&Accessories', 'Home Decor', 'Footwear', 'Tools&Hardware'], rotation=90)\n# plt.show();\n_ = dups_category.nlargest(6)",
      "rewrite-ns": 793461,
      "overhead-ns": 793461,
      "exec-ns": 2165854,
      "total-ns": 2959315,
      "patts-hit": {},
      "rewritten": "print(dups_category.nlargest(6))\n_ = dups_category.nlargest(6)\n"
    },
    {
      "raw": "# So our target is to look after duplicates rows\ndups_product = flkart_data.pivot_table(index=['Product_Name'], aggfunc='size')\n\nprint(dups_product.nlargest(10))\n# ALEX: remove plotting\n# items = range(10)\n\n# x =list(range(1,11))\n# fig, ax = plt.subplots()\n# bar = sns.barplot(data=flkart_data, x=x , y=dups_category.nlargest(10), edgecolor=\"white\")\n# plt.show();\n_ = dups_category.nlargest(10)\n",
      "rewrite-ns": 1216198,
      "overhead-ns": 1216198,
      "exec-ns": 245570455,
      "total-ns": 246786653,
      "patts-hit": {},
      "rewritten": "dups_product = flkart_data.pivot_table(index=['Product_Name'], aggfunc='size')\nprint(dups_product.nlargest(10))\n_ = dups_category.nlargest(10)\n"
    },
    {
      "raw": "",
      "rewrite-ns": 19389,
      "overhead-ns": 19389,
      "exec-ns": 105532,
      "total-ns": 124921,
      "patts-hit": {},
      "rewritten": ""
    }
  ],
  "total-time-in-sec": 23.608531552,
  "max-disk-in-mb": 0
}