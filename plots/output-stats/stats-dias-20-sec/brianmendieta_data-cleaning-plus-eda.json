{
  "max-mem-in-mb": 471,
  "max-mem-in-mb2": 553,
  "cells": [
    {
      "raw": "# Import the necessary libraries\n# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\nfrom datetime import datetime\n#import zipfile\n#import kaggle",
      "rewrite-ns": 569089,
      "overhead-ns": 569089,
      "exec-ns": 308783,
      "total-ns": 877872,
      "patts-hit": {},
      "rewritten": "exec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\nfrom datetime import datetime\n"
    },
    {
      "raw": "# Uncomment the import to extract the file from Kaggle with your key\n#!kaggle datasets download -d rashikrahmanpritom/data-science-job-posting-on-glassdoor",
      "rewrite-ns": 12746,
      "overhead-ns": 12746,
      "exec-ns": 68215,
      "total-ns": 80961,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Extract the files from the ZIP file\n#zip_name = 'data-science-job-posting-on-glassdoor.zip'\n#with zipfile.ZipFile(zip_name,'r') as file:\n#    file.extractall()",
      "rewrite-ns": 10803,
      "overhead-ns": 10803,
      "exec-ns": 60108,
      "total-ns": 70911,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Read the .csv file as a pandas dataframe\njob_data = pd.read_csv(\"./input/Uncleaned_DS_jobs.scaled.csv\")",
      "rewrite-ns": 368581,
      "overhead-ns": 368581,
      "exec-ns": 12438086080,
      "total-ns": 12438454661,
      "patts-hit": {},
      "rewritten": "job_data = pd.read_csv('./input/Uncleaned_DS_jobs.scaled.csv')\n"
    },
    {
      "raw": "# Explore the data\njob_data.info()",
      "rewrite-ns": 209773,
      "overhead-ns": 209773,
      "exec-ns": 727448069,
      "total-ns": 727657842,
      "patts-hit": {},
      "rewritten": "job_data.info()\n"
    },
    {
      "raw": "job_data.shape",
      "rewrite-ns": 105381,
      "overhead-ns": 105381,
      "exec-ns": 1282627,
      "total-ns": 1388008,
      "patts-hit": {},
      "rewritten": "job_data.shape\n"
    },
    {
      "raw": "# Check the information structure\njob_data.head()",
      "rewrite-ns": 102209,
      "overhead-ns": 102209,
      "exec-ns": 11253010,
      "total-ns": 11355219,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "# Drop the index column\njob_data.drop('index',axis=1,inplace=True)",
      "rewrite-ns": 497838,
      "overhead-ns": 497838,
      "exec-ns": 55882766,
      "total-ns": 56380604,
      "patts-hit": {},
      "rewritten": "job_data.drop('index', axis=1, inplace=True)\n"
    },
    {
      "raw": "# Check for duplicates\njob_data[job_data.duplicated()].shape\njob_data[job_data.duplicated()]",
      "rewrite-ns": 766223,
      "overhead-ns": 766223,
      "exec-ns": 5876091386,
      "total-ns": 5876857609,
      "patts-hit": {},
      "rewritten": "job_data[job_data.duplicated()].shape\njob_data[job_data.duplicated()]\n"
    },
    {
      "raw": "# Drop duplicates\njob_data.drop_duplicates(inplace=True)",
      "rewrite-ns": 528340,
      "overhead-ns": 528340,
      "exec-ns": 2880783856,
      "total-ns": 2881312196,
      "patts-hit": {},
      "rewritten": "job_data.drop_duplicates(inplace=True)\n"
    },
    {
      "raw": "# Check the shape again\njob_data.shape",
      "rewrite-ns": 144197,
      "overhead-ns": 144197,
      "exec-ns": 738772,
      "total-ns": 882969,
      "patts-hit": {},
      "rewritten": "job_data.shape\n"
    },
    {
      "raw": "# Set appropiate column names in the form of lowercase words separated by '_'\njob_data.rename(columns= lambda header: header.lower().replace(\" \",\"_\"), inplace= True)",
      "rewrite-ns": 970107,
      "overhead-ns": 970107,
      "exec-ns": 699281,
      "total-ns": 1669388,
      "patts-hit": {},
      "rewritten": "job_data.rename(columns=lambda header: header.lower().replace(' ', '_'),\n    inplace=True)\n"
    },
    {
      "raw": "# Inspect the Job title column\njob_data[\"job_title\"][:150]",
      "rewrite-ns": 392726,
      "overhead-ns": 392726,
      "exec-ns": 23102516,
      "total-ns": 23495242,
      "patts-hit": {},
      "rewritten": "job_data['job_title'][:150]\n"
    },
    {
      "raw": "# Make the replacement\njob_data[\"job_title\"]=job_data.loc[:,\"job_title\"].str.replace(\"(Sr.)\",\"sr.\")",
      "rewrite-ns": 862251,
      "overhead-ns": 862251,
      "exec-ns": 1346204,
      "total-ns": 2208455,
      "patts-hit": {},
      "rewritten": "job_data['job_title'] = job_data.loc[:, 'job_title'].str.replace('(Sr.)', 'sr.'\n    )\n"
    },
    {
      "raw": "# Delete the rest of the instances using a regex\njob_data[\"job_title\"]=job_data.loc[:,\"job_title\"].str.extract('([^()]+)')",
      "rewrite-ns": 755972,
      "overhead-ns": 755972,
      "exec-ns": 1640187,
      "total-ns": 2396159,
      "patts-hit": {},
      "rewritten": "job_data['job_title'] = job_data.loc[:, 'job_title'].str.extract('([^()]+)')\n"
    },
    {
      "raw": "#Replace the special characters with an empty value by defining a regex pattern\njob_data['job_title'] = job_data['job_title'].str.replace(r'[^a-zA-Z0-9-,/\\s]','',regex=True)",
      "rewrite-ns": 717678,
      "overhead-ns": 717678,
      "exec-ns": 941277,
      "total-ns": 1658955,
      "patts-hit": {},
      "rewritten": "job_data['job_title'] = job_data['job_title'].str.replace('[^a-zA-Z0-9-,/\\\\s]',\n    '', regex=True)\n"
    },
    {
      "raw": "#Inspect the salary estimate column\njob_data['salary_estimate'][100:200]",
      "rewrite-ns": 410254,
      "overhead-ns": 410254,
      "exec-ns": 24642296,
      "total-ns": 25052550,
      "patts-hit": {},
      "rewritten": "job_data['salary_estimate'][100:200]\n"
    },
    {
      "raw": "# Define a function to extract the salary limits\ndef extract_values(text):\n    extracted_integer = ''\n    modified_string = ''\n    \n    for i in range(len(text)):\n        if i+1 < len(text):\n            if text[i].isdigit():\n                extracted_integer += text[i]\n                if not text[i+1].isdigit():\n                    break\n        if i == len(text) - 1 and text[i].isdigit():\n            extracted_integer += text[i]\n    \n    if extracted_integer:\n        modified_string = text[:text.find(extracted_integer)] + text[text.find(extracted_integer) + len(extracted_integer):]\n        extracted_integer = int(extracted_integer)\n    \n    return extracted_integer, modified_string",
      "rewrite-ns": 4670880,
      "overhead-ns": 4670880,
      "exec-ns": 879977,
      "total-ns": 5550857,
      "patts-hit": {},
      "rewritten": "def extract_values(text):\n    extracted_integer = ''\n    modified_string = ''\n    for i in range(len(text)):\n        if i + 1 < len(text):\n            if text[i].isdigit():\n                extracted_integer += text[i]\n                if not text[i + 1].isdigit():\n                    break\n        if i == len(text) - 1 and text[i].isdigit():\n            extracted_integer += text[i]\n    if extracted_integer:\n        modified_string = text[:text.find(extracted_integer)] + text[text.\n            find(extracted_integer) + len(extracted_integer):]\n        extracted_integer = int(extracted_integer)\n    return extracted_integer, modified_string\n"
    },
    {
      "raw": "#Obtain the minimum salary in the range\njob_data['min_salary_K$'], job_data['salary_estimate'] = zip(*job_data['salary_estimate'].apply(extract_values))",
      "rewrite-ns": 909776,
      "overhead-ns": 909776,
      "exec-ns": 2154105,
      "total-ns": 3063881,
      "patts-hit": {},
      "rewritten": "job_data['min_salary_K$'], job_data['salary_estimate'] = zip(*job_data[\n    'salary_estimate'].apply(extract_values))\n"
    },
    {
      "raw": "#Obtain the maximum salary in the range\njob_data['max_salary_K$'], job_data['salary_estimate'] = zip(*job_data['salary_estimate'].apply(extract_values))",
      "rewrite-ns": 879994,
      "overhead-ns": 879994,
      "exec-ns": 2275879,
      "total-ns": 3155873,
      "patts-hit": {},
      "rewritten": "job_data['max_salary_K$'], job_data['salary_estimate'] = zip(*job_data[\n    'salary_estimate'].apply(extract_values))\n"
    },
    {
      "raw": "#Drop the old salary range column\njob_data.drop('salary_estimate', axis=1, inplace=True)",
      "rewrite-ns": 438314,
      "overhead-ns": 438314,
      "exec-ns": 823152,
      "total-ns": 1261466,
      "patts-hit": {},
      "rewritten": "job_data.drop('salary_estimate', axis=1, inplace=True)\n"
    },
    {
      "raw": "#Let's obtain the average of these ranges\njob_data['avg_salary_estimate'] = (np.round((job_data['min_salary_K$'] + job_data['max_salary_K$'])/2,decimals=0)).astype(int)\njob_data.head()",
      "rewrite-ns": 1105825,
      "overhead-ns": 1105825,
      "exec-ns": 10146901,
      "total-ns": 11252726,
      "patts-hit": {},
      "rewritten": "job_data['avg_salary_estimate'] = np.round((job_data['min_salary_K$'] +\n    job_data['max_salary_K$']) / 2, decimals=0).astype(int)\njob_data.head()\n"
    },
    {
      "raw": "#Inspect the job description column\njob_data['job_description'][:150]",
      "rewrite-ns": 363419,
      "overhead-ns": 363419,
      "exec-ns": 1223870,
      "total-ns": 1587289,
      "patts-hit": {},
      "rewritten": "job_data['job_description'][:150]\n"
    },
    {
      "raw": "job_data.loc[:,\"job_description\"]\njob_data.loc[job_data.loc[:,\"job_description\"]==\"-1\"]",
      "rewrite-ns": 942108,
      "overhead-ns": 942108,
      "exec-ns": 1552859,
      "total-ns": 2494967,
      "patts-hit": {},
      "rewritten": "job_data.loc[:, 'job_description']\njob_data.loc[job_data.loc[:, 'job_description'] == '-1']\n"
    },
    {
      "raw": "#Inspect the rating column\njob_data['rating'][:150]",
      "rewrite-ns": 362115,
      "overhead-ns": 362115,
      "exec-ns": 1270927,
      "total-ns": 1633042,
      "patts-hit": {},
      "rewritten": "job_data['rating'][:150]\n"
    },
    {
      "raw": "job_data['rating'].unique()",
      "rewrite-ns": 108849,
      "overhead-ns": 108849,
      "exec-ns": 795139,
      "total-ns": 903988,
      "patts-hit": {},
      "rewritten": "job_data['rating'].unique()\n"
    },
    {
      "raw": "# Replace rating mising values with NaN across the entire column\njob_data['rating'].replace(-1.0,np.nan,inplace=True)",
      "rewrite-ns": 621827,
      "overhead-ns": 621827,
      "exec-ns": 502005,
      "total-ns": 1123832,
      "patts-hit": {},
      "rewritten": "job_data['rating'].replace(-1.0, np.nan, inplace=True)\n"
    },
    {
      "raw": "job_data['rating'].unique()",
      "rewrite-ns": 97147,
      "overhead-ns": 97147,
      "exec-ns": 732930,
      "total-ns": 830077,
      "patts-hit": {},
      "rewritten": "job_data['rating'].unique()\n"
    },
    {
      "raw": "# Inspect the company name column\njob_data['company_name'][:10]",
      "rewrite-ns": 365835,
      "overhead-ns": 365835,
      "exec-ns": 872394,
      "total-ns": 1238229,
      "patts-hit": {},
      "rewritten": "job_data['company_name'][:10]\n"
    },
    {
      "raw": "job_data['company_name'] = job_data.loc[:,'company_name'].str.replace(r\"\\n\\d+(\\.\\d+)?\",'',regex=True)\njob_data.loc[:,\"company_name\"][:10]",
      "rewrite-ns": 1262268,
      "overhead-ns": 1262268,
      "exec-ns": 1854850,
      "total-ns": 3117118,
      "patts-hit": {},
      "rewritten": "job_data['company_name'] = job_data.loc[:, 'company_name'].str.replace(\n    '\\\\n\\\\d+(\\\\.\\\\d+)?', '', regex=True)\njob_data.loc[:, 'company_name'][:10]\n"
    },
    {
      "raw": "# Inspect the location column\njob_data['location'][:10]",
      "rewrite-ns": 360550,
      "overhead-ns": 360550,
      "exec-ns": 858424,
      "total-ns": 1218974,
      "patts-hit": {},
      "rewritten": "job_data['location'][:10]\n"
    },
    {
      "raw": "# Check the counts of each unique location state\njob_data.loc[:,\"location\"].apply(lambda x: x.split(\",\")[-1]).value_counts()",
      "rewrite-ns": 1091348,
      "overhead-ns": 1091348,
      "exec-ns": 1590397,
      "total-ns": 2681745,
      "patts-hit": {},
      "rewritten": "job_data.loc[:, 'location'].apply(lambda x: x.split(',')[-1]).value_counts()\n"
    },
    {
      "raw": "# Create the state column\njob_data['location_state'] = job_data['location'].apply(lambda x: x.split(',')[-1].strip())",
      "rewrite-ns": 1055613,
      "overhead-ns": 1055613,
      "exec-ns": 800131,
      "total-ns": 1855744,
      "patts-hit": {},
      "rewritten": "job_data['location_state'] = job_data['location'].apply(lambda x: x.split(\n    ',')[-1].strip())\n"
    },
    {
      "raw": "# Replace the inconsistencies with their correct state abbreviation\ndef clean_location(jobs):\n    return (\n        jobs.loc[:, \"location_state\"]\n        .replace(\"California\",\"CA\")\n        .replace(\"Texas\",\"TX\")\n        .replace(\"Utah\",\"UT\")\n        .replace(\"New Jersey\",\"NJ\")\n        .replace(\"Remote\",\"n/a\")\n        .replace(\"United States\",\"n/a\")\n    )\n\njob_data = job_data.assign(\n    location_state = clean_location\n)",
      "rewrite-ns": 1808701,
      "overhead-ns": 1808701,
      "exec-ns": 1533390,
      "total-ns": 3342091,
      "patts-hit": {},
      "rewritten": "def clean_location(jobs):\n    return jobs.loc[:, 'location_state'].replace('California', 'CA').replace(\n        'Texas', 'TX').replace('Utah', 'UT').replace('New Jersey', 'NJ'\n        ).replace('Remote', 'n/a').replace('United States', 'n/a')\njob_data = job_data.assign(location_state=clean_location)\n"
    },
    {
      "raw": "job_data[\"location_state\"].value_counts()",
      "rewrite-ns": 358435,
      "overhead-ns": 358435,
      "exec-ns": 1146143,
      "total-ns": 1504578,
      "patts-hit": {},
      "rewritten": "job_data['location_state'].value_counts()\n"
    },
    {
      "raw": "# Check if the location of the job and the HQ are in the place\njob_data['same_state'] = (job_data['location'] == job_data['headquarters']).astype(int)",
      "rewrite-ns": 740808,
      "overhead-ns": 740808,
      "exec-ns": 696424,
      "total-ns": 1437232,
      "patts-hit": {},
      "rewritten": "job_data['same_state'] = (job_data['location'] == job_data['headquarters']\n    ).astype(int)\n"
    },
    {
      "raw": "job_data.head()",
      "rewrite-ns": 72380,
      "overhead-ns": 72380,
      "exec-ns": 9816152,
      "total-ns": 9888532,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "# Inspect the headquarters column\njob_data['headquarters'].value_counts()",
      "rewrite-ns": 371876,
      "overhead-ns": 371876,
      "exec-ns": 1265060,
      "total-ns": 1636936,
      "patts-hit": {},
      "rewritten": "job_data['headquarters'].value_counts()\n"
    },
    {
      "raw": "job_data['headquarters'] = job_data['headquarters'].apply(lambda x: x.replace('-1','n/a'))\njob_data[\"headquarters\"].value_counts()",
      "rewrite-ns": 1162663,
      "overhead-ns": 1162663,
      "exec-ns": 1759767,
      "total-ns": 2922430,
      "patts-hit": {},
      "rewritten": "job_data['headquarters'] = job_data['headquarters'].apply(lambda x: x.\n    replace('-1', 'n/a'))\njob_data['headquarters'].value_counts()\n"
    },
    {
      "raw": "# Inspect the size column\nprint(job_data['size'][:100])\njob_data['size'].unique()",
      "rewrite-ns": 521454,
      "overhead-ns": 521454,
      "exec-ns": 1224645,
      "total-ns": 1746099,
      "patts-hit": {},
      "rewritten": "print(job_data['size'][:100])\njob_data['size'].unique()\n"
    },
    {
      "raw": "# Handle the missing values correctly\ndef size_cleaning(jobs):\n    return (\n        jobs.loc[:, \"size\"]\n        .replace(\"-1\",\"n/a\")\n        .replace(\"Unknown\",\"n/a\")\n    )\n\njob_data = job_data.assign(\n    size = size_cleaning\n)",
      "rewrite-ns": 1176776,
      "overhead-ns": 1176776,
      "exec-ns": 1070070,
      "total-ns": 2246846,
      "patts-hit": {},
      "rewritten": "def size_cleaning(jobs):\n    return jobs.loc[:, 'size'].replace('-1', 'n/a').replace('Unknown', 'n/a')\njob_data = job_data.assign(size=size_cleaning)\n"
    },
    {
      "raw": "job_data['size'].unique()",
      "rewrite-ns": 101782,
      "overhead-ns": 101782,
      "exec-ns": 600914,
      "total-ns": 702696,
      "patts-hit": {},
      "rewritten": "job_data['size'].unique()\n"
    },
    {
      "raw": "# Inspect the founded column\njob_data['founded'][:100]",
      "rewrite-ns": 358908,
      "overhead-ns": 358908,
      "exec-ns": 1006055,
      "total-ns": 1364963,
      "patts-hit": {},
      "rewritten": "job_data['founded'][:100]\n"
    },
    {
      "raw": "#Clean the missing values\njob_data['founded'].replace(-1,np.nan,inplace=True)\njob_data['founded'].unique()",
      "rewrite-ns": 679739,
      "overhead-ns": 679739,
      "exec-ns": 1498353,
      "total-ns": 2178092,
      "patts-hit": {},
      "rewritten": "job_data['founded'].replace(-1, np.nan, inplace=True)\njob_data['founded'].unique()\n"
    },
    {
      "raw": "# obtain the years the company has been in the market and drop the founed column\ncurrent_year = datetime.now().year\njob_data['years_in_market'] = current_year - job_data['founded']\njob_data.drop('founded',axis=1,inplace=True)\njob_data.head()",
      "rewrite-ns": 1194602,
      "overhead-ns": 1194602,
      "exec-ns": 11049621,
      "total-ns": 12244223,
      "patts-hit": {},
      "rewritten": "current_year = datetime.now().year\njob_data['years_in_market'] = current_year - job_data['founded']\njob_data.drop('founded', axis=1, inplace=True)\njob_data.head()\n"
    },
    {
      "raw": "# Inspect the Type of ownership column\njob_data['type_of_ownership'][:100]",
      "rewrite-ns": 363778,
      "overhead-ns": 363778,
      "exec-ns": 1098840,
      "total-ns": 1462618,
      "patts-hit": {},
      "rewritten": "job_data['type_of_ownership'][:100]\n"
    },
    {
      "raw": "job_data['type_of_ownership'].unique()",
      "rewrite-ns": 103210,
      "overhead-ns": 103210,
      "exec-ns": 564477,
      "total-ns": 667687,
      "patts-hit": {},
      "rewritten": "job_data['type_of_ownership'].unique()\n"
    },
    {
      "raw": "def ownership(jobs):\n    return (\n        jobs.loc[:, \"type_of_ownership\"]\n        .replace(\"Nonprofit Organization\",\"Nonprofit\")\n        .replace(\"-1\",\"n/a\")\n        .replace(\"Unknown\",\"n/a\")\n        .replace(\"Company - Public\",\"Public\")\n        .replace(\"Company - Private\",\"Private\")\n        .replace(\"Other Organization\",\"Other\")   \n    )\n\njob_data = job_data.assign(\n    type_of_ownership = ownership\n)",
      "rewrite-ns": 1814268,
      "overhead-ns": 1814268,
      "exec-ns": 1475045,
      "total-ns": 3289313,
      "patts-hit": {},
      "rewritten": "def ownership(jobs):\n    return jobs.loc[:, 'type_of_ownership'].replace('Nonprofit Organization',\n        'Nonprofit').replace('-1', 'n/a').replace('Unknown', 'n/a').replace(\n        'Company - Public', 'Public').replace('Company - Private', 'Private'\n        ).replace('Other Organization', 'Other')\njob_data = job_data.assign(type_of_ownership=ownership)\n"
    },
    {
      "raw": "job_data['type_of_ownership'].unique()",
      "rewrite-ns": 103127,
      "overhead-ns": 103127,
      "exec-ns": 599269,
      "total-ns": 702396,
      "patts-hit": {},
      "rewritten": "job_data['type_of_ownership'].unique()\n"
    },
    {
      "raw": "# Inspect the industry column\njob_data['industry'].value_counts()",
      "rewrite-ns": 354398,
      "overhead-ns": 354398,
      "exec-ns": 1238421,
      "total-ns": 1592819,
      "patts-hit": {},
      "rewritten": "job_data['industry'].value_counts()\n"
    },
    {
      "raw": "job_data[\"industry\"] = job_data[\"industry\"].apply(lambda x: x.replace(\"-1\",\"n/a\"))\njob_data['industry'].unique()",
      "rewrite-ns": 916607,
      "overhead-ns": 916607,
      "exec-ns": 1220880,
      "total-ns": 2137487,
      "patts-hit": {},
      "rewritten": "job_data['industry'] = job_data['industry'].apply(lambda x: x.replace('-1',\n    'n/a'))\njob_data['industry'].unique()\n"
    },
    {
      "raw": "# Inspect the sector column\njob_data['sector'].value_counts()",
      "rewrite-ns": 359331,
      "overhead-ns": 359331,
      "exec-ns": 1034149,
      "total-ns": 1393480,
      "patts-hit": {},
      "rewritten": "job_data['sector'].value_counts()\n"
    },
    {
      "raw": "job_data['sector'] = job_data['sector'].apply(lambda x: x.replace(\"-1\",\"n/a\"))\njob_data['sector'].unique()",
      "rewrite-ns": 888348,
      "overhead-ns": 888348,
      "exec-ns": 1125562,
      "total-ns": 2013910,
      "patts-hit": {},
      "rewritten": "job_data['sector'] = job_data['sector'].apply(lambda x: x.replace('-1', 'n/a'))\njob_data['sector'].unique()\n"
    },
    {
      "raw": "# Inspect the revenue column\njob_data['revenue'].value_counts()",
      "rewrite-ns": 360541,
      "overhead-ns": 360541,
      "exec-ns": 991457,
      "total-ns": 1351998,
      "patts-hit": {},
      "rewritten": "job_data['revenue'].value_counts()\n"
    },
    {
      "raw": "def revenue_cleanup(jobs):\n    return (\n        jobs.loc[:, \"revenue\"]\n        .replace(\"-1\",\"n/a\")\n        .replace(\"Unknown / Non-Applicable\",\"n/a\")\n    )\n\njob_data = job_data.assign(\n    revenue = revenue_cleanup\n)",
      "rewrite-ns": 1283365,
      "overhead-ns": 1283365,
      "exec-ns": 1037769,
      "total-ns": 2321134,
      "patts-hit": {},
      "rewritten": "def revenue_cleanup(jobs):\n    return jobs.loc[:, 'revenue'].replace('-1', 'n/a').replace(\n        'Unknown / Non-Applicable', 'n/a')\njob_data = job_data.assign(revenue=revenue_cleanup)\n"
    },
    {
      "raw": "job_data['revenue']=job_data.loc[:,'revenue'].str.extract('([^()]+)')\njob_data['revenue'].value_counts()",
      "rewrite-ns": 1016132,
      "overhead-ns": 1016132,
      "exec-ns": 2034757,
      "total-ns": 3050889,
      "patts-hit": {},
      "rewritten": "job_data['revenue'] = job_data.loc[:, 'revenue'].str.extract('([^()]+)')\njob_data['revenue'].value_counts()\n"
    },
    {
      "raw": "# Finally inspect the competitors column\njob_data['competitors'].value_counts()\n",
      "rewrite-ns": 357373,
      "overhead-ns": 357373,
      "exec-ns": 1222857,
      "total-ns": 1580230,
      "patts-hit": {},
      "rewritten": "job_data['competitors'].value_counts()\n"
    },
    {
      "raw": "np.round((488/659)*100,decimals=2)",
      "rewrite-ns": 567816,
      "overhead-ns": 567816,
      "exec-ns": 481074,
      "total-ns": 1048890,
      "patts-hit": {},
      "rewritten": "np.round(488 / 659 * 100, decimals=2)\n"
    },
    {
      "raw": "#The percentage is too high so we drop this column\njob_data.drop('competitors',axis=1,inplace=True)",
      "rewrite-ns": 424665,
      "overhead-ns": 424665,
      "exec-ns": 647408,
      "total-ns": 1072073,
      "patts-hit": {},
      "rewritten": "job_data.drop('competitors', axis=1, inplace=True)\n"
    },
    {
      "raw": "job_data.head()",
      "rewrite-ns": 69944,
      "overhead-ns": 69944,
      "exec-ns": 9590980,
      "total-ns": 9660924,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "# Check if we have any '-1' as missing values\njob_data[job_data.eq('-1').any(axis = 1)]",
      "rewrite-ns": 569904,
      "overhead-ns": 569904,
      "exec-ns": 1664339,
      "total-ns": 2234243,
      "patts-hit": {},
      "rewritten": "job_data[job_data.eq('-1').any(axis=1)]\n"
    },
    {
      "raw": "# Check if we have a numerical missing value in any column \njob_data[job_data.eq(-1).any(axis = 1)]",
      "rewrite-ns": 615878,
      "overhead-ns": 615878,
      "exec-ns": 1504130,
      "total-ns": 2120008,
      "patts-hit": {},
      "rewritten": "job_data[job_data.eq(-1).any(axis=1)]\n"
    },
    {
      "raw": "# Define a simplification function\n\ndef role_defining(title): \n    if any(keyword in title.lower() for keyword in ['data scientist', 'data science']):\n        return 'Data Scientist'\n    elif any(keyword in title.lower() for keyword in ['data analyst', 'analyst']):\n        return 'Data Analyst'\n    elif 'data engineer' in title.lower():\n        return 'Data Engineer'\n    elif any(keyword in title.lower() for keyword in ['machine learning', 'ai']):\n        return 'Machine Learning Engineer'\n    else:\n        return 'Other'",
      "rewrite-ns": 2663329,
      "overhead-ns": 2663329,
      "exec-ns": 679428,
      "total-ns": 3342757,
      "patts-hit": {},
      "rewritten": "def role_defining(title):\n    if any(keyword in title.lower() for keyword in ['data scientist',\n        'data science']):\n        return 'Data Scientist'\n    elif any(keyword in title.lower() for keyword in ['data analyst',\n        'analyst']):\n        return 'Data Analyst'\n    elif 'data engineer' in title.lower():\n        return 'Data Engineer'\n    elif any(keyword in title.lower() for keyword in ['machine learning', 'ai']\n        ):\n        return 'Machine Learning Engineer'\n    else:\n        return 'Other'\n"
    },
    {
      "raw": "# Apply the function to the new column\njob_data['job_role']= job_data['job_title'].apply(role_defining)\njob_data['job_role'].value_counts()",
      "rewrite-ns": 840026,
      "overhead-ns": 840026,
      "exec-ns": 1890167,
      "total-ns": 2730193,
      "patts-hit": {},
      "rewritten": "job_data['job_role'] = job_data['job_title'].apply(role_defining)\njob_data['job_role'].value_counts()\n"
    },
    {
      "raw": "def seniority_defining(title,description):\n    if any(keyword in title.lower() for keyword in ['jr.','jr','junior']) or any(keyword in description.lower() for keyword in ['jr.','jr','junior']):\n        return 'Jr'\n    elif any(keyword in title.lower() for keyword in ['sr.','sr','vp','senior']) or any(keyword in description.lower() for keyword in ['sr.','sr','vp','senior']):\n        return 'Sr'\n    else:\n        return 'Mid-Level'\n    \n\njob_data['job_seniority'] = job_data.apply(lambda row: seniority_defining(row['job_title'], row['job_description']), axis=1)\njob_data['job_seniority'].value_counts()",
      "rewrite-ns": 4334331,
      "overhead-ns": 4730628,
      "exec-ns": 72294243,
      "total-ns": 76628574,
      "patts-hit": {},
      "rewritten": "def seniority_defining(title, description):\n    if any(keyword in title.lower() for keyword in ['jr.', 'jr', 'junior']\n        ) or any(keyword in description.lower() for keyword in ['jr.', 'jr',\n        'junior']):\n        return 'Jr'\n    elif any(keyword in title.lower() for keyword in ['sr.', 'sr', 'vp',\n        'senior']) or any(keyword in description.lower() for keyword in [\n        'sr.', 'sr', 'vp', 'senior']):\n        return 'Sr'\n    else:\n        return 'Mid-Level'\njob_data['job_seniority'] = job_data.apply(lambda row: seniority_defining(\n    row['job_title'], row['job_description']), axis=1)\njob_data['job_seniority'].value_counts()\n"
    },
    {
      "raw": "job_data.head()",
      "rewrite-ns": 75938,
      "overhead-ns": 75938,
      "exec-ns": 10294594,
      "total-ns": 10370532,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "# Create dummy columns for each of the skill considered.\njob_data['excel'] = job_data.apply(lambda x: 1 if 'excel' in x.job_description.lower() else 0, axis=1)\njob_data['sql'] = job_data.apply(lambda x: 1 if 'sql' in x.job_description.lower() else 0, axis=1)\njob_data['python'] = job_data.apply(lambda x: 1 if 'python' in x.job_description.lower() else 0, axis=1)\njob_data['power_bi'] = job_data.apply(lambda x: 1 if 'power bi' in x.job_description.lower() else 0, axis=1)\njob_data['tableau'] = job_data.apply(lambda x: 1 if 'tableau' in x.job_description.lower() else 0, axis=1)\njob_data['scikit'] = job_data.apply(lambda x: 1 if 'scikit' in x.job_description.lower() else 0, axis=1)\njob_data['spark'] = job_data.apply(lambda x: 1 if 'spark' in x.job_description.lower() else 0, axis=1)",
      "rewrite-ns": 6826778,
      "overhead-ns": 6990848,
      "exec-ns": 95791076,
      "total-ns": 102617854,
      "patts-hit": {},
      "rewritten": "job_data['excel'] = job_data.apply(lambda x: 1 if 'excel' in x.\n    job_description.lower() else 0, axis=1)\njob_data['sql'] = job_data.apply(lambda x: 1 if 'sql' in x.job_description.\n    lower() else 0, axis=1)\njob_data['python'] = job_data.apply(lambda x: 1 if 'python' in x.\n    job_description.lower() else 0, axis=1)\njob_data['power_bi'] = job_data.apply(lambda x: 1 if 'power bi' in x.\n    job_description.lower() else 0, axis=1)\njob_data['tableau'] = job_data.apply(lambda x: 1 if 'tableau' in x.\n    job_description.lower() else 0, axis=1)\njob_data['scikit'] = job_data.apply(lambda x: 1 if 'scikit' in x.\n    job_description.lower() else 0, axis=1)\njob_data['spark'] = job_data.apply(lambda x: 1 if 'spark' in x.\n    job_description.lower() else 0, axis=1)\n"
    },
    {
      "raw": "print(job_data['excel'].value_counts())\nprint(job_data['sql'].value_counts())\nprint(job_data['python'].value_counts())\nprint(job_data['power_bi'].value_counts())\nprint(job_data['tableau'].value_counts())\nprint(job_data['scikit'].value_counts())\nprint(job_data['spark'].value_counts())",
      "rewrite-ns": 2560325,
      "overhead-ns": 2560325,
      "exec-ns": 2978327,
      "total-ns": 5538652,
      "patts-hit": {},
      "rewritten": "print(job_data['excel'].value_counts())\nprint(job_data['sql'].value_counts())\nprint(job_data['python'].value_counts())\nprint(job_data['power_bi'].value_counts())\nprint(job_data['tableau'].value_counts())\nprint(job_data['scikit'].value_counts())\nprint(job_data['spark'].value_counts())\n"
    },
    {
      "raw": "job_data.head()",
      "rewrite-ns": 73411,
      "overhead-ns": 73411,
      "exec-ns": 12907139,
      "total-ns": 12980550,
      "patts-hit": {},
      "rewritten": "job_data.head()\n"
    },
    {
      "raw": "job_data.to_csv('Cleaned_Job_Data.csv',index= False)\njob_data.to_excel('Cleaned_Job_Data.xlsx',index=False)",
      "rewrite-ns": 682326,
      "overhead-ns": 682326,
      "exec-ns": 462005618,
      "total-ns": 462687944,
      "patts-hit": {},
      "rewritten": "job_data.to_csv('Cleaned_Job_Data.csv', index=False)\njob_data.to_excel('Cleaned_Job_Data.xlsx', index=False)\n"
    },
    {
      "raw": "# Include the necessary packages fro analysisi and visualization\n# FIRST-AUTHOR: remove plotting\n# import matplotlib.pyplot as plt\n# import seaborn as sns\n# %matplotlib inline",
      "rewrite-ns": 16537,
      "overhead-ns": 16537,
      "exec-ns": 87892,
      "total-ns": 104429,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Obtain the basic statistics of the data frame\njob_data.describe()",
      "rewrite-ns": 96057,
      "overhead-ns": 96057,
      "exec-ns": 22944211,
      "total-ns": 23040268,
      "patts-hit": {},
      "rewritten": "job_data.describe()\n"
    },
    {
      "raw": "#Obtain the relationships between columns\n# FIRST-AUTHOR: remove plotting\n# sns.pairplot(job_data)",
      "rewrite-ns": 13612,
      "overhead-ns": 13612,
      "exec-ns": 72500,
      "total-ns": 86112,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "industry_salary = [\n    round(job_data.loc[job_data[\"industry\"]==\"Biotech & Pharmaceuticals\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"IT Services\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"Computer Hardware & Software\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"Aerospace & Defense\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"Enterprise Software & Network Solutions\",\"avg_salary_estimate\"].mean(), 2)\n]\n\ntop_paying_industries = [\n    \"Biotech & Pharmaceuticals\",\n    \"IT Services\",\n    \"Computer Hardware & Software\",\n    \"Aerospace & Defense\",\n    \"Enterprise Software & Network Solutions\"\n]\n\n# FIRST-AUTHOR: remove plotting\n# plt.bar(top_paying_industries, industry_salary)\n# plt.ylim(110, 140)\n# plt.xlabel(\"Job Industry\")\n# plt.ylabel(\"Average Salary\")\n\n# # Rotate the x-axis labels by 70 degrees\n# plt.xticks(rotation=70)\n\n# plt.show()",
      "rewrite-ns": 4054325,
      "overhead-ns": 4054325,
      "exec-ns": 1994834,
      "total-ns": 6049159,
      "patts-hit": {},
      "rewritten": "industry_salary = [round(job_data.loc[job_data['industry'] ==\n    'Biotech & Pharmaceuticals', 'avg_salary_estimate'].mean(), 2), round(\n    job_data.loc[job_data['industry'] == 'IT Services',\n    'avg_salary_estimate'].mean(), 2), round(job_data.loc[job_data[\n    'industry'] == 'Computer Hardware & Software', 'avg_salary_estimate'].\n    mean(), 2), round(job_data.loc[job_data['industry'] ==\n    'Aerospace & Defense', 'avg_salary_estimate'].mean(), 2), round(\n    job_data.loc[job_data['industry'] ==\n    'Enterprise Software & Network Solutions', 'avg_salary_estimate'].mean(\n    ), 2)]\ntop_paying_industries = ['Biotech & Pharmaceuticals', 'IT Services',\n    'Computer Hardware & Software', 'Aerospace & Defense',\n    'Enterprise Software & Network Solutions']\n"
    },
    {
      "raw": "# Let's start by analyzing the average salary for job postings\n# FIRST-AUTHOR: remove plotting\n# sns.boxplot(x=job_data['avg_salary_estimate'])\n_ = job_data['avg_salary_estimate']",
      "rewrite-ns": 300367,
      "overhead-ns": 300367,
      "exec-ns": 216387,
      "total-ns": 516754,
      "patts-hit": {},
      "rewritten": "_ = job_data['avg_salary_estimate']\n"
    },
    {
      "raw": "# We can define a new data frame to fit in better inside the avg. salary range\ndf = job_data[(job_data.avg_salary_estimate > 50) & (job_data.avg_salary_estimate < 200)] ",
      "rewrite-ns": 723503,
      "overhead-ns": 723503,
      "exec-ns": 808755,
      "total-ns": 1532258,
      "patts-hit": {},
      "rewritten": "df = job_data[(job_data.avg_salary_estimate > 50) & (job_data.\n    avg_salary_estimate < 200)]\n"
    },
    {
      "raw": "df.shape",
      "rewrite-ns": 51060,
      "overhead-ns": 51060,
      "exec-ns": 438578,
      "total-ns": 489638,
      "patts-hit": {},
      "rewritten": "df.shape\n"
    },
    {
      "raw": "# Make a comparison between the years the company has been in the market and the avg. salary.\n# FIRST-AUTHOR: remove plotting\n# sns.lmplot(x='years_in_market',y='avg_salary_estimate',data=df)\n",
      "rewrite-ns": 12314,
      "overhead-ns": 12314,
      "exec-ns": 64925,
      "total-ns": 77239,
      "patts-hit": {},
      "rewritten": ""
    },
    {
      "raw": "# Generate a heatmap based on the numerical columns of the dataframe\n# FIRST-AUTHOR: remove plotting\n# fig, ax = plt.subplots(figsize=(10,10)) \nmatrix = np.triu(df.select_dtypes(include=[np.number]).corr())\n# FIRST-AUTHOR: remove plotting\n# sns.heatmap(df.select_dtypes(include=[np.number]).corr(),annot=True, fmt='.1g', vmin=-1, vmax=1, center= 0,  ax=ax)\n_ = df.select_dtypes(include=[np.number]).corr()",
      "rewrite-ns": 1252984,
      "overhead-ns": 1252984,
      "exec-ns": 1354454,
      "total-ns": 2607438,
      "patts-hit": {},
      "rewritten": "matrix = np.triu(df.select_dtypes(include=[np.number]).corr())\n_ = df.select_dtypes(include=[np.number]).corr()\n"
    },
    {
      "raw": "# Check the sector values\n# FIRST-AUTHOR: remove plotting\n# fig, ax = plt.subplots(figsize=(10,10)) \n# chart = sns.barplot(x=df.sector.value_counts().index, y=df.sector.value_counts())\n# _= chart.set_xticklabels(chart.get_xticklabels(), rotation=75)\n_ = df.sector.value_counts().index\n_ = df.sector.value_counts()",
      "rewrite-ns": 697071,
      "overhead-ns": 697071,
      "exec-ns": 800397,
      "total-ns": 1497468,
      "patts-hit": {},
      "rewritten": "_ = df.sector.value_counts().index\n_ = df.sector.value_counts()\n"
    },
    {
      "raw": "# Set a simpler name\ndf.rename(columns={'avg_salary_estimate':'avg_salary'}, inplace= True)",
      "rewrite-ns": 476417,
      "overhead-ns": 476417,
      "exec-ns": 574554,
      "total-ns": 1050971,
      "patts-hit": {},
      "rewritten": "df.rename(columns={'avg_salary_estimate': 'avg_salary'}, inplace=True)\n"
    },
    {
      "raw": "# Obtain the avg. salary for each type of role\npd.pivot_table(df,index='job_role', values='avg_salary')",
      "rewrite-ns": 445881,
      "overhead-ns": 445881,
      "exec-ns": 4652946,
      "total-ns": 5098827,
      "patts-hit": {},
      "rewritten": "pd.pivot_table(df, index='job_role', values='avg_salary')\n"
    },
    {
      "raw": "# Obtain the avg. salary based on the seniority of the roles\npd.pivot_table(df, index=['job_role','job_seniority'], values='avg_salary').sort_values('avg_salary', ascending =False)",
      "rewrite-ns": 761722,
      "overhead-ns": 761722,
      "exec-ns": 5953577,
      "total-ns": 6715299,
      "patts-hit": {},
      "rewritten": "pd.pivot_table(df, index=['job_role', 'job_seniority'], values='avg_salary'\n    ).sort_values('avg_salary', ascending=False)\n"
    },
    {
      "raw": "df.head()",
      "rewrite-ns": 78565,
      "overhead-ns": 78565,
      "exec-ns": 12890789,
      "total-ns": 12969354,
      "patts-hit": {},
      "rewritten": "df.head()\n"
    },
    {
      "raw": "\n# Define a custom aggregation function to get the percentage of descriptions that include certain skill.\ndef ones_percentage(x):\n    return round((sum(1 for value in x if value == 1)/len(x))*100,2)\n\n# Create the pivot table with the custom aggregation function\npivot_table = pd.pivot_table(df, index='job_role', values=['excel', 'sql', 'python', 'power_bi', 'tableau', 'scikit', 'spark'], aggfunc=ones_percentage)\n\nprint(pivot_table)",
      "rewrite-ns": 1906462,
      "overhead-ns": 1906462,
      "exec-ns": 15144107,
      "total-ns": 17050569,
      "patts-hit": {},
      "rewritten": "def ones_percentage(x):\n    return round(sum(1 for value in x if value == 1) / len(x) * 100, 2)\npivot_table = pd.pivot_table(df, index='job_role', values=['excel', 'sql',\n    'python', 'power_bi', 'tableau', 'scikit', 'spark'], aggfunc=\n    ones_percentage)\nprint(pivot_table)\n"
    }
  ],
  "total-time-in-sec": 22.929467065,
  "max-disk-in-mb": 0
}