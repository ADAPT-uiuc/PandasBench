{
  "max-mem-in-mb": 1496,
  "max-mem-in-mb2": 1570,
  "cells": [
    {
      "raw": "from datetime import datetime\n# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\n# FIRST-AUTHOR: remove plotting, ML code\n# import matplotlib.pyplot as plt\n# import seaborn as sns\n# from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\n# from sklearn.naive_bayes import GaussianNB\n# from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n# from sklearn.linear_model import LogisticRegression\n# from sklearn.neighbors import KNeighborsClassifier\n# from sklearn.tree import DecisionTreeClassifier\n# from sklearn.neural_network import MLPClassifier\n# from sklearn.svm import SVC\n# from sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve, train_test_split, RandomizedSearchCV\n# from sklearn import preprocessing\n# from sklearn.metrics import r2_score, accuracy_score, roc_auc_score, mean_squared_error",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 503486
    },
    {
      "raw": "import os\n\nemp_data = pd.read_csv(\"./input/employee_survey_data.scaled.csv\", index_col='EmployeeID')\ngen_data = pd.read_csv(\"./input/general_data.scaled.csv\",index_col='EmployeeID')\nmanager_data = pd.read_csv(\"./input/manager_survey_data.scaled.csv\",index_col='EmployeeID')\nin_time_data = pd.read_csv(\"./input/in_time.scaled.csv\")\nout_time_data = pd.read_csv(\"./input/out_time.scaled.csv\")\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 5495524733
    },
    {
      "raw": "in_time_data.rename(columns={'Unnamed: 0':'EmployeeID'}, inplace=True)\nin_time_data.set_index('EmployeeID', inplace=True)\nin_time_data\nout_time_data.rename(columns={'Unnamed: 0':'EmployeeID'}, inplace=True)\nout_time_data.set_index('EmployeeID', inplace=True)\nout_time_data.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2446304
    },
    {
      "raw": "in_time_data = in_time_data.apply(pd.DatetimeIndex)\nout_time_data = out_time_data.apply(pd.DatetimeIndex)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2410348229
    },
    {
      "raw": "times = pd.concat([in_time_data, out_time_data], axis=1)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 39203228
    },
    {
      "raw": "times.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 410048
    },
    {
      "raw": "times = times.applymap(lambda x: x.hour+0.01*x.minute)\ntimes['avg_in'] = round(times.iloc[:, :261].mean(axis=1),2)\ntimes['avg_out'] = round(times.iloc[:, 261:].mean(axis=1),2)\ntimes['med_in'] = round(times.iloc[:, :261].median(axis=1),2)\ntimes['med_out'] = round(times.iloc[:, 261:].median(axis=1),2)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 14927495280
    },
    {
      "raw": "times.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 383153
    },
    {
      "raw": "times.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 232306
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# fig, axs = plt.subplots(1,3, figsize = (12,4))\n# sns.distplot(times.iloc[4, :261], ax=axs[0]).set(xlabel = 'In time', ylabel = 'Frequency',xlim=(7,12))\n# sns.distplot(times.iloc[72, :261], ax=axs[1]).set(xlabel = 'In time', ylabel = 'Frequency',xlim=(7,12))\n# sns.distplot(times.iloc[102, :261], ax=axs[2]).set(xlabel = 'In time', ylabel = 'Frequency',xlim=(7,12))\n# plt.tight_layout()\n_ = times.iloc[4, :261]\n_ = times.iloc[72, :261]\n_ = times.iloc[102, :261]\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1190073
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(10,4))\n# g = plt.plot(times.iloc[4, :261])\n_ = times.iloc[4, :261]\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 497243
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(10,4))\n# g = plt.plot(times.iloc[25, :261])\n_ = times.iloc[25, :261]\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 485966
    },
    {
      "raw": "times['total'] = times['med_out'] - times['med_in']\ntime_feats = times[['avg_in', 'avg_out', 'med_in','med_out','total']]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 77354593
    },
    {
      "raw": "time_feats.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 367922
    },
    {
      "raw": "in_time_data.isna().sum()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 10754228
    },
    {
      "raw": "emp_data.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 296464
    },
    {
      "raw": "manager_data.isna().sum()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 637109
    },
    {
      "raw": "emp_data.loc[emp_data['EnvironmentSatisfaction'].isnull()]\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 804128
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# fig, axs = plt.subplots(1,3, figsize=(10,4))\n# sns.barplot(emp_data['EnvironmentSatisfaction'], emp_data['JobSatisfaction'],ax=axs[0])\n# sns.barplot(emp_data['WorkLifeBalance'], emp_data['JobSatisfaction'],ax=axs[1])\n# sns.barplot(emp_data['WorkLifeBalance'], emp_data['EnvironmentSatisfaction'],ax=axs[2])\n# plt.tight_layout(pad=3)\n_ = emp_data['EnvironmentSatisfaction']\n_ = emp_data['JobSatisfaction']\n_ = emp_data['WorkLifeBalance']\n_ = emp_data['JobSatisfaction']\n_ = emp_data['WorkLifeBalance']\n_ = emp_data['EnvironmentSatisfaction']\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 510284
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(emp_data, col='WorkLifeBalance',size=2.4, aspect=2, col_wrap=2 )\n# g = g.map(sns.distplot, 'JobSatisfaction', )",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 107514
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(emp_data, col='JobSatisfaction',row ='WorkLifeBalance', size=2.4, aspect=2 )\n# g = g.map(sns.distplot, 'EnvironmentSatisfaction' )",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 104795
    },
    {
      "raw": "def set_mode(data, col, col2, col3):\n    index_nan = list(data[col][data[col].isnull()].index)\n    for i in index_nan:\n        cols_mode = data[col].mode()[0]\n        mode_fill = data[col][((data[col2] == data.loc[i][col2]) & (data[col3] == data.loc[i][col3]))].mode()[0]\n        data[col].loc[i] = mode_fill\n\n\n    \n                    ",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 690302
    },
    {
      "raw": "set_mode(emp_data, 'EnvironmentSatisfaction','JobSatisfaction','WorkLifeBalance')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 203679024
    },
    {
      "raw": "emp_data.isnull().sum()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 704051
    },
    {
      "raw": "set_mode(emp_data, 'JobSatisfaction','EnvironmentSatisfaction','WorkLifeBalance')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 161235349
    },
    {
      "raw": "emp_data.isnull().sum()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 607987
    },
    {
      "raw": "set_mode(emp_data, 'WorkLifeBalance','JobSatisfaction','EnvironmentSatisfaction')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 282339709
    },
    {
      "raw": "emp_data.isnull().sum()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 623924
    },
    {
      "raw": "gen_data.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 232215
    },
    {
      "raw": "df = pd.concat([gen_data,manager_data,emp_data,time_feats], axis=1)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 17626032
    },
    {
      "raw": "for col in df.columns.values:\n    if df[col].nunique() == 1:\n        df.drop(col, axis=1, inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 23021132
    },
    {
      "raw": "df['Attrition'] = np.where(df['Attrition']=='Yes',1,0)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2360098
    },
    {
      "raw": "df.NumCompaniesWorked.fillna(0, inplace=True)\ndf.TotalWorkingYears.fillna(0, inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 809397
    },
    {
      "raw": "df.isna().sum()\ndf.head()\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 19458018
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.distplot(df['total']).set(xlabel = 'Total Hours Of Work', ylabel = 'Frequency')\n_ = df['total']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 221915
    },
    {
      "raw": "## checking the exact number of people by hours of work\nprint(df['total'][df['total'] <=7].value_counts().sum())\nprint(df['total'][(df['total'] > 7) & (df['total'] <=8)].value_counts().sum())\nprint(df['total'][df['total'] > 8].value_counts().sum())\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2731224
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(8,4))\n# plt.subplot(1,2,1)\n# sns.distplot(df['avg_in'], bins=20)\n# plt.subplot(1,2,2)\n# s = sns.distplot(df['avg_out'], bins=20)\n# plt.xticks((range(16,22)))\n# plt.tight_layout(pad=5)\n_ = df['avg_in']\n_ = df['avg_out']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 317403
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(8,4))\n# plt.subplot(1,2,1)\n# sns.distplot(df['med_in'], bins=10)\n# plt.subplot(1,2,2)\n# s = sns.distplot(df['med_out'], bins=20)\n# plt.xticks((range(16,22)))\n# plt.tight_layout(pad=5)\n_ = df['med_in']\n_ = df['med_out']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 301688
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot, 'total')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 106653
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot, 'med_in')\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 99006
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot , 'med_out')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 96030
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot , 'avg_in')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 94370
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition' )\n# g = g.map(sns.distplot , 'avg_out')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 93809
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(12,4))\n# plt.subplot(1,3,1)\n# g = sns.barplot(df['Attrition'], df['EnvironmentSatisfaction'], hue=df['JobSatisfaction'])\n# plt.legend(loc ='upper right')\n# plt.subplot(1,3,2)\n# s = sns.barplot(df['Attrition'], df['JobInvolvement'], hue=df['JobSatisfaction'])\n# plt.legend(loc ='upper right')\n# plt.subplot(1,3,3)\n# f = sns.barplot(df['Attrition'], df['WorkLifeBalance'], hue=df['JobSatisfaction'])\n# plt.legend(loc ='upper right')\n# plt.tight_layout()\n_ = df['Attrition']\n_ = df['EnvironmentSatisfaction']\n_ = df['JobSatisfaction']\n_ = df['Attrition']\n_ = df['JobInvolvement']\n_ = df['JobSatisfaction']\n_ = df['Attrition']\n_ = df['WorkLifeBalance']\n_ = df['JobSatisfaction']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 641341
    },
    {
      "raw": "cat_cols = ['BusinessTravel', 'Department','EducationField', 'Gender',\n       'JobRole', 'MaritalStatus','JobInvolvement', 'PerformanceRating',\n       'EnvironmentSatisfaction', 'JobSatisfaction', 'WorkLifeBalance', 'JobLevel']\n# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(15,18))\nfor i in range(len(cat_cols)):\n# FIRST-AUTHOR: remove plotting\n#     plt.subplot(4,3,i+1)\n#     sns.countplot(df[cat_cols[i]], hue=df['Attrition'])\n    _ = df[cat_cols[i]]\n    _ = df['Attrition']\n    if len(df[cat_cols[i]].unique()) >= 3:\n        pass\n# FIRST-AUTHOR: remove plotting\n#         plt.xticks(rotation=75)\n# plt.tight_layout()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 6718005
    },
    {
      "raw": "def Att_ratio(data, col):\n    col_values = data[col].unique()\n    print('For',col, ':')\n    for index, item in enumerate(col_values):\n# FIRST-AUTHOR: make notebook run with input scaling\n        if type(item) == float or (type(item) == np.float64 and np.isnan(item)):\n            continue\n        ratio = len(df.loc[(df[col] == col_values[index]) & (df['Attrition'] == 1)])/len(df.loc[(df[col] == col_values[index]) & (df['Attrition'] == 0)])\n        print('The Attrition ratio(Yes/No) under the category %s is %f' %(item, ratio))\n    print('-----------------------------------------------------------------------------------------------')\n\n        ",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 831499
    },
    {
      "raw": "cat_cols = ['BusinessTravel', 'Department','EducationField', 'Gender',\n       'JobRole', 'MaritalStatus','JobInvolvement', 'PerformanceRating',\n       'EnvironmentSatisfaction', 'JobSatisfaction', 'WorkLifeBalance', 'JobLevel']\nfor col in cat_cols:\n    Att_ratio(df, col)\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 138573259
    },
    {
      "raw": "df['Gender'].replace({'Female': 1, 'Male': 0}, inplace=True)\ndf['BusinessTravel'].replace({'Travel_Rarely': 1,'Travel_Frequently':2,'Non-Travel':0 }, inplace=True)\ncat_cols = ['Gender','BusinessTravel',\n       'JobInvolvement', 'PerformanceRating',\n       'EnvironmentSatisfaction', 'JobSatisfaction', 'WorkLifeBalance', 'JobLevel']\nfor col in cat_cols:\n    print('The Attrition ration(Yes/All) For',col+':')\n    print(df.groupby([col]).Attrition.agg(['mean']))\n    print('----------------------------------------------------------')\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 39167712
    },
    {
      "raw": "df.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 284486
    },
    {
      "raw": "df.columns",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 194053
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.distplot(df.MonthlyIncome)\n_ = df.MonthlyIncome",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 217252
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'MaritalStatus', row = 'Department')\n# g = g.map(sns.distplot , 'MonthlyIncome')\n# g.fig.subplots_adjust(top=1,right=1.4, wspace=1)\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 106994
    },
    {
      "raw": "## we can see it here as well, it's more useful to look at the median, as the distribution of income is skewed to the right\nprint(df.groupby(['MaritalStatus']).MonthlyIncome.agg(['mean','median']))\nprint(df.groupby(['Department']).MonthlyIncome.agg(['mean','median']))\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 10425850
    },
    {
      "raw": "df.columns",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 191050
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(14,8))\ntop_corr = df.corr().nlargest(15, 'MonthlyIncome').index\ncm = np.corrcoef(df[top_corr].values.T)\n# FIRST-AUTHOR: remove plotting\n# g = sns.heatmap(cm, cbar=True, annot=True, cmap='BrBG',yticklabels = top_corr.values, xticklabels=top_corr.values)\n_ = top_corr.values\n_ = top_corr.values",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 58052256
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.distplot(df['MonthlyIncome'][df['Attrition'] == 0],color='blue')\n# f = sns.distplot(df['MonthlyIncome'][df['Attrition'] == 1],color='orange')\n_ = df['MonthlyIncome'][df['Attrition'] == 0]\n_ = df['MonthlyIncome'][df['Attrition'] == 1]\ndf.groupby('Attrition').MonthlyIncome.agg(['mean','median'])\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2822285
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# plt.figure(figsize=(14,8))\ntop_corr = df.corr().nlargest(15, 'Age').index\ncm = np.corrcoef(df[top_corr].values.T)\n# FIRST-AUTHOR: remove plotting\n# g = sns.heatmap(cm, cbar=True, annot=True, cmap='BrBG',yticklabels = top_corr.values, xticklabels=top_corr.values)\n_ = top_corr.values\n_ = top_corr.values",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 54563233
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# fig, axs = plt.subplots(1,3, figsize = (12,4))\n# sns.distplot(df['Age'], ax=axs[0])\n# sns.distplot(df['YearsSinceLastPromotion'], ax=axs[1])\n# sns.distplot(df['YearsAtCompany'], ax=axs[2])\n# plt.tight_layout()\n_ = df['Age']\n_ = df['YearsSinceLastPromotion']\n_ = df['YearsAtCompany']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 386391
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.distplot(df['Age'][df['Attrition'] == 0],color='blue')\n# sns.distplot(df['Age'][df['Attrition'] == 1],color='orange')\n# plt.legend(['No','Yes'])\n_ = df['Age'][df['Attrition'] == 0]\n_ = df['Age'][df['Attrition'] == 1]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 868353
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot , 'Age')\n# g.fig.subplots_adjust(top=1,right=1.2)\n#plt.tight_layout()\ndf.groupby('Attrition').Age.agg(['median','mean'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1894890
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# sns.scatterplot(df['Age'], df['total'])\n_ = df['Age']\n_ = df['total']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 281525
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot , 'YearsSinceLastPromotion')\n# g.fig.subplots_adjust(top=1,right=1.2)\ndf.groupby('Attrition').YearsSinceLastPromotion.agg(['median','mean'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1703858
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot , 'YearsWithCurrManager')\n# g.fig.subplots_adjust(top=1,right=1.2)\ndf.groupby('Attrition').YearsWithCurrManager.agg(['median','mean'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1776214
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot , 'YearsAtCompany')\n# g.fig.subplots_adjust(top=1,right=1.2)\ndf.groupby('Attrition').YearsAtCompany.agg(['median','mean'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1801870
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot , 'DistanceFromHome')\n# g.fig.subplots_adjust(top=1,right=1.2)\ndf.groupby('Attrition').DistanceFromHome.agg(['median','mean'])\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1808829
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot , 'TotalWorkingYears')\n# g.fig.subplots_adjust(top=1,right=1.2)\ndf.groupby('Attrition').TotalWorkingYears.agg(['median','mean'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1896427
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot , 'Education')\n# g.fig.subplots_adjust(top=1,right=1.2)\ndf.groupby('Attrition').Education.agg(['median','mean'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1703225
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot , 'PercentSalaryHike')\n# g.fig.subplots_adjust(top=1,right=1.2)\ndf.groupby('Attrition').PercentSalaryHike.agg(['median','mean'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1797875
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot , 'NumCompaniesWorked')\n# g.fig.subplots_adjust(top=1,right=1.2)\ndf.groupby('Attrition').NumCompaniesWorked.agg(['median','mean'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1902340
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot , 'YearsSinceLastPromotion')\n# g.fig.subplots_adjust(top=1,right=1.2)\ndf.groupby('Attrition').YearsSinceLastPromotion.agg(['median','mean'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1664424
    },
    {
      "raw": "# FIRST-AUTHOR: remove plotting\n# g = sns.FacetGrid(df,col = 'Attrition')\n# g = g.map(sns.distplot , 'StockOptionLevel')\n# g.fig.subplots_adjust(top=1,right=1.2)\ndf.groupby('Attrition').StockOptionLevel.agg(['median','mean'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1697758
    },
    {
      "raw": "x = df.drop(['Attrition'], axis=1).reset_index(drop=True)\ny = df['Attrition'].values",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2758357
    },
    {
      "raw": "cols_todrop = ['JobLevel','Department','JobRole','NumCompaniesWorked','PercentSalaryHike','StockOptionLevel','YearsWithCurrManager','med_in', 'avg_in','avg_out']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 272609
    },
    {
      "raw": "x.drop(cols_todrop, axis=1, inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1455607
    },
    {
      "raw": "## creating age groups\nx.Age = pd.cut(x.Age, 4)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2504113
    },
    {
      "raw": "x.Age.unique()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 433818
    },
    {
      "raw": "## converting categorial variables to dummies\nx = pd.get_dummies(x)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 7720505
    },
    {
      "raw": "x_copy = x.copy()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 716931
    },
    {
      "raw": "## scaling the features\n\n# FIRST-AUTHOR: remove ML code\n# scaler = preprocessing.StandardScaler()\n# x = scaler.fit_transform(x)\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 114968
    },
    {
      "raw": "x_copy.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 229667
    },
    {
      "raw": "## splitting the sets into train and test\n\n# FIRST-AUTHOR: remove ML code\n# x_train, x_test, y_train, y_test = train_test_split(x, y, train_size = 0.7, random_state=42)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 107675
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# Defining a function which examines each model based on the score, then show each one's score and STD, as well as graphic comparison\n# evaluate each model in turn\n# def get_scores(score1, score2):\n#     models = []\n#     models.append(('LR', LogisticRegression()))\n#     models.append(('LDA', LinearDiscriminantAnalysis()))\n#     models.append(('KNN', KNeighborsClassifier()))\n#     models.append(('CART', DecisionTreeClassifier()))\n#     models.append(('NB', GaussianNB()))\n#     models.append(('SVM', SVC()))\n#     models.append(('ADA', AdaBoostClassifier()))\n#     models.append(('GradientBooster', GradientBoostingClassifier()))\n#     models.append(('ExtraTrees', ExtraTreesClassifier()))\n#     models.append(('RandomForest', RandomForestClassifier()))\n#     cv_scores = []\n#     test_scores = []\n#     names = []\n#     stds = []\n#     differences = []\n#     #res = pd.DataFrame(columns = {'Model',score+('(train)'), 'Std', score+('(test_score)'), 'difference'})\n#     #res = res[['Model',score+('(train)'), 'Std', score+('(test_score)'), 'difference']]\n#     res = pd.DataFrame()\n#     for index, model in enumerate(models):\n#         kfold = StratifiedKFold(n_splits=7)\n#         cv_results = cross_val_score(model[1], x_train, y_train, cv=kfold, scoring=score1)\n#         cv_scores.append(cv_results)\n#         names.append(model[0])\n#         model[1].fit(x_train,y_train)\n#         predictions = model[1].predict(x_test)\n#         test_score = score2(predictions, y_test)\n#         test_scores.append(test_score)\n#         stds.append(cv_results.std())\n#         differences.append((cv_results.mean() - test_score))\n#         res.loc[index,'Model'] = model[0]\n#         res.loc[index,score1+('(train)')] = cv_results.mean()\n#         res.loc[index,score1+('(test_score)')] = test_score\n#         res.loc[index,'Std'] = cv_results.std()\n#         res.loc[index,'difference'] = cv_results.mean() - test_score\n#     # boxplot algorithm comparison\n#     fig = plt.figure(figsize = (12,5))\n#     fig.suptitle('Model Comparison')\n#     ax = fig.add_subplot(121)\n#     plt.boxplot(cv_scores)\n#     ax.set_xticklabels(names, rotation=70)\n#     axs = fig.add_subplot(122)\n#     sns.barplot(names,test_scores)\n#     axs.set_xticklabels(names, rotation=70)\n#     plt.tight_layout(pad=5)\n#     return res\n#     plt.show()\n\n    \n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 297421
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# get_scores('accuracy', accuracy_score)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 97657
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# params = {'bootstrap': [True, False],\n#  'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n#  'max_features': ['auto', 'sqrt'],\n#  'min_samples_leaf': [1, 2, 4],\n#  'min_samples_split': [2, 5, 10],\n#  'n_estimators': [200, 400, 600, 800, 1000]}\n# RandomForest = RandomForestClassifier()\n# randomgrid_forest = RandomizedSearchCV(estimator=RandomForest, param_distributions = params, \n#                                cv=5, n_iter=25, scoring = 'accuracy',\n#                                n_jobs = 4, verbose = 3, random_state = 42,\n#                                return_train_score = True)\n# randomgrid_forest.fit(x_train,y_train)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 138311
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# randomgrid_forest.score(x_test, y_test)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 92450
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# forest_preds = randomgrid_forest.predict(x_test)\n# roc_auc_score(forest_preds, y_test)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 92605
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# randomgrid_forest.best_estimator_",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 95605
    },
    {
      "raw": "### I created a function which take a model and scoring method, then shows the cross validation score for each estimator\n### and plot it next to the test score.\n# FIRST-AUTHOR: remove ML code\n# def estimators_compare(model, cv_score, metrics_score):\n#     train_scores = []\n#     test_scores= []\n#     estimators = [80,100,200,400,600,800,1200]\n#     res = pd.DataFrame(columns = {'Number Of Estimators', 'train_score', 'test_score'})\n#     for ind, i in enumerate(estimators):\n#         mode = model(n_estimators=i)\n#         kfold = StratifiedKFold(n_splits=7)\n#         cv_results = cross_val_score(mode, x_train, y_train, cv=kfold, scoring=cv_score)\n#         mode.fit(x_train, y_train)\n#         predictions = mode.predict(x_test)\n#         train_score = cv_results.mean()\n#         train_scores.append(train_score)\n#         test_score = metrics_score(predictions, y_test)\n#         test_scores.append(test_score)\n#         res.loc[ind,'Number Of Estimators'] = i\n#         res.loc[ind,'train_score'] = train_score\n#         res.loc[ind,'test_score'] = test_score\n\n#     plt.plot(estimators, train_scores, color='red')\n#     plt.plot(estimators, test_scores, color='blue')\n#     legs = ['train', 'test']\n#     plt.legend(legs)\n#     return res",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 188239
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# estimators_compare(RandomForestClassifier, 'accuracy', accuracy_score)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 92405
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# final_random_forest = RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,\n#                        criterion='gini', max_depth=40, max_features='sqrt',\n#                        max_leaf_nodes=None, max_samples=None,\n#                        min_impurity_decrease=0.0, min_impurity_split=None,\n#                        min_samples_leaf=1, min_samples_split=2,\n#                        min_weight_fraction_leaf=0.0, n_estimators=100,\n#                        n_jobs=None, oob_score=False, random_state=None,\n#                        verbose=0, warm_start=False)\n# final_random_forest.fit(x_train, y_train)\n# final_random_forest.score(x_test, y_test)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 130838
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# featuers_coefficients = final_random_forest.feature_importances_.tolist()\nfeature_names = x_copy.columns\n# FIRST-AUTHOR: remove ML code\n# feats = pd.DataFrame(pd.Series(featuers_coefficients, feature_names).sort_values(ascending=False),columns=['Coefficient'])\n# feats",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 177956
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# params2 = {'bootstrap': [True, False],\n#  'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n#  'max_features': ['auto', 'sqrt'],\n#  'min_samples_leaf': [1, 2, 4],\n#  'min_samples_split': [2, 5, 10],\n#  'n_estimators': [200, 400, 600, 800, 1000]}\n# ExtraTress = ExtraTreesClassifier()\n# randomgrid_extrees = RandomizedSearchCV(estimator=ExtraTress, param_distributions = params2, \n#                                cv=5, n_iter=25, scoring = 'accuracy',\n#                                n_jobs = 4, verbose = 3, random_state = 42,\n#                                return_train_score = True)\n# randomgrid_extrees.fit(x_train,y_train)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 139780
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# randomgrid_extrees.score(x_test, y_test)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 92530
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# randomgrid_extrees.best_estimator_",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 90466
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# estimators_compare(ExtraTreesClassifier, 'accuracy', accuracy_score)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 88875
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# final_extra_trees_A = ExtraTreesClassifier(max_depth=40, max_features='sqrt', n_estimators=600)\n# final_extra_trees_A.fit(x_train, y_train)\n# print(final_extra_trees_A.score(x_test, y_test))\n# final_extra_trees_B = ExtraTreesClassifier(max_depth=40, max_features='sqrt', n_estimators=100)\n# final_extra_trees_B.fit(x_train, y_train)\n# print(final_extra_trees_B.score(x_test, y_test))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 108908
    },
    {
      "raw": "# FIRST-AUTHOR: remove ML code\n# featuers_coefficients = final_extra_trees.feature_importances_.tolist()\nfeature_names = x_copy.columns\n# FIRST-AUTHOR: remove ML code\n# feats = pd.DataFrame(pd.Series(featuers_coefficients, feature_names).sort_values(ascending=False),columns=['Coefficient'])\n# feats",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 172975
    }
  ],
  "total-time-in-sec": 24.039490947,
  "max-disk-in-mb": 0
}