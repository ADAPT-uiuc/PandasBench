{
  "max-mem-in-mb": 6780,
  "max-mem-in-mb2": 7972,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n# ALEX: remove path printing\n# from subprocess import check_output\n# print(check_output([\"ls\", \"../input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.\n\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 300427
    },
    {
      "raw": "# ALEX: remove plotting\n# import matplotlib.pyplot as plt\n# %matplotlib inline\n# plt.rcParams['figure.figsize'] = (10.0, 8.0) # set default size of plots",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 125487
    },
    {
      "raw": "train_photos = pd.read_csv('./input/train_photo_to_biz_ids.scaled.csv')\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 9403411453
    },
    {
      "raw": "# ALEX: remove images\n# import os\nprint(''.join([str(train_photos.photo_id[0]),'.jpg']))\n\n# ALEX: remove images\n# from PIL import Image\n# im = Image.open(os.path.join('./input/','train_photos',''.join([str(train_photos.photo_id[5]),'.jpg'])))\n# plt.imshow(im)\n_ = str(train_photos.photo_id[5])\n\n\n#0: good_for_lunch\n#1: good_for_dinner\n#2: takes_reservations\n#3: outdoor_seating\n#4: restaurant_is_expensive\n#5: has_alcohol\n#6: has_table_service\n#7: ambience_is_classy\n#8: good_for_kids",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 895612
    },
    {
      "raw": "train_attributes = pd.read_csv('./input/train.scaled.csv')\n\nlist(train_attributes)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 110341628
    },
    {
      "raw": "train_attributes['labels_list'] = train_attributes['labels'].str.split(' ')\ntrain_attributes['outdoor'] = train_attributes['labels'].str.contains('3')\noutdoor_businesses = train_attributes[train_attributes.outdoor==True].business_id.tolist()\noutdoor_photos = train_photos[train_photos.business_id.isin(outdoor_businesses)].photo_id.tolist()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3671031039
    },
    {
      "raw": "num_images_for_show = 5\n\nphotos_to_show = np.random.choice(outdoor_photos,num_images_for_show**2)\n\nfor x in range(num_images_for_show ** 2):\n        \n# ALEX: remove images\n#         plt.subplot(num_images_for_show, num_images_for_show, x+1)\n#         im = Image.open(os.path.join('./input/','train_photos',''.join([str(photos_to_show[x]),'.jpg'])))\n#         plt.imshow(im)\n#         plt.axis('off')\n    _ = str(photos_to_show[x])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2386855341
    },
    {
      "raw": "#0: good_for_lunch\n#1: good_for_dinner\n#2: takes_reservations\n#3: outdoor_seating\n#4: restaurant_is_expensive\n#5: has_alcohol\n#6: has_table_service\n#7: ambience_is_classy\n#8: good_for_kids\n\ntrain_attributes['labels_list'] = train_attributes['labels'].str.split(' ')\ntrain_attributes['kids'] = train_attributes['labels'].str.contains('8')\nkids_businesses = train_attributes[train_attributes.kids==True].business_id.tolist()\nkidsRes_photos = train_photos[train_photos.business_id.isin(kids_businesses)].photo_id.tolist()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 4755498069
    },
    {
      "raw": "num_images_for_show = 5\n\nphotos_to_show = np.random.choice(kidsRes_photos,num_images_for_show**2)\n\nfor x in range(num_images_for_show ** 2):\n        \n# ALEX: remove images\n#         plt.subplot(num_images_for_show, num_images_for_show, x+1)\n#         im = Image.open(os.path.join('./input/','train_photos',''.join([str(photos_to_show[x]),'.jpg'])))\n#         plt.imshow(im)\n#         plt.axis('off')\n    _ = str(photos_to_show[x])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2379492799
    },
    {
      "raw": "#create a new dataset\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 261734
    }
  ],
  "total-time-in-sec": 22.708213589,
  "max-disk-in-mb": 0
}