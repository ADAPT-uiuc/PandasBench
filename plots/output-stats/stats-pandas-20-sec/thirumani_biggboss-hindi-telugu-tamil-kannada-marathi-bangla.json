{
  "max-mem-in-mb": 3155,
  "max-mem-in-mb2": 6095,
  "cells": [
    {
      "raw": "import numpy as np\n# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\npd.set_option('display.max_columns', 50)\n\n# FIRST-AUTHOR: remove plotting\n# import matplotlib.pyplot as plt\n# import seaborn as sns\n\n# import warnings\n# warnings.filterwarnings('ignore')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 339520
    },
    {
      "raw": "bigg_boss = pd.read_csv('./input/Bigg_Boss_India.scaled.csv', encoding = \"ISO-8859-1\")\nnRow, nCol = bigg_boss.shape\nprint(f'There are {nRow} rows and {nCol} columns')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 12949683341
    },
    {
      "raw": "bigg_boss.head(5)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 672258
    },
    {
      "raw": "bigg_boss.tail(10).T",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1096609
    },
    {
      "raw": "bigg_boss.sample(10)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 99866825
    },
    {
      "raw": "bigg_boss.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 4812668
    },
    {
      "raw": "bigg_boss.describe()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2267371771
    },
    {
      "raw": "# Unique values in each column\nfor col in bigg_boss.columns:\n    print(\"Number of unique values in\", col,\"-\", bigg_boss[col].nunique())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2999548850
    },
    {
      "raw": "# Number of seasons in all Indian languages\nprint(bigg_boss.groupby('Language')['Season Number'].nunique().sum())\n\n# 35 seasons happened (including current seasons)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 522517167
    },
    {
      "raw": "# Number of seasons in each Indian language\nprint(bigg_boss.groupby('Language')['Season Number'].nunique().nlargest(10))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 504510695
    },
    {
      "raw": "# Total number of Bigg Boss housemates\n# FIRST-AUTHOR: remove plotting\n# fig = plt.figure(figsize=(10,4))\n# ax = sns.countplot(x='Language', data=bigg_boss)\n# ax.set_title('Bigg Boss Series - Indian Language')\n# for t in ax.patches:\n#     if (np.isnan(float(t.get_height()))):\n#         ax.annotate(0, (t.get_x(), 0))\n#     else:\n#         ax.annotate(str(format(int(t.get_height()), ',d')), (t.get_x(), t.get_height()*1.01))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 242782
    },
    {
      "raw": "# Number of normal entries and wild card entries\nprint(bigg_boss['Wild Card'].value_counts(), \"\\n\")\nprint(round(bigg_boss['Wild Card'].value_counts(normalize=True)*100))\n# FIRST-AUTHOR: remove plotting\n# sns.countplot(x='Wild Card', data=bigg_boss)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 373504774
    },
    {
      "raw": "# Common people has many professions, so clubbing them into one category\n# FIRST-AUTHOR: make notebook run\n# bigg_boss.loc[bigg_boss['Profession'].str.contains('Commoner'),'Profession']='Commoner'\nbigg_boss.loc[bigg_boss['Profession'].str.contains('Commoner', na=False),'Profession']='Commoner'",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1245318243
    },
    {
      "raw": "# Participant's Profession\nprint(bigg_boss['Profession'].value_counts())\n# FIRST-AUTHOR: remove plotting\n# fig = plt.figure(figsize=(25,8))\n# sns.countplot(x='Profession', data=bigg_boss)\n# plt.xticks(rotation=90)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 188854133
    },
    {
      "raw": "# Broadcastor\n# FIRST-AUTHOR: remove plotting\n# fig = plt.figure(figsize=(20,5))\n# ax = sns.countplot(x='Broadcasted By', data=bigg_boss, palette='RdBu')\n# ax.set_title('Bigg Boss Series - Indian Broadcastor & Total Number of Housemates')\n# for t in ax.patches:\n#     if (np.isnan(float(t.get_height()))):\n#         ax.annotate(0, (t.get_x(), 0))\n#     else:\n#         ax.annotate(str(format(int(t.get_height()), ',d')), (t.get_x(), t.get_height()*1.01))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 214075
    },
    {
      "raw": "bigg_boss.groupby('Host Name')['Season Number'].nunique().nlargest(25)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 528604184
    },
    {
      "raw": "# Housemate's Gender\nprint(bigg_boss['Gender'].value_counts())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 194785662
    },
    {
      "raw": "# Maximum TRP of Bigg Boss Hindi/India seasons\nprint(\"Maximum TRP\",bigg_boss['Average TRP'].max(), \"\\n\")\nprint(bigg_boss.loc[bigg_boss['Average TRP']==bigg_boss['Average TRP'].max()][[\"Language\",\"Season Number\"]].head(1).to_string(index=False))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 96461430
    },
    {
      "raw": "# Longest season of Bigg Boss Hindi/India seasons\nprint(\"Longest season\",bigg_boss['Season Length'].max(), \"days \\n\")\nprint(bigg_boss.loc[bigg_boss['Season Length']==bigg_boss['Season Length'].max()][[\"Language\",\"Season Number\"]].head(1).to_string(index=False))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 90067545
    },
    {
      "raw": "# All BB Winners\nbigg_boss.loc[bigg_boss.Winner==1]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 147234760
    },
    {
      "raw": "# Profession of BB Season Winners\nbigg_boss.loc[bigg_boss.Winner==1,'Profession'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 22478890
    },
    {
      "raw": "# Gender of Season title Winners\nprint(bigg_boss.loc[bigg_boss.Winner==1,'Gender'].value_counts(),'\\n')\n\n# In percentage\nprint(round(bigg_boss.loc[bigg_boss.Winner==1,'Gender'].value_counts(normalize=True)*100))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 44875947
    },
    {
      "raw": "# Entry type of the Season Winners\nbigg_boss.loc[bigg_boss.Winner==1,'Wild Card'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 22085445
    },
    {
      "raw": "# No re-entered contestant won Bigg Boss title\n# FIRST-AUTHOR: make notebook run\n# bigg_boss.loc[bigg_boss.Winner==1,'Number of re-entries'].value_counts()\nbigg_boss.loc[bigg_boss.Winner==1,'Number of Re-entries'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 11462728
    },
    {
      "raw": "# Number of eliminations or evictions faced by the Bigg Boss competition winners\nbigg_boss.loc[bigg_boss.Winner==1,'Number of Evictions Faced'].value_counts().sort_index()\n\n# Number of eliminations faced - Number of Winners",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 12695065
    },
    {
      "raw": "# Bigg Boss winners Number of times elected as Captain\n# FIRST-AUTHOR: make notebook run\n# bigg_boss.loc[bigg_boss.Winner==1,'Number of times elected as Captain'].value_counts().sort_index()\nbigg_boss.loc[bigg_boss.Winner==1,'Number of Times Elected as Captain'].value_counts().sort_index()\n\n# Number of times elected as Captain   - Number of winners",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 12283331
    },
    {
      "raw": "# FIRST-AUTHOR: remove pandas profiling\n# import pandas_profiling\n# pandas_profiling.ProfileReport(bigg_boss)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 183755
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 97089
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 86758
    }
  ],
  "total-time-in-sec": 22.3419563,
  "max-disk-in-mb": 0
}