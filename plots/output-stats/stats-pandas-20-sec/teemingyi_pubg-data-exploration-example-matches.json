{
  "max-mem-in-mb": 5817,
  "max-mem-in-mb2": 11047,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n# FIRST-AUTHOR: remove path printing\n# import os\n# print(os.listdir(\"./input\"))\n\n# Any results you write to the current directory are saved as output.",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 412530
    },
    {
      "raw": "data = pd.read_csv('./input/train_V2.scaled.csv')\n\ndata.loc[:5,]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 21871759152
    },
    {
      "raw": "data_solo_example = data.loc[data.matchId == data.loc[data.matchType=='solo','matchId'].iloc[0],:].sort_values(by='winPlacePerc',ascending=False)\nprint(data_solo_example)\n\nprint('This example has {} players.'.format(len(data_solo_example.Id)))\nprint('This example has {} groups.'.format(len(data_solo_example.groupId.unique())))\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 891190496
    },
    {
      "raw": "[x-data_solo_example.winPlacePerc.iloc[i+1] for i, x in enumerate(data_solo_example.winPlacePerc) if i < len(data_solo_example.winPlacePerc)-1]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3848909
    },
    {
      "raw": "data_solo_example.loc[data_solo_example.groupId.isin(\n    list(data_solo_example.groupId.value_counts().loc[data_solo_example.groupId.value_counts()>1].index\n        ))]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1430299
    },
    {
      "raw": "data_duo_example = data.loc[data.matchId == data.loc[data.matchType=='duo','matchId'].iloc[0],:].sort_values(by='winPlacePerc',ascending=False)\nprint(data_duo_example)\n\nprint('This example has {} players.'.format(len(data_duo_example.Id)))\nprint('This example has {} groups.'.format(len(data_duo_example.groupId.unique())))\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 902215321
    },
    {
      "raw": "data_duo_example.maxPlace",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 316507
    },
    {
      "raw": "data_duo_example.loc[data_duo_example.groupId.isin(\n    list(data_duo_example.groupId.value_counts().loc[data_duo_example.groupId.value_counts()>2].index\n        ))]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1380597
    },
    {
      "raw": "data_squad_example = data.loc[data.matchId == data.loc[data.matchType=='squad','matchId'].iloc[0],:].sort_values(by='winPlacePerc',ascending=False)\nprint(data_squad_example)\n\nprint('This example has {} players.'.format(len(data_squad_example.Id)))\nprint('This example has {} groups.'.format(len(data_squad_example.groupId.unique())))\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 940819207
    },
    {
      "raw": "data_squad_example.maxPlace",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 316881
    },
    {
      "raw": "data_squad_example.loc[data_squad_example.groupId.isin(\n    list(data_squad_example.groupId.value_counts().loc[data_squad_example.groupId.value_counts()>4].index\n        ))]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1362664
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 85437
    }
  ],
  "total-time-in-sec": 24.615138,
  "max-disk-in-mb": 0
}