{
  "max-mem-in-mb": 666,
  "max-mem-in-mb2": 1169,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n# ALEX: remove plotting\n# import matplotlib.pyplot as plt\n# import seaborn as sns\n# plt.style.use('fivethirtyeight') \n# %matplotlib inline\n\n\n# import warnings\nimport datetime\nimport calendar\n# ALEX: remove additional imports\n# from datetime import time\n# from dateutil.relativedelta import relativedelta\n\n# # to ignore future warnings\n# warnings.simplefilter(action = 'ignore', category = FutureWarning)\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n# ALEX: remove path printing\n# import os\n# print(os.listdir(\"./input\"))\ntrain = pd.read_csv('./input/train.scaled.csv')\ntest = pd.read_csv('./input/test.scaled.csv')\n# Any results you write to the current directory are saved as output.",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 25159026
    },
    {
      "raw": "merchants = pd.read_csv('./input/merchants.scaled.csv')\nhistorical_trans = pd.read_csv('./input/historical_transactions.scaled.csv')\nnew_merchants = pd.read_csv('./input/new_merchant_transactions.scaled.csv')\ndata_dict = pd.read_excel('./input/Data_Dictionary.scaled.xlsx')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3039108140
    },
    {
      "raw": "train.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 423746
    },
    {
      "raw": "test.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 282776
    },
    {
      "raw": "merchants.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 223477
    },
    {
      "raw": "new_merchants.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 224125
    },
    {
      "raw": "data_dict.head(10)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 216920
    },
    {
      "raw": "historical_trans.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 215390
    },
    {
      "raw": "print('train Data shape: {}'.format(train.shape))\nprint('test Data shape: {}'.format(test.shape))\nprint('merchants data shape: {}'.format(merchants.shape))\nprint('New merchants data shape: {}'.format(new_merchants.shape))\nprint('historical data shape: {}'.format(historical_trans.shape))\nprint('Data dictionary data shape: {}'.format(data_dict.shape))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 532283
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.distplot(train.target.values, kde = False)\n_ = train.target.values",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 353401
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.violinplot(x = \"target\", data=train)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 101670
    },
    {
      "raw": "# Target value outliers\nprint(f'There are: {train[train.target <- 10].target.shape[0]} outliers')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1083178
    },
    {
      "raw": "train.describe()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 7955308
    },
    {
      "raw": "train.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 6232371
    },
    {
      "raw": "# Lets change the First_active_month column from string to date.\n\ntrain['first_active_month'] = pd.to_datetime(train['first_active_month'])\n\n# Also do this to the test dataset\n\ntest['first_active_month'] = pd.to_datetime(test['first_active_month'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3576116
    },
    {
      "raw": "train_cat_feats = train.dtypes[train.dtypes == 'object'].index\ntrain_num_feats = train.dtypes[train.dtypes != 'object'].index",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 778056
    },
    {
      "raw": "print('train Categorical features {}'.format(len(train_cat_feats)))\nprint('train Numerical features {}'.format(len(train_num_feats)))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 278732
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.set()\n# sns.pairplot(train, kind='scatter', size = 2, diag_kind='kde')\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 114910
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize = (7,5))\n# plt.scatter(x= train.feature_1, y = train.target)\n# plt.title('Feature_1', size = 15)\n\n# plt.figure(figsize = (7,5))\n# plt.scatter(x = train.feature_2, y = train.target)\n# plt.title('Feature_2')\n\n# plt.figure(figsize = (7,5))\n# plt.scatter(x = train.feature_3, y = train.target)\n# plt.title('Feature_3')\n_ = train.feature_1\n_ = train.target\n_ = train.feature_2\n_ = train.target\n_ = train.feature_3\n_ = train.target",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 517547
    },
    {
      "raw": "train.drop(train[train['target'] < -10].index, inplace = True)\n# train.drop(train[train['feature_2'] < -10].index, inplace = True)\n# train.drop(train[train['feature_3'] < -10].index, inplace = True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1384240
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.figure(figsize = (7,5))\n# plt.scatter(x= train.feature_1, y = train.target)\n# plt.title('Feature_1', size = 15)\n\n# plt.figure(figsize = (7,5))\n# plt.scatter(x = train.feature_2, y = train.target)\n# plt.title('Feature_2')\n\n# plt.figure(figsize = (7,5))\n# plt.scatter(x = train.feature_3, y = train.target)\n# plt.title('Feature_3')\n_ = train.feature_1\n_ = train.target\n_ = train.feature_2\n_ = train.target\n_ = train.feature_3\n_ = train.target",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 542726
    },
    {
      "raw": "# ALEX: make notebook run\n# correlation = train.corr()\ncorrelation = train.corr(numeric_only=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1504329
    },
    {
      "raw": "correlation",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 190696
    },
    {
      "raw": "def missing_values(df):\n    total_miss = df.isnull().sum()\n    perc_miss = 100 * total_miss / len(df)\n    table_miss = pd.concat([total_miss, perc_miss], axis = 1)\n    ren_table = table_miss.rename(columns = {0:'Total Miss Values', 1: '% of miss values'})\n    ren_table = ren_table[ren_table.iloc[:,1]!=0].sort_values('% of miss values', ascending = False).round(2)\n    \n    print('You data contains {}'.format(df.shape[1]) + ' columns and has {}'.format(ren_table.shape[0]) + ' colums with missing values' )\n    \n    return ren_table",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 768711
    },
    {
      "raw": "missing_values(train)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3680672
    },
    {
      "raw": "train = train[train.target > -10]\n# ALEX: remove plotting\n# sns.pairplot(train[['feature_1', 'feature_2', 'feature_3', 'target']])\n_ = train[['feature_1', 'feature_2', 'feature_3', 'target']]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1536575
    },
    {
      "raw": "# ALEX: remove plotting\n# f, axes = plt.subplots(1,figsize = (12,6))\n# sns.distplot(train.feature_1, ax = axes, kde = False, color = 'green', bins = 10).set_title('Train data')\n# axes.set(ylabel = 'Card Counts')\n# axes.set_xticks(np.arange(1,6,1))\n# plt.show()\n_ = train.feature_1",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 256931
    },
    {
      "raw": "# ALEX: remove plotting\n# f, axes = plt.subplots(1,figsize = (12,6))\n# sns.distplot(train.feature_2, ax = axes, kde = False, color = 'green', bins = 10).set_title('Train data')\n# axes.set(ylabel = 'Card Counts')\n# axes.set_xticks(np.arange(1,6,1))\n# plt.show()\n_ = train.feature_2",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 226910
    },
    {
      "raw": "# ALEX: remove plotting\n# f, axes = plt.subplots(1,figsize = (12,6))\n# sns.distplot(train.feature_3, ax = axes, kde = False, color = 'green', bins = 10).set_title('Train data')\n# axes.set(ylabel = 'Card Counts')\n# axes.set_xticks(np.arange(1,6,1))\n# plt.show()\n_ = train.feature_3",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 220125
    },
    {
      "raw": "# f, axes = plt.subplots(1,figsize = (12,6))\n# sns.distplot(train.first_active_month, ax = axes, color = 'green', kde = False, bins = 10).set_title('Train data')\n# axes.set(ylabel = 'Card Counts')\n# axes.set_xticks(np.arange(1,6,1))\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 110514
    },
    {
      "raw": "# ALEX: remove plotting\n# train.groupby('first_active_month').count()['card_id'].plot(figsize = (15,5), title = 'Count of First Active Month in Train set', color = 'r')\n# plt.show()\ntrain.groupby('first_active_month').count()['card_id']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2481791
    },
    {
      "raw": "train_cat_feats = train.dtypes[train.dtypes == 'object'].index\ntrain_num_feats = train.dtypes[train.dtypes != 'object'].index\n\nprint('Train categories: {}'.format(len(train_cat_feats)))\nprint('Train Numerical values: {}'.format(len(train_num_feats)))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 893000
    },
    {
      "raw": "for col in train_cat_feats:\n    cols = train[col].value_counts().index.shape[0]\n    print(f'{cols} \\t unique values in \\t {col}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3362944
    },
    {
      "raw": "for col in train_num_feats:\n    cols = train[col].value_counts().index.shape[0]\n    print(f'{cols} \\t unique values in \\t {col}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3233658
    },
    {
      "raw": "target = train.target\ntarget.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 279563
    },
    {
      "raw": "merchants.describe()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 30613723
    },
    {
      "raw": "missing_values(merchants)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 13189964
    },
    {
      "raw": "merchants.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 13883066
    },
    {
      "raw": "merchant_cat_feats = merchants.dtypes[merchants.dtypes == 'object'].index\nmerchant_cat_feats",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 512405
    },
    {
      "raw": "merchant_num_feats = merchants.dtypes[merchants.dtypes != 'object'].index\nmerchant_num_feats",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 474193
    },
    {
      "raw": "print('Merchant categorical features {}'.format(len(merchant_cat_feats)))\nprint('Merchant Numerical features {}'.format(len(merchant_num_feats)))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 270827
    },
    {
      "raw": "for col in merchant_cat_feats:\n    cols = merchants[col].value_counts().index.shape[0]\n    print(f'{cols} \\t unique values in \\t {col}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 8723701
    },
    {
      "raw": "for col in merchant_num_feats:\n    cols = merchants[col].value_counts().index.shape[0]\n    print(f'{cols} \\t unique values in \\t {col}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 8653168
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 72823
    },
    {
      "raw": "historical_trans.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 240779
    },
    {
      "raw": "historical_trans.describe()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 420075966
    },
    {
      "raw": "historical_trans.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2858946
    },
    {
      "raw": "missing_values(historical_trans)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1067266172
    },
    {
      "raw": "hist_cat_feats = historical_trans.dtypes[historical_trans.dtypes == 'object'].index\nhist_num_feats = historical_trans.dtypes[historical_trans.dtypes != 'object'].index\n\nprint('Historical Transactions categorical features {}'.format(len(hist_cat_feats)))\nprint('Historical Transactions Numerical features {}'.format(len(hist_num_feats)))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1038003
    },
    {
      "raw": "for col in hist_cat_feats:\n    cols = historical_trans[col].value_counts().index.shape[0]\n    print(f'{cols} \\t unique values in \\t {col}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1403164843
    },
    {
      "raw": "for col in hist_num_feats:\n    cols = historical_trans[col].value_counts().index.shape[0]\n    print(f'{cols} \\t unique values in \\t {col}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 261073311
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 121677
    },
    {
      "raw": "new_merchants.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 334366
    },
    {
      "raw": "new_merchants.describe()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 35021947
    },
    {
      "raw": "new_merchants.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 76086924
    },
    {
      "raw": "missing_values(new_merchants)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 74548695
    },
    {
      "raw": "new_merch_cat_feats = new_merchants.dtypes[new_merchants.dtypes == 'object'].index\nnew_merch_num_feats = new_merchants.dtypes[new_merchants.dtypes != 'object'].index\n\nprint('New Merchant categorical features {}'.format(len(new_merch_cat_feats)))\nprint('New Merchant numerical features {}'.format(len(new_merch_num_feats)))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 948407
    },
    {
      "raw": "for col in new_merch_cat_feats:\n    cols = new_merchants[col].value_counts().index.shape[0]\n    print(f'{cols} \\t unique values in \\t {col}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 74911046
    },
    {
      "raw": "for col in new_merch_num_feats:\n    cols = new_merchants[col].value_counts().index.shape[0]\n    print(f'{cols} \\t unique values in \\t {col}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 13934063
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 93128
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 74720
    },
    {
      "raw": "print(f'Merchants data shape: {merchants.shape}, new merchants data shape: {new_merchants.shape}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 274051
    },
    {
      "raw": "print(merchants.columns)\nprint('=='*18)\nprint(new_merchants.columns)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 578602
    },
    {
      "raw": "# Lets merge our datasets\n# But first we need to delete duplicate columns\ntodrop = ['merchant_category_id', 'subsector_id', 'city_id', 'state_id', 'category_2', 'category_1']\n\nfor col in todrop:\n    merchants = merchants.drop(col, axis = 1)\n    \nmerchants_data = pd.merge(merchants, new_merchants, on = 'merchant_id')\nmerchants_data[:5]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 45342780
    },
    {
      "raw": "# Lets merge our merchant data with the training data.\n\ndata = pd.merge(merchants_data, train, on = 'card_id')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 4134430
    },
    {
      "raw": "data.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 271153
    },
    {
      "raw": "data[:5]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 321306
    },
    {
      "raw": "data['purchase_time'] = data['purchase_date'].str.split(' ')\ndata['purchase_date'] = data['purchase_time'].str[0]\ndata['purchase_time'] = data['purchase_time'].str[1]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1364100
    },
    {
      "raw": "# Let's also do what we have done to the testing dataset\ntest_data = pd.merge(merchants_data, test, on = 'card_id')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3369826
    },
    {
      "raw": "test_data['purchase_time'] = test_data['purchase_date'].str.split(' ')\ntest_data['purchase_date'] = test_data['purchase_time'].str[0]\ntest_data['purchase_time'] = test_data['purchase_time'].str[1]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1192763
    },
    {
      "raw": "print(f'Train data shape: {data.shape} Test data shape: {test_data.shape}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 238823
    },
    {
      "raw": "test_data[:5]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 276453
    },
    {
      "raw": "#We were not suppose to have converted these to date at first But now we fix that so that we can easily manipulate them\ndata['first_active_month'] = data['first_active_month'].astype(str)\ntest_data['first_active_month'] = test_data['first_active_month'].astype(str)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 800337
    },
    {
      "raw": "data.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 5304361
    },
    {
      "raw": "# The main business with the purchase_date and purchase_time. Lets see if we can't generate more columns out of them\ndef get_weekday(date_string):\n    date = datetime.datetime.strptime(date_string, '%Y-%m-%d')\n    return calendar.day_name[date.weekday()]\n\n# get weekday for date variable\ndata['purchase_weekday'] = data['purchase_date'].apply(lambda x: get_weekday(x))\n\n# for plotting recode to ordered categorical\nday_labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\ndata['purchase_weekday'] = pd.Categorical(data['purchase_weekday'], categories = day_labels, \n                                          ordered = True)\n\ndef get_month(date_string, kind = 'month'):\n    if kind == 'month':\n        date = datetime.datetime.strptime(date_string, '%Y-%m-%d')\n    elif kind == 'day':\n        date = datetime.datetime.strptime(date_string, '%Y-%m-%d')\n    return date.strftime(\"%B\")\n\n# Creating new columns and their values\n\ndata['purchase_month'] = data['purchase_date'].apply(lambda x: get_month(x, kind = 'day'))\ndata['first_active_month2'] = data['first_active_month'].apply(lambda x: get_month(x))\ndata['first_active_year'] = data['first_active_month'].str[:4]\n\nmonth_labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\n                'September', 'October', 'November', 'December']\ndata['purchase_month'] = pd.Categorical(data['purchase_month'], categories = month_labels, \n                                          ordered = True)\ndata['first_active_month2'] = pd.Categorical(data['first_active_month2'], categories = month_labels, \n                                          ordered = True)\n\nyear_labels = ['2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018']\ndata['first_active_year'] = pd.Categorical(data['first_active_year'], categories = year_labels, \n                                          ordered = True)\n\n# get time of the day\ndata['temp'] = data['purchase_time'].str.split(':')\n\ndef get_session(time_list):\n    time_list[0] = int(time_list[0])\n    if time_list[0] > 4 and time_list[0] < 12:\n        return 'Morning'\n    elif time_list[0] >= 12 and time_list[0] < 17:\n        return 'Afternoon'\n    elif time_list[0] >= 17 and time_list[0] < 21:\n        return 'Evening'\n    else:\n        return 'Night'\n    \ndata['purchase_session'] = data['temp'].apply(lambda x: get_session(x))\n\nsession_labels = ['Morning', 'Afternoon', 'Evening', 'Night']\ndata['purchase_session'] = pd.Categorical(data['purchase_session'], categories = session_labels, \n                                          ordered = True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 7947827
    },
    {
      "raw": "## time of month\n# as categorical variable, thressholds are arbitrary and could be different\ndef get_time_of_month_cat(date):\n    date_temp = date.split('-')\n    if int(date_temp[2]) < 10:\n        time_of_month = 'Beginning'\n    elif int(date_temp[2]) >= 10 and int(date_temp[2]) < 20:\n        time_of_month = 'Middle'\n    else:\n        time_of_month = 'End'\n    return time_of_month\n\ndata['time_of_month_cat'] = data['purchase_date'].apply(lambda x: get_time_of_month_cat(x))\n\ntof_labels = ['Beginning', 'Middle', 'End']\ndata['time_of_month_cat'] = pd.Categorical(data['time_of_month_cat'], categories = tof_labels, \n                                           ordered = True)\n\ndata['time_of_month_num'] = data['purchase_date'].str[8:].astype(int)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2027843
    },
    {
      "raw": "# ALEX: remove plotting\n# ax = sns.lineplot(x = \"purchase_month\", y = \"target\", \n#                   markers = True, dashes = False, data = data)\n# plt.xticks(rotation = 45)\n# ax.set_title('Target Variable Changes over Purchase Month')\n# ax.set_xlabel('Purchase Month')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 127548
    },
    {
      "raw": "# ALEX: remove plotting\n# ax = sns.lineplot(x = \"first_active_month2\", y = \"target\", \n#                   markers = True, dashes = False, data = data)\n# plt.xticks(rotation = 45)\n# ax.set_title('Target Variable Changes over the First Active Month')\n# ax.set_xlabel('First Active Month')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 118970
    },
    {
      "raw": "print(f'Train data shape: {data.shape} , Test data shape: {test_data.shape}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 235959
    },
    {
      "raw": "# The main business with the purchase_date and purchase_time. Lets see if we can't generate more columns out of them\ndef get_weekday(date_string):\n    date = datetime.datetime.strptime(date_string, '%Y-%m-%d')\n    return calendar.day_name[date.weekday()]\n\n# get weekday for date variable\ntest_data['purchase_weekday'] = test_data['purchase_date'].apply(lambda x: get_weekday(x))\n\n# for plotting recode to ordered categorical\nday_labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\ntest_data['purchase_weekday'] = pd.Categorical(test_data['purchase_weekday'], categories = day_labels, ordered = True)\n\ndef get_month(date_string, kind = 'month'):\n    if kind == 'month':\n        date = datetime.datetime.strptime(date_string, '%Y-%m-%d')\n    elif kind == 'day':\n        date = datetime.datetime.strptime(date_string, '%Y-%m-%d')\n    return date.strftime(\"%B\")\n\ntest_data['purchase_month'] = test_data['purchase_date'].apply(lambda x: get_month(x, kind = 'day'))\ntest_data['first_active_month2'] = test_data['first_active_month'].apply(lambda x: get_month(x))\ntest_data['first_active_year'] = test_data['first_active_month'].str[:4]\n\nmonth_labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\n                'September', 'October', 'November', 'December']\ntest_data['purchase_month'] = pd.Categorical(test_data['purchase_month'], categories = month_labels, ordered = True)\ntest_data['first_active_month2'] = pd.Categorical(test_data['first_active_month2'], categories = month_labels, ordered = True)\n\nyear_labels = ['2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018']\ntest_data['first_active_year'] = pd.Categorical(test_data['first_active_year'], categories = year_labels, ordered = True)\n\n# get time of the day\ntest_data['temp'] = test_data['purchase_time'].str.split(':')\n\ndef get_session(time_list):\n    time_list[0] = int(time_list[0])\n    if time_list[0] > 4 and time_list[0] < 12:\n        return 'Morning'\n    elif time_list[0] >= 12 and time_list[0] < 17:\n        return 'Afternoon'\n    elif time_list[0] >= 17 and time_list[0] < 21:\n        return 'Evening'\n    else:\n        return 'Night'\n    \ntest_data['purchase_session'] = test_data['temp'].apply(lambda x: get_session(x))\n\nsession_labels = ['Morning', 'Afternoon', 'Evening', 'Night']\ntest_data['purchase_session'] = pd.Categorical(test_data['purchase_session'], categories = session_labels, ordered = True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 6447251
    },
    {
      "raw": "## time of month\n# as categorical variable, thressholds are arbitrary and could be different\ndef get_time_of_month_cat(date):\n    date_temp = date.split('-')\n    if int(date_temp[2]) < 10:\n        time_of_month = 'Beginning'\n    elif int(date_temp[2]) >= 10 and int(date_temp[2]) < 20:\n        time_of_month = 'Middle'\n    else:\n        time_of_month = 'End'\n    return time_of_month\n\ntest_data['time_of_month_cat'] = test_data['purchase_date'].apply(lambda x: get_time_of_month_cat(x))\n\ntof_labels = ['Beginning', 'Middle', 'End']\ntest_data['time_of_month_cat'] = pd.Categorical(test_data['time_of_month_cat'], categories = tof_labels, ordered = True)\n\ntest_data['time_of_month_num'] = test_data['purchase_date'].str[8:].astype(int)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1985296
    },
    {
      "raw": "# Now the shape should be the same in terms of columns except that Train data will have one extra column because of the target value\nprint(f'Train data shape: {data.shape} , Test data shape: {test_data.shape}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 219596
    },
    {
      "raw": "def get_end_of_month(date):\n    date_temp = date.split('-')\n    if int(date_temp[2]) >= 25:\n        end_of_month = 'Y'\n    else:\n        end_of_month = 'N'\n    return end_of_month\ndata['end_of_month'] = data['purchase_date'].apply(lambda x: get_end_of_month(x))\ntest_data['end_of_month'] = test_data['purchase_date'].apply(lambda x: get_end_of_month(x))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1259119
    },
    {
      "raw": "print(f'Train data shape: {data.shape} , Test data shape: {test_data.shape}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 233002
    },
    {
      "raw": "data[:5]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 290581
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 64239
    },
    {
      "raw": "# ALEX: make notebook run\n# correlation_data = data.corr()\ncorrelation_data = data.corr(numeric_only=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 679149
    },
    {
      "raw": "correlation_data",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 168624
    },
    {
      "raw": "print(correlation_data['target'].sort_values(ascending = False))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1035991
    },
    {
      "raw": "data_cat_feats = data.dtypes[data.dtypes == 'object'].index\ndata_num_feats = data.dtypes[data.dtypes != 'object'].index\n\nprint(f'Data categrical: {len(data_cat_feats)}')\nprint(f'Data Numerical: {len(data_num_feats)}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1078167
    },
    {
      "raw": "# for col in data_cat_feats:\n#     cols = data[col].value_counts().index.shape[0]\n#     print(f'{cols} \\t unique values in \\t {col}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 112864
    },
    {
      "raw": "# for col in data_num_feats:\n#     cols = data[col].value_counts().index.shape[0]\n#     print(f'{cols} \\t unique values in \\t {col}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 102310
    },
    {
      "raw": "missing_values(data.select_dtypes(['object']))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2376589
    },
    {
      "raw": "missing_values(data.select_dtypes(include = [np.number]))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2476158
    },
    {
      "raw": "missing_values(data)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3693673
    },
    {
      "raw": "data['category_3'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 526951
    },
    {
      "raw": "data['category_3'] = data['category_3'].fillna(data['category_3'].mode()[0])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 619538
    },
    {
      "raw": "missing_values(data.select_dtypes(['object']))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2263983
    },
    {
      "raw": "data['category_3'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 489553
    },
    {
      "raw": "cols = ['category_2', 'avg_sales_lag3', 'avg_sales_lag6', 'avg_sales_lag12']\n\nfor col in cols:\n    data[col] = data[col].fillna(data[col].mean())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1205078
    },
    {
      "raw": "missing_values(data)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3779823
    },
    {
      "raw": "missing_values(test_data.select_dtypes(['object']))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2266417
    },
    {
      "raw": "test_data['category_3'] = test_data['category_3'].fillna(test_data['category_3'].mode()[0])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 615946
    },
    {
      "raw": "missing_values(test_data)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3569504
    },
    {
      "raw": "cols = ['category_2', 'avg_sales_lag3', 'avg_sales_lag6', 'avg_sales_lag12']\n\nfor col in cols:\n    test_data[col] = test_data[col].fillna(test_data[col].mean())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1365815
    },
    {
      "raw": "missing_values(test_data)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3675196
    },
    {
      "raw": "# Lets change the First_active_month column from string to date.\n\ndata['first_active_month'] = pd.to_datetime(data['first_active_month'])\n\n# Also do this to the test dataset\n\ntest_data['first_active_month'] = pd.to_datetime(test_data['first_active_month'])\n\ndata['purchase_date'] = pd.to_datetime(data['purchase_date'])\ntest_data['purchase_date'] = pd.to_datetime(test_data['purchase_date'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1770298
    },
    {
      "raw": "data['purchase_time'] = pd.to_timedelta(data['purchase_time'])\ntest_data['purchase_time'] = pd.to_timedelta(test_data['purchase_time'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 728679
    },
    {
      "raw": "data[:5]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 317607
    },
    {
      "raw": "test_data[:5]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 299795
    },
    {
      "raw": "print(f'train: {data.shape}, Test: {test_data.shape}')\n\ncols = ['merchant_id', 'card_id', 'temp']\n\nfor col in cols:\n    data.drop([col], axis = 1, inplace = True)\n    test_data.drop([col], axis = 1, inplace = True)\n    \nprint(f'train: {data.shape}, test: {test_data.shape}')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 5386211
    },
    {
      "raw": "catcols = data.select_dtypes(['object'])\n\nfor col in catcols:\n    print(col)\n    print(data[col].value_counts())\n    print('==' * 20)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3072870
    },
    {
      "raw": "data['most_recent_sales_range'] = data['most_recent_sales_range'].map({'A':0, 'B':1, 'C':2, 'D':3, 'E':4})\ndata['most_recent_purchases_range'] = data['most_recent_purchases_range'].map({'A':0, 'B':1, 'C':2, 'D':3, 'E':4})\ndata['category_4'] = data['category_4'].map({'Y':1, 'N':0})\ndata['authorized_flag'] = data['authorized_flag'].map({'Y':0})\ndata['category_1'] = data['category_1'].map({'Y':1, 'N':0})\ndata['category_3'] = data['category_3'].map({'A':0, 'B':1, 'C':2})\ndata['end_of_month'] = data['end_of_month'].map({'Y':1, 'N':0})\n\n\ntest_data['most_recent_sales_range'] = test_data['most_recent_sales_range'].map({'A':0, 'B':1, 'C':2, 'D':3, 'E':4})\ntest_data['most_recent_purchases_range'] = test_data['most_recent_purchases_range'].map({'A':0, 'B':1, 'C':2, 'D':3, 'E':4})\ntest_data['category_4'] = test_data['category_4'].map({'Y':1, 'N':0})\ntest_data['authorized_flag'] = test_data['authorized_flag'].map({'Y':0})\ntest_data['category_1'] = test_data['category_1'].map({'Y':1, 'N':0})\ntest_data['category_3'] = test_data['category_3'].map({'A':0, 'B':1, 'C':2})\ntest_data['end_of_month'] = test_data['end_of_month'].map({'Y':1, 'N':0})",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 7010927
    },
    {
      "raw": "catcols = data.select_dtypes(['object'])\n\nfor col in catcols:\n    print(col)\n    print(data[col].value_counts())\n    print('==' * 20)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 488516
    },
    {
      "raw": "data[:5]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 310190
    },
    {
      "raw": "data.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 6874099
    },
    {
      "raw": "data_app = pd.get_dummies(data)\ntest_app = pd.get_dummies(test_data)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 6129334
    },
    {
      "raw": "data_app[:5]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 293224
    },
    {
      "raw": "missing_values(test_app)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3070789
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 73390
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 64014
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 59698
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 57711
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 56594
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 56129
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 56882
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 57235
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 56137
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 55867
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 55439
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 55333
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 56616
    },
    {
      "raw": "# ALEX: remove ML code\n# from xgboost import XGBRegressor",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 100585
    },
    {
      "raw": "y = data_app.target\nX = data_app.drop(['target'], axis = 1)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1070312
    },
    {
      "raw": "X.shape, test_app.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 202345
    },
    {
      "raw": "y[:5]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 276799
    },
    {
      "raw": "# ALEX: remove ML code\n# xgb = XGBRegressor()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 103341
    },
    {
      "raw": "X['purchase_date'] = X['purchase_date'].astype(int)\nX['first_active_month'] = X['first_active_month'].astype(int)\nX['purchase_time'] = X['purchase_time'].astype(int)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 832147
    },
    {
      "raw": "test_app['purchase_date'] = test_app['purchase_date'].astype(int)\ntest_app['first_active_month'] = test_app['first_active_month'].astype(int)\ntest_app['purchase_time'] = test_app['purchase_time'].astype(int)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 799346
    },
    {
      "raw": "# xgb_model = xgb.fit(X,y)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 128067
    },
    {
      "raw": "# test, X = test.align(X, join = 'inner', axis = 1)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 116307
    },
    {
      "raw": "test, X = test.align(X, join = 'left', axis = 0)\nX, test_app = X.align(test_app, join = 'left', axis = 0)\nX, y = X.align(y, join = 'left', axis = 0)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 5904441
    },
    {
      "raw": "test.shape, X.shape, test_app.shape, y.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 276839
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 79101
    },
    {
      "raw": "# ALEX: remove ML code\n# from sklearn.linear_model import Lasso",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 109176
    },
    {
      "raw": "# ALEX: remove ML code\n# lassoreg = Lasso(alpha = 1.0, normalize = True, max_iter=1e5)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 96540
    },
    {
      "raw": "# ALEX: remove ML code\n# model_lasso = lassoreg.fit(X,y)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 93054
    },
    {
      "raw": "# ALEX:  remove ML code\n# pred_lasso = model_lasso.predict(test_app)\npred_lasso = y",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 151922
    },
    {
      "raw": "test['card_id'].shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 250976
    },
    {
      "raw": "pred_lasso.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 171374
    },
    {
      "raw": "# pred_lasso, test['card_id'] = pred_lasso.align(test['card_id'], join = 'inner', axis = 1)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 114524
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 59380
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 56421
    },
    {
      "raw": "sub_lasso = pd.DataFrame({'card_id': test['card_id'], 'target': pred_lasso})\nsub_lasso.to_csv('Lasso_submission.csv', index = False)\nsub_lasso.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 10807456
    },
    {
      "raw": "# ALEX: remove ML code\n# import lightgbm as lgb",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 112493
    },
    {
      "raw": "# ALEX: remove ML code\n# params = {\n#         \"objective\" : \"regression\",\n#         \"metric\" : \"rmse\",\n#         \"num_leaves\" : 30,\n#         \"min_child_weight\" : 50,\n#         \"learning_rate\" : 0.05,\n#         \"bagging_fraction\" : 0.7,\n#         \"feature_fraction\" : 0.7,\n#         \"bagging_seed\" : 2018,\n#         \"verbosity\" : -1\n#     }",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 138865
    },
    {
      "raw": "# ALEX: remove ML code\n# train_set = lgb.Dataset(X, label = y.values)\n_ = y.values",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 175197
    },
    {
      "raw": "# ALEX: remove ML code\n# val_set = lgb.Dataset(X)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 98921
    },
    {
      "raw": "# ALEX: remove ML code\n# lgb_model = lgb.train(params, train_set,valid_sets= val_set, early_stopping_rounds=1000,verbose_eval=1000, num_boost_round=1000)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 95830
    },
    {
      "raw": "# ALEX: remove ML code\n# lgb_pred = lgb_model.predict(test_app)\nlgb_pred = y.values",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 162735
    },
    {
      "raw": "lgb_pred",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 156522
    },
    {
      "raw": "sub_lgb = pd.DataFrame({'card_id':test['card_id'], 'target': lgb_pred})\nsub_lgb.to_csv('lgb_submission.csv', index = False)\nsub_lgb.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 10462540
    },
    {
      "raw": "# ALEX: remove ML code\n# import xgboost as xgb",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 110512
    },
    {
      "raw": "# ALEX: remove ML code\n# dtrain = xgb.DMatrix(X, label = y.values)\n# dtest = xgb.DMatrix(test_app)\n_ = y.values",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 176551
    },
    {
      "raw": "# ALEX: remove ML code\n# xgb_params = {'learning_rate':0.001, \n#               'n_estimators':1000,\n#               'max_depth':4,\n#               'min_child_weight':6,\n#               'gamma':0,\n#               'subsample':0.8,\n#               'colsample_bytree':0.8,\n#               'objective':'binary:logistic',\n#               'nthread':4,\n#               'scale_pos_weight':1,\n#               'seed':27,\n#               'silent':1\n#               }",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 150635
    },
    {
      "raw": "# ALEX: remove ML code\n# xgb_model = xgb.train(params = {'silent':1, 'learning_rate':0.1, 'n_estimators':1000, 'min_child_weight':5},dtrain=dtrain, verbose_eval = False, num_boost_round=100)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 100560
    },
    {
      "raw": "# ALEX: remove ML code\n# xgb_pred = xgb_model.predict(dtest)\nxgb_pred = y.values",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 165968
    },
    {
      "raw": "xgb_pred",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 152853
    },
    {
      "raw": "xgb_sub = pd.DataFrame({'card_id':test['card_id'], 'target':xgb_pred})\nxgb_sub.to_csv('xgb_submission.csv', index = False)\nxgb_sub.tail(20)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 10531807
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 69933
    }
  ],
  "total-time-in-sec": 6.813940924,
  "max-disk-in-mb": 0
}