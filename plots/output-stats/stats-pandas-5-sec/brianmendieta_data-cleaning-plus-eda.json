{
  "max-mem-in-mb": 186,
  "max-mem-in-mb2": 402,
  "cells": [
    {
      "raw": "# Import the necessary libraries\n# import pandas as pd\nexec(os.environ['IREWR_IMPORTS'])\nimport numpy as np\nfrom datetime import datetime\n#import zipfile\n#import kaggle",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 427299
    },
    {
      "raw": "# Uncomment the import to extract the file from Kaggle with your key\n#!kaggle datasets download -d rashikrahmanpritom/data-science-job-posting-on-glassdoor",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 180971
    },
    {
      "raw": "# Extract the files from the ZIP file\n#zip_name = 'data-science-job-posting-on-glassdoor.zip'\n#with zipfile.ZipFile(zip_name,'r') as file:\n#    file.extractall()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 175522
    },
    {
      "raw": "# Read the .csv file as a pandas dataframe\njob_data = pd.read_csv(\"./input/Uncleaned_DS_jobs.scaled.csv\")",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2872900705
    },
    {
      "raw": "# Explore the data\njob_data.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 155218746
    },
    {
      "raw": "job_data.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 308547
    },
    {
      "raw": "# Check the information structure\njob_data.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 255214
    },
    {
      "raw": "# Drop the index column\njob_data.drop('index',axis=1,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 13143240
    },
    {
      "raw": "# Check for duplicates\njob_data[job_data.duplicated()].shape\njob_data[job_data.duplicated()]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1203755647
    },
    {
      "raw": "# Drop duplicates\njob_data.drop_duplicates(inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 592137459
    },
    {
      "raw": "# Check the shape again\njob_data.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 254463
    },
    {
      "raw": "# Set appropiate column names in the form of lowercase words separated by '_'\njob_data.rename(columns= lambda header: header.lower().replace(\" \",\"_\"), inplace= True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 565403
    },
    {
      "raw": "# Inspect the Job title column\njob_data[\"job_title\"][:150]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 508340
    },
    {
      "raw": "# Make the replacement\njob_data[\"job_title\"]=job_data.loc[:,\"job_title\"].str.replace(\"(Sr.)\",\"sr.\")",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1150544
    },
    {
      "raw": "# Delete the rest of the instances using a regex\njob_data[\"job_title\"]=job_data.loc[:,\"job_title\"].str.extract('([^()]+)')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1483882
    },
    {
      "raw": "#Replace the special characters with an empty value by defining a regex pattern\njob_data['job_title'] = job_data['job_title'].str.replace(r'[^a-zA-Z0-9-,/\\s]','',regex=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 916629
    },
    {
      "raw": "#Inspect the salary estimate column\njob_data['salary_estimate'][100:200]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 341235
    },
    {
      "raw": "# Define a function to extract the salary limits\ndef extract_values(text):\n    extracted_integer = ''\n    modified_string = ''\n    \n    for i in range(len(text)):\n        if i+1 < len(text):\n            if text[i].isdigit():\n                extracted_integer += text[i]\n                if not text[i+1].isdigit():\n                    break\n        if i == len(text) - 1 and text[i].isdigit():\n            extracted_integer += text[i]\n    \n    if extracted_integer:\n        modified_string = text[:text.find(extracted_integer)] + text[text.find(extracted_integer) + len(extracted_integer):]\n        extracted_integer = int(extracted_integer)\n    \n    return extracted_integer, modified_string",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 874949
    },
    {
      "raw": "#Obtain the minimum salary in the range\njob_data['min_salary_K$'], job_data['salary_estimate'] = zip(*job_data['salary_estimate'].apply(extract_values))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2121024
    },
    {
      "raw": "#Obtain the maximum salary in the range\njob_data['max_salary_K$'], job_data['salary_estimate'] = zip(*job_data['salary_estimate'].apply(extract_values))",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2254310
    },
    {
      "raw": "#Drop the old salary range column\njob_data.drop('salary_estimate', axis=1, inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 732548
    },
    {
      "raw": "#Let's obtain the average of these ranges\njob_data['avg_salary_estimate'] = (np.round((job_data['min_salary_K$'] + job_data['max_salary_K$'])/2,decimals=0)).astype(int)\njob_data.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1022756
    },
    {
      "raw": "#Inspect the job description column\njob_data['job_description'][:150]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 348706
    },
    {
      "raw": "job_data.loc[:,\"job_description\"]\njob_data.loc[job_data.loc[:,\"job_description\"]==\"-1\"]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 855511
    },
    {
      "raw": "#Inspect the rating column\njob_data['rating'][:150]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 338300
    },
    {
      "raw": "job_data['rating'].unique()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 297582
    },
    {
      "raw": "# Replace rating mising values with NaN across the entire column\njob_data['rating'].replace(-1.0,np.nan,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 467147
    },
    {
      "raw": "job_data['rating'].unique()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 293943
    },
    {
      "raw": "# Inspect the company name column\njob_data['company_name'][:10]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 319494
    },
    {
      "raw": "job_data['company_name'] = job_data.loc[:,'company_name'].str.replace(r\"\\n\\d+(\\.\\d+)?\",'',regex=True)\njob_data.loc[:,\"company_name\"][:10]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1300501
    },
    {
      "raw": "# Inspect the location column\njob_data['location'][:10]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 319697
    },
    {
      "raw": "# Check the counts of each unique location state\njob_data.loc[:,\"location\"].apply(lambda x: x.split(\",\")[-1]).value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 914359
    },
    {
      "raw": "# Create the state column\njob_data['location_state'] = job_data['location'].apply(lambda x: x.split(',')[-1].strip())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 774480
    },
    {
      "raw": "# Replace the inconsistencies with their correct state abbreviation\ndef clean_location(jobs):\n    return (\n        jobs.loc[:, \"location_state\"]\n        .replace(\"California\",\"CA\")\n        .replace(\"Texas\",\"TX\")\n        .replace(\"Utah\",\"UT\")\n        .replace(\"New Jersey\",\"NJ\")\n        .replace(\"Remote\",\"n/a\")\n        .replace(\"United States\",\"n/a\")\n    )\n\njob_data = job_data.assign(\n    location_state = clean_location\n)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1532156
    },
    {
      "raw": "job_data[\"location_state\"].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 553103
    },
    {
      "raw": "# Check if the location of the job and the HQ are in the place\njob_data['same_state'] = (job_data['location'] == job_data['headquarters']).astype(int)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 694896
    },
    {
      "raw": "job_data.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 234705
    },
    {
      "raw": "# Inspect the headquarters column\njob_data['headquarters'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 510112
    },
    {
      "raw": "job_data['headquarters'] = job_data['headquarters'].apply(lambda x: x.replace('-1','n/a'))\njob_data[\"headquarters\"].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1002921
    },
    {
      "raw": "# Inspect the size column\nprint(job_data['size'][:100])\njob_data['size'].unique()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1060100
    },
    {
      "raw": "# Handle the missing values correctly\ndef size_cleaning(jobs):\n    return (\n        jobs.loc[:, \"size\"]\n        .replace(\"-1\",\"n/a\")\n        .replace(\"Unknown\",\"n/a\")\n    )\n\njob_data = job_data.assign(\n    size = size_cleaning\n)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1070073
    },
    {
      "raw": "job_data['size'].unique()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 331499
    },
    {
      "raw": "# Inspect the founded column\njob_data['founded'][:100]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 325412
    },
    {
      "raw": "#Clean the missing values\njob_data['founded'].replace(-1,np.nan,inplace=True)\njob_data['founded'].unique()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 683400
    },
    {
      "raw": "# obtain the years the company has been in the market and drop the founed column\ncurrent_year = datetime.now().year\njob_data['years_in_market'] = current_year - job_data['founded']\njob_data.drop('founded',axis=1,inplace=True)\njob_data.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1176473
    },
    {
      "raw": "# Inspect the Type of ownership column\njob_data['type_of_ownership'][:100]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 354025
    },
    {
      "raw": "job_data['type_of_ownership'].unique()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 286753
    },
    {
      "raw": "def ownership(jobs):\n    return (\n        jobs.loc[:, \"type_of_ownership\"]\n        .replace(\"Nonprofit Organization\",\"Nonprofit\")\n        .replace(\"-1\",\"n/a\")\n        .replace(\"Unknown\",\"n/a\")\n        .replace(\"Company - Public\",\"Public\")\n        .replace(\"Company - Private\",\"Private\")\n        .replace(\"Other Organization\",\"Other\")   \n    )\n\njob_data = job_data.assign(\n    type_of_ownership = ownership\n)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1482490
    },
    {
      "raw": "job_data['type_of_ownership'].unique()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 316907
    },
    {
      "raw": "# Inspect the industry column\njob_data['industry'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 492091
    },
    {
      "raw": "job_data[\"industry\"] = job_data[\"industry\"].apply(lambda x: x.replace(\"-1\",\"n/a\"))\njob_data['industry'].unique()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 789900
    },
    {
      "raw": "# Inspect the sector column\njob_data['sector'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 489578
    },
    {
      "raw": "job_data['sector'] = job_data['sector'].apply(lambda x: x.replace(\"-1\",\"n/a\"))\njob_data['sector'].unique()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 789818
    },
    {
      "raw": "# Inspect the revenue column\njob_data['revenue'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 480753
    },
    {
      "raw": "def revenue_cleanup(jobs):\n    return (\n        jobs.loc[:, \"revenue\"]\n        .replace(\"-1\",\"n/a\")\n        .replace(\"Unknown / Non-Applicable\",\"n/a\")\n    )\n\njob_data = job_data.assign(\n    revenue = revenue_cleanup\n)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1050501
    },
    {
      "raw": "job_data['revenue']=job_data.loc[:,'revenue'].str.extract('([^()]+)')\njob_data['revenue'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1563067
    },
    {
      "raw": "# Finally inspect the competitors column\njob_data['competitors'].value_counts()\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 483412
    },
    {
      "raw": "np.round((488/659)*100,decimals=2)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 269600
    },
    {
      "raw": "#The percentage is too high so we drop this column\njob_data.drop('competitors',axis=1,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 617444
    },
    {
      "raw": "job_data.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 214506
    },
    {
      "raw": "# Check if we have any '-1' as missing values\njob_data[job_data.eq('-1').any(axis = 1)]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1084798
    },
    {
      "raw": "# Check if we have a numerical missing value in any column \njob_data[job_data.eq(-1).any(axis = 1)]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 884774
    },
    {
      "raw": "# Define a simplification function\n\ndef role_defining(title): \n    if any(keyword in title.lower() for keyword in ['data scientist', 'data science']):\n        return 'Data Scientist'\n    elif any(keyword in title.lower() for keyword in ['data analyst', 'analyst']):\n        return 'Data Analyst'\n    elif 'data engineer' in title.lower():\n        return 'Data Engineer'\n    elif any(keyword in title.lower() for keyword in ['machine learning', 'ai']):\n        return 'Machine Learning Engineer'\n    else:\n        return 'Other'",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 683524
    },
    {
      "raw": "# Apply the function to the new column\njob_data['job_role']= job_data['job_title'].apply(role_defining)\njob_data['job_role'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1428761
    },
    {
      "raw": "def seniority_defining(title,description):\n    if any(keyword in title.lower() for keyword in ['jr.','jr','junior']) or any(keyword in description.lower() for keyword in ['jr.','jr','junior']):\n        return 'Jr'\n    elif any(keyword in title.lower() for keyword in ['sr.','sr','vp','senior']) or any(keyword in description.lower() for keyword in ['sr.','sr','vp','senior']):\n        return 'Sr'\n    else:\n        return 'Mid-Level'\n    \n\njob_data['job_seniority'] = job_data.apply(lambda row: seniority_defining(row['job_title'], row['job_description']), axis=1)\njob_data['job_seniority'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 61771491
    },
    {
      "raw": "job_data.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 234249
    },
    {
      "raw": "# Create dummy columns for each of the skill considered.\njob_data['excel'] = job_data.apply(lambda x: 1 if 'excel' in x.job_description.lower() else 0, axis=1)\njob_data['sql'] = job_data.apply(lambda x: 1 if 'sql' in x.job_description.lower() else 0, axis=1)\njob_data['python'] = job_data.apply(lambda x: 1 if 'python' in x.job_description.lower() else 0, axis=1)\njob_data['power_bi'] = job_data.apply(lambda x: 1 if 'power bi' in x.job_description.lower() else 0, axis=1)\njob_data['tableau'] = job_data.apply(lambda x: 1 if 'tableau' in x.job_description.lower() else 0, axis=1)\njob_data['scikit'] = job_data.apply(lambda x: 1 if 'scikit' in x.job_description.lower() else 0, axis=1)\njob_data['spark'] = job_data.apply(lambda x: 1 if 'spark' in x.job_description.lower() else 0, axis=1)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 94924885
    },
    {
      "raw": "print(job_data['excel'].value_counts())\nprint(job_data['sql'].value_counts())\nprint(job_data['python'].value_counts())\nprint(job_data['power_bi'].value_counts())\nprint(job_data['tableau'].value_counts())\nprint(job_data['scikit'].value_counts())\nprint(job_data['spark'].value_counts())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2956776
    },
    {
      "raw": "job_data.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 236481
    },
    {
      "raw": "job_data.to_csv('Cleaned_Job_Data.csv',index= False)\njob_data.to_excel('Cleaned_Job_Data.xlsx',index=False)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 461952484
    },
    {
      "raw": "# Include the necessary packages fro analysisi and visualization\n# FIRST-AUTHOR: remove plotting\n# import matplotlib.pyplot as plt\n# import seaborn as sns\n# %matplotlib inline",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 150396
    },
    {
      "raw": "# Obtain the basic statistics of the data frame\njob_data.describe()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 14490620
    },
    {
      "raw": "#Obtain the relationships between columns\n# FIRST-AUTHOR: remove plotting\n# sns.pairplot(job_data)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 119976
    },
    {
      "raw": "industry_salary = [\n    round(job_data.loc[job_data[\"industry\"]==\"Biotech & Pharmaceuticals\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"IT Services\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"Computer Hardware & Software\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"Aerospace & Defense\",\"avg_salary_estimate\"].mean(), 2),\n    round(job_data.loc[job_data[\"industry\"]==\"Enterprise Software & Network Solutions\",\"avg_salary_estimate\"].mean(), 2)\n]\n\ntop_paying_industries = [\n    \"Biotech & Pharmaceuticals\",\n    \"IT Services\",\n    \"Computer Hardware & Software\",\n    \"Aerospace & Defense\",\n    \"Enterprise Software & Network Solutions\"\n]\n\n# FIRST-AUTHOR: remove plotting\n# plt.bar(top_paying_industries, industry_salary)\n# plt.ylim(110, 140)\n# plt.xlabel(\"Job Industry\")\n# plt.ylabel(\"Average Salary\")\n\n# # Rotate the x-axis labels by 70 degrees\n# plt.xticks(rotation=70)\n\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2062711
    },
    {
      "raw": "# Let's start by analyzing the average salary for job postings\n# FIRST-AUTHOR: remove plotting\n# sns.boxplot(x=job_data['avg_salary_estimate'])\n_ = job_data['avg_salary_estimate']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 203367
    },
    {
      "raw": "# We can define a new data frame to fit in better inside the avg. salary range\ndf = job_data[(job_data.avg_salary_estimate > 50) & (job_data.avg_salary_estimate < 200)] ",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 808075
    },
    {
      "raw": "df.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 199165
    },
    {
      "raw": "# Make a comparison between the years the company has been in the market and the avg. salary.\n# FIRST-AUTHOR: remove plotting\n# sns.lmplot(x='years_in_market',y='avg_salary_estimate',data=df)\n",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 107000
    },
    {
      "raw": "# Generate a heatmap based on the numerical columns of the dataframe\n# FIRST-AUTHOR: remove plotting\n# fig, ax = plt.subplots(figsize=(10,10)) \nmatrix = np.triu(df.select_dtypes(include=[np.number]).corr())\n# FIRST-AUTHOR: remove plotting\n# sns.heatmap(df.select_dtypes(include=[np.number]).corr(),annot=True, fmt='.1g', vmin=-1, vmax=1, center= 0,  ax=ax)\n_ = df.select_dtypes(include=[np.number]).corr()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1361310
    },
    {
      "raw": "# Check the sector values\n# FIRST-AUTHOR: remove plotting\n# fig, ax = plt.subplots(figsize=(10,10)) \n# chart = sns.barplot(x=df.sector.value_counts().index, y=df.sector.value_counts())\n# _= chart.set_xticklabels(chart.get_xticklabels(), rotation=75)\n_ = df.sector.value_counts().index\n_ = df.sector.value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 822864
    },
    {
      "raw": "# Set a simpler name\ndf.rename(columns={'avg_salary_estimate':'avg_salary'}, inplace= True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 556701
    },
    {
      "raw": "# Obtain the avg. salary for each type of role\npd.pivot_table(df,index='job_role', values='avg_salary')",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2675511
    },
    {
      "raw": "# Obtain the avg. salary based on the seniority of the roles\npd.pivot_table(df, index=['job_role','job_seniority'], values='avg_salary').sort_values('avg_salary', ascending =False)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3598268
    },
    {
      "raw": "df.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 250032
    },
    {
      "raw": "\n# Define a custom aggregation function to get the percentage of descriptions that include certain skill.\ndef ones_percentage(x):\n    return round((sum(1 for value in x if value == 1)/len(x))*100,2)\n\n# Create the pivot table with the custom aggregation function\npivot_table = pd.pivot_table(df, index='job_role', values=['excel', 'sql', 'python', 'power_bi', 'tableau', 'scikit', 'spark'], aggfunc=ones_percentage)\n\nprint(pivot_table)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 15673268
    }
  ],
  "total-time-in-sec": 5.545052335,
  "max-disk-in-mb": 0
}