{
  "max-mem-in-mb": 189,
  "max-mem-in-mb2": 195,
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nexec(os.environ['IREWR_IMPORTS'])\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# ALEX: remove path printing\n# import os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 425033
    },
    {
      "raw": "df_products=pd.read_csv(\"./input/summer-products-with-rating-and-performance_2020-08.scaled.csv\")\ndf_products.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 649295704
    },
    {
      "raw": "df_products.columns",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 323169
    },
    {
      "raw": "df_products.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 109251931
    },
    {
      "raw": "product_color=df_products['product_color'].value_counts()\nprint(product_color.to_string())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3340977
    },
    {
      "raw": "#for index,item in df_products['product_color'].items() :\n   # item=str(item).lower()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 114290
    },
    {
      "raw": "df_products['product_color']=df_products['product_color'].str.lower()\nprint(df_products['product_color'].value_counts().to_string())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 19097142
    },
    {
      "raw": "df_products['product_color'].replace('grey','gray',inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1321198
    },
    {
      "raw": "df_products['product_color']=df_products['product_color'].str.split('&')\nprint(df_products['product_color'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 22811795
    },
    {
      "raw": "df_products['product_color']=df_products['product_color'].str[0]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 16392999
    },
    {
      "raw": "print(df_products['product_color'].value_counts().to_string())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3487920
    },
    {
      "raw": "df_products['product_color']=df_products['product_color'].str.split(' ')\ndf_products['product_color']=df_products['product_color'].str[0]\nprint(df_products['product_color'].value_counts().to_string())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 54916573
    },
    {
      "raw": "df_products['product_color']=df_products['product_color'].str.split('-')\ndf_products['product_color']=df_products['product_color'].str[0]\nprint(df_products['product_color'].value_counts().to_string())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 53048824
    },
    {
      "raw": "df_products['product_color'].replace({'applegreen':'green','blackwhite':'black',\n                                     'lightgreen':'green','lightblue':'blue','navyblue':'blue',\n                                     'denimblue':'blue','prussianblue':'blue','lakeblue':'blue',\n                                     'darkblue':'blue','skyblue':'blue','lightblue':'blue'\n                                     ,'navyblue':'blue','armygreen':'green','darkgreen':'green',\n                                     'applegreen':'green','lightgreen':'green','mintgreen':'green',\n                                      'winered':'red','coralred':'red','lightred':'red',\n                                     'watermelonred':'red','fluorescentgreen':'green',\n                                     'rosered':'rose','rosegold':'rose','greysnakeskinprint':'gray',\n                                     'lightgray':'gray','lightgrey':'gray','whitefloral':'white'\n                                     ,'whitestripe':'white','lightpink':'pink','dustypink':'pink',\n                                     'lightkhaki':'khaki','lightpurple':'purple','lightyellow':'yellow',\n                                     'tan':'brown','coffee':'brown','offwhite':'white',\n                                     'offblack':'black','coolblack':'black','leopardprint':\n                                     'leopard','claret':'red','violet':'blue','apricot':'pink',\n                                     'nude':'pink','gold':'brown','ivory':'beige','burgundy':'red',\n                                     'navy':'blue','wine':'red','camel':'brown','khaki':'brown','light':'white'},inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 56912235
    },
    {
      "raw": "df_products['product_color'].replace({'floral':'multicolor','leopard':'multicolor',\n                                     'army':'multicolor','camouflage':'multicolor',\n                                     'silver':'multicolor','star':'multicolor',\n                                     'khaki':'multicolor','rainbow':'multicolor',\n                                     'jasper':'multicolor',} ,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 12697050
    },
    {
      "raw": "df_products['currency_buyer'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2803881
    },
    {
      "raw": "print(df_products['product_color'].value_counts().to_string())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3154441
    },
    {
      "raw": "df_products.drop('currency_buyer',axis=1,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 15148667
    },
    {
      "raw": "df_products['merchant_id'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3327192
    },
    {
      "raw": "df_products[df_products.duplicated()]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 129680721
    },
    {
      "raw": "df_products.drop('merchant_title',axis=1,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 9461399
    },
    {
      "raw": "df_products.drop('merchant_name',axis=1,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 9631714
    },
    {
      "raw": "df_products['origin_country'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3068475
    },
    {
      "raw": "df_products.drop('merchant_profile_picture',axis=1,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 8640986
    },
    {
      "raw": "df_products['crawl_month'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2997609
    },
    {
      "raw": "df_products.drop('crawl_month',axis=1,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 8059692
    },
    {
      "raw": "df_products['urgency_text'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2166708
    },
    {
      "raw": "df_products['urgency_text'].isnull().sum()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2022836
    },
    {
      "raw": "df_products.drop('urgency_text',axis=1,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 7542806
    },
    {
      "raw": "df_products.drop('merchant_info_subtitle',axis=1,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 7298543
    },
    {
      "raw": "df_products.drop('product_picture',axis=1,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 7863212
    },
    {
      "raw": "df_products.drop('product_url',axis=1,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 8571697
    },
    {
      "raw": "df_products['theme'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 4548458
    },
    {
      "raw": "df_products.drop('theme',axis=1,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 11164203
    },
    {
      "raw": "df_products.head()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 298977
    },
    {
      "raw": "df_products.columns",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 186417
    },
    {
      "raw": "df_products.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 55704328
    },
    {
      "raw": "df_products.drop('has_urgency_banner',axis=1,inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 6588834
    },
    {
      "raw": "df_products['origin_country'][df_products['origin_country']==\"NaN\"]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2830865
    },
    {
      "raw": "df_products['origin_country'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2771101
    },
    {
      "raw": "mode=df_products['origin_country'].mode()\nprint(mode)\ndf_products['origin_country']=df_products['origin_country'].replace(np.nan,\"CN\")",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 8489895
    },
    {
      "raw": "df_products['origin_country'].isnull().sum()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2187758
    },
    {
      "raw": "df_products.info()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 54547593
    },
    {
      "raw": "mode=df_products['product_color'].mode()\nprint(mode)\ndf_products['product_color']=df_products['product_color'].replace(np.nan,\"black\")",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 8359171
    },
    {
      "raw": "df_products['origin_country'].isnull().sum()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2177712
    },
    {
      "raw": "df_products['product_id'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3183315
    },
    {
      "raw": "averagefeatur=df_products.groupby(df_products['product_id']).mean()[['price','retail_price','merchant_rating',\n                                                                 'rating']]\naveragefeatur",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 10821397
    },
    {
      "raw": "df_products.to_csv(\"df_products.csv\")",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 917370215
    },
    {
      "raw": "df_products['diffrencebetprices']=df_products['retail_price']-df_products['price']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1041748
    },
    {
      "raw": "df_products['diffrencebetprices'].loc[df_products['diffrencebetprices']<=0]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 978444
    },
    {
      "raw": "print(df_products['product_variation_size_id'].value_counts().to_string())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3344727
    },
    {
      "raw": "df_products['product_variation_size_id']=df_products['product_variation_size_id'].str.lower()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 9118523
    },
    {
      "raw": "print(df_products['product_variation_size_id'].value_counts().to_string())",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 4419315
    },
    {
      "raw": "df_products['product_variation_size_id'].replace({\"s.\":\"s\",\"size s\":\"s\",\"size-s\":\"s\",\"size s.\":\"s\",\n                                                \"s(bust 88cm)\":\"s\",\"suit-s\":\"s\",\n                                                \"size--s\":\"s\",\"size/s\":\"s\",\"25-s\":\"s\",\n                                                \"s(pink & black)\":\"s\",\"us-s\":\"s\",\n                                                \"pants-s\":\"s\",\"s diameter 30cm\":\"s\",\"s..\":\"s\",\"s (waist58-62cm)\":\"s\"\n                                                , \"s pink\":\"s\",\"m.\":\"m\",\"size m\":\"m\",\"sizel\":\"l\",\"32/l\":\"l\"\n                                                 ,\"size-l\":\"l\",\"x   l\":\"xl\",\"xs.\":\"xs\",\"size-xs\":\"xs\",\"size xs\":\"xs\"\n                                                 ,\"size-xxs\":\"xxs\",\"size -xxs\":\"xxs\",\"size xxs\":\"xxs\"\n                                                 ,\"2xl\":\"xxl\",\"xxxxxl\":\"5xl\",\"size-5xl\":\"5xl\",\"xxxxl\":\"4xl\",\n                                                 \"xxxl\":\"3xl\",\"size-4xl\":\"4xl\",\"l.\":\"l\",\n                                                 \"1 pc - xl\":\"xl\",\"04-3xl\":\"3xl\",\"size4xl\":\"4xl\",\n                                                  \"us 6.5 (eu 37)\":\"m\",\"us5.5-eu35\":\"s\",\"26(waist 72cm 28inch)\":\n                                                  \"3x\",\"women size 36\":\"s\",\"36\":\"s\",\"women size 37\":\"m\",\"eu 35\":\"s\",\n                                                  \"3x\":\"3xl\",\"eu39(us8)\":\"m\",\"choose a size\":\"s\",\n                                                  \"base & top & matte top coat\":\"s\",\"4-5 years\":\"s\",\n                                                  \"daughter 24m\":\"s\",\"2\":\"s\",\"5\":\"s\",\n                                                  \"30 cm\":\"s\",\"white\":\"s\",\"round\":\"s\",\"40 cm\":\"s\",\"17\":\"l\",\n                                                  \"60\":\"l\",\"floating chair for kid\":\"s\",\"au plug low quality\":\"s\",\n                                                  \"baby float boat\":\"s\",\"4\":\"xs\",\"s/m(child)\":\"s\",\"1pc\":\"s\"\n                                                  ,\"3 layered anklet\":\"s\",\"base coat\":\"s\",\"20pcs-10pairs\":\"s\",\n                                                  \"pack of 1\":\"s\",\"100 x 100cm(39.3 x 39.3inch)\":\"s\",\"b\":\"s\",\n                                                  \"first  generation\":\"s\",\"3x\":\"3xl\",\"100 cm\":\"s\",\"2pcs\":\"s\",\n                                                  \"5pairs\":\"s\",\"10pcs\":\"s\",\"20pcs\":\"s\",\"100pcs\":\"s\",\n                                                  \"1m by 3m\":\"s\",\"h01\":\"s\",\"80 x 200 cm\":\"s\",\"1\":\"xxxs\",\n                                                  \"33\":\"xs\",\"34\":\"xs\",\"29\":\"4xl\",\"25\":\"xxl\",\"35\":\"s\",\"1 pc.\":\"s\",\n                                                  \"one size\":\"s\",\"10 ml\":\"s\"\n                                                 },inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 107614911
    },
    {
      "raw": "# ALEX: remove plotting\n# import matplotlib.pyplot as plt\n# fig, ax = plt.subplots()\nx=df_products['product_variation_size_id'].value_counts().index\ny=df_products['product_variation_size_id'].value_counts()\n# ALEX: remove plotting\n# ax.bar(x, y, align='center')\n# ax.set_xticks(x)\n# ax.set_xlabel('Size')\n# ax.set_title('size counts')\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 5903722
    },
    {
      "raw": "df_products.to_csv(\"df_products.csv\")",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 952397252
    },
    {
      "raw": "df_products['shipping_option_name'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2996555
    },
    {
      "raw": "standardshippinglist=[\"Livraison standard\",\"Envio Padr\u00e3o\",\"Expediere Standard\",\"Env\u00edo normal\",\n                     \"\u0627\u0644\u0634\u062d\u0646 \u0627\u0644\u0642\u064a\u0627\u0633\u064a\",\"Standardversand\",\"Standardowa wysy\u0142ka\",\"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0430\",\n                     \"Standart G\u00f6nderi\",\"Spedizione standard\",\"\u0e01\u0e32\u0e23\u0e2a\u0e48\u0e07\u0e2a\u0e34\u0e19\u0e04\u0e49\u0e32\u0e21\u0e32\u0e15\u0e23\u0e10\u0e32\u0e19\",\"\u1780\u17b6\u179a\u178a\u17b9\u1780\u1787\u1789\u17d2\u1787\u17bc\u1793\u178f\u17b6\u1798\u179f\u17d2\u178f\u1784\u17cb\u178a\u17b6\u179a\"]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 321611
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"Livraison standard\", \"buymentlang\"] = \"French\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 4750658
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"\u0627\u0644\u0634\u062d\u0646 \u0627\u0644\u0642\u064a\u0627\u0633\u064a\", \"buymentlang\"] = \"Arabic\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2805933
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"Standard Shipping\", \"buymentlang\"] = \"English\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2800136
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"Envio Padr\u00e3o\", \"buymentlang\"] = \"Portuguese\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2764642
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"Expediere Standard\", \"buymentlang\"] = \"Romanian\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2911045
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"Env\u00edo normal\", \"buymentlang\"] = \"Spanish\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2762111
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"Standardversand\", \"buymentlang\"] = \"German\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2769159
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"Livraison Express\", \"buymentlang\"] = \"French\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2737449
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"Standardowa wysy\u0142ka\", \"buymentlang\"] = \"Polish\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2807921
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0430\", \"buymentlang\"] = \"Russian\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2788816
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"Standart G\u00f6nderi\", \"buymentlang\"] = \"Turkish\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2743108
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"Spedizione standard\", \"buymentlang\"] = \"Italian\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2727746
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"\u0e01\u0e32\u0e23\u0e2a\u0e48\u0e07\u0e2a\u0e34\u0e19\u0e04\u0e49\u0e32\u0e21\u0e32\u0e15\u0e23\u0e10\u0e32\u0e19\", \"buymentlang\"] = \"Thailand\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2749061
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"\u1780\u17b6\u179a\u178a\u17b9\u1780\u1787\u1789\u17d2\u1787\u17bc\u1793\u178f\u17b6\u1798\u179f\u17d2\u178f\u1784\u17cb\u178a\u17b6\u179a\", \"buymentlang\"] = \"Khmer\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2741522
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_name'] == \"Ekspresowa wysy\u0142ka\", \"buymentlang\"] = \"Polish\"",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2801151
    },
    {
      "raw": "df_products['buymentlang'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2302836
    },
    {
      "raw": "df_products['buymentlang'].isnull().sum()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2148955
    },
    {
      "raw": "#standardshippinglist\ndf_products['shipping_option_name'].replace(standardshippinglist,\"Standard Shipping\",inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 15091987
    },
    {
      "raw": "df_products['shipping_option_name'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2299387
    },
    {
      "raw": "Expresslist=[\"Livraison Express\",\"Ekspresowa wysy\u0142ka\"]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 197250
    },
    {
      "raw": "df_products['shipping_option_name'].replace(Expresslist,\"Express Shipping\",inplace=True)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 4672326
    },
    {
      "raw": "df_products['shipping_option_price'].describe()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2756327
    },
    {
      "raw": "# ALEX: remove plotting\n# fig, ax = plt.subplots()\nx=df_products['shipping_option_price'].value_counts().index\ny=df_products['shipping_option_price'].value_counts()\n# ALEX: remove plotting\n# ax.bar(x, y, align='center')\n# ax.set_xticks(x)\n# ax.set_xlabel('price shipping')\n# ax.set_title('price shipping counts')\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1206786
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_price']==12]['shipping_option_name']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 8074046
    },
    {
      "raw": "df_products.loc[df_products['shipping_option_price']==7]['shipping_option_name']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 801739
    },
    {
      "raw": "df_products['countries_shipped_to'].value_counts()[:20]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 987976
    },
    {
      "raw": "# ALEX: remove plotting\n# import seaborn as sns \n# sns.countplot(df_products['countries_shipped_to'].value_counts()[:20])\n_ = df_products['countries_shipped_to'].value_counts()[:20]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 876379
    },
    {
      "raw": "df_products[\"badge_local_product\"].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 696131
    },
    {
      "raw": "df_products[\"badge_product_quality\"].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 719710
    },
    {
      "raw": "df_products[\"badge_fast_shipping\"].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 683442
    },
    {
      "raw": "df_products[\"inventory_total\"].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 694971
    },
    {
      "raw": "df_products.to_csv(\"df_products.csv\")",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 967863568
    },
    {
      "raw": "df_products=pd.get_dummies(df_products,columns=['product_color','shipping_option_name','origin_country','buymentlang'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 31157125
    },
    {
      "raw": "df_products.to_csv(\"df_products.csv\")\nprint(x)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1113990915
    },
    {
      "raw": "# ALEX: remove plotting\n# from wordcloud import WordCloud\ntext=list(df_products['title'])\n# ALEX: remove plotting\n# textcol=''\n# for a in text :\n#     textcol=textcol+a\n# wordcloudmodel=WordCloud().generate(textcol)\n# plt.imshow(wordcloudmodel,interpolation='bilinear')\n# #plt.axis(\"on\")\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3053473
    },
    {
      "raw": "text=list(df_products['title'])\n# ALEX: remove plotting\n# textcol=''\n# for a in text :\n#     textcol=textcol+a\n# wordcloudmodel=WordCloud().generate(textcol)\n# plt.imshow(wordcloudmodel,interpolation='bilinear')\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 2963880
    },
    {
      "raw": "df_products['product_variation_size_id'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 3235546
    },
    {
      "raw": "#from sklearn import preprocessing \n#le =preprocessing.LabelEncoder()\n#le.fit_transform(df_products['product_variation_size_id'].astype(str))\ndf_products=pd.get_dummies(df_products,columns=['product_variation_size_id'])",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 24307939
    },
    {
      "raw": "df_products['rating']=df_products['rating'].apply(round)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 14251191
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.barplot(df_products['rating'].value_counts().index,df_products['rating'].value_counts())\n_ = df_products['rating'].value_counts().index,df_products['rating'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1257852
    },
    {
      "raw": "df_products['merchant_rating']=df_products['merchant_rating'].apply(round)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 13407158
    },
    {
      "raw": "# ALEX: remove plotting\n# sns.barplot(df_products['merchant_rating'].value_counts().index ,df_products['merchant_rating'].value_counts())\n_ = df_products['merchant_rating'].value_counts().index ,df_products['merchant_rating'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 1165323
    },
    {
      "raw": "df_products['product_variation_inventory'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 708288
    },
    {
      "raw": "df_products['inventory_total'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 696696
    },
    {
      "raw": "df_products['units_sold'].value_counts()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 666648
    },
    {
      "raw": "dropval=df_products.loc[df_products['units_sold']>60000]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 6841510
    },
    {
      "raw": "dropval.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 232333
    },
    {
      "raw": "df_products=df_products.loc[df_products['units_sold']<=60000]",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 15436265
    },
    {
      "raw": "#df_products.drop(df_products[df_products['units_sold']>60000].index,axis=0,inplace=True)#",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 151580
    },
    {
      "raw": "#print(,)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 124664
    },
    {
      "raw": "df_products.columns",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 178300
    },
    {
      "raw": "X=[ 'price','uses_ad_boosts', 'rating', 'badges_count', 'badge_local_product','badge_product_quality',\n   'badge_fast_shipping', 'shipping_option_price',\n       'shipping_is_express', 'countries_shipped_to','merchant_rating',\n       'merchant_has_profile_picture',\n       'product_color_beige', 'product_color_black', 'product_color_blue',\n       'product_color_brown', 'product_color_gray', 'product_color_green',\n       'product_color_multicolor', 'product_color_orange',\n       'product_color_pink', 'product_color_purple', 'product_color_red',\n       'product_color_rose', 'product_color_white', 'product_color_yellow',\n       'shipping_option_name_Express Shipping',\n       'shipping_option_name_Standard Shipping', 'origin_country_AT',\n       'origin_country_CN', 'origin_country_GB', 'origin_country_SG',\n       'origin_country_US', 'origin_country_VE', 'buymentlang_Arabic',\n       'buymentlang_English', 'buymentlang_French', 'buymentlang_German',\n       'buymentlang_Italian', 'buymentlang_Khmer', 'buymentlang_Polish',\n       'buymentlang_Portuguese', 'buymentlang_Romanian', 'buymentlang_Russian',\n       'buymentlang_Spanish', 'buymentlang_Thailand', 'buymentlang_Turkish',\n       'product_variation_size_id_3x', 'product_variation_size_id_3xl',\n       'product_variation_size_id_4xl', 'product_variation_size_id_5xl',\n       'product_variation_size_id_6xl', 'product_variation_size_id_l',\n       'product_variation_size_id_m', 'product_variation_size_id_s',\n       'product_variation_size_id_xl', 'product_variation_size_id_xs',\n       'product_variation_size_id_xxl', 'product_variation_size_id_xxs',\n       'product_variation_size_id_xxxs'\n       ]\n# ALEX: make notebook run with input scaling\n_idx = set(df_products.index)\nX = [x for x in X if x in _idx]\nX=df_products[X]\nY=df_products['units_sold']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 5057345
    },
    {
      "raw": "#X['product_variation_size_id']",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 127959
    },
    {
      "raw": "X.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 174100
    },
    {
      "raw": "Y.shape",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 168867
    },
    {
      "raw": "X.to_csv(\"X.csv\")",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 46984562
    },
    {
      "raw": "# ALEX: remove ML code\n# from sklearn.linear_model import LinearRegression \n# from sklearn.preprocessing import StandardScaler\n# from sklearn.preprocessing import normalize\n# from sklearn.model_selection import train_test_split\n# from sklearn.metrics import mean_absolute_error\n# from sklearn.metrics import r2_score\n# scaler = StandardScaler()\n# lin = LinearRegression()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 135878
    },
    {
      "raw": "# ALEX: remove ML code\n# def modelfit(X,Y,scaler,modelalgorithm,train_test_split):\n#     #scaler.fit_transform(X,Y)\n#     normalize(X, norm='l2', axis=1, copy=True, return_norm=False)\n#     scaler.fit_transform(X,Y)\n#     #scaler.fit_transform()\n#     X_train, X_test, y_train, y_test=train_test_split(X,Y,test_size=.2,random_state=42)\n#     modelalgorithm.fit(X_train,y_train)\n#     prediction =modelalgorithm.predict(X_test)\n#     #print(mean_absolute_error(y_test,prediction))\n#     return r2_score(y_test,prediction)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 137019
    },
    {
      "raw": "# ALEX: remove ML code\n# modelfit(X,Y,scaler,lin,train_test_split)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 102297
    },
    {
      "raw": "",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 62123
    },
    {
      "raw": "#accuracy=[]\n#for i in range(X.shape[1]):\n#    X_model=X.iloc[:,i:-1]\n ##   print(\"this model use all data without first\",i,\"columns\")\n  #  ac=modelfit(X_model,Y,scaler,lin,train_test_split)\n  #  accuracy.append(ac)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 113514
    },
    {
      "raw": "# ALEX: remove ML code\n# accuracy=[]\n# Start=[]\n# End=[]\n# maxac=modelfit(X.iloc[:,0:1],Y,scaler,lin,train_test_split)\n# index_i=0\n# index_j=0\nfor i in range(1,X.shape[1]):\n    for j in range(1,X.shape[1]):\n        if (i>j):\n            X_model=X.iloc[:,j:i]\n# ALEX: remove ML code\n#             print(\"this model use data start from\",j,\"column to\",i ,\"column\")\n#             try :\n#                 ac=modelfit(X_model,Y,scaler,lin,train_test_split)\n#                 accuracy.append(ac)\n#                 Start.append(j)\n#                 End.append(i)\n#                 if ac>=maxac:\n#                     maxac=ac\n#                     index_i=i\n#                     index_j=j\n#                 print(ac)\n#             except ValueError :\n#                 print(\"error\")\n            ",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 492371
    },
    {
      "raw": "# ALEX: remove plotting\n# from mpl_toolkits.mplot3d import Axes3D\n# fig = plt.figure()\n# ax = fig.add_subplot(111, projection='3d')\n# ax.plot(Start,End,accuracy)\n# plt.xlabel(\"x\")\n# plt.ylabel(\"y\")\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 122079
    },
    {
      "raw": "# ALEX: remove ML code\n# index_i",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 93994
    },
    {
      "raw": "# ALEX: remove ML code\n# index_j",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 91176
    },
    {
      "raw": "# ALEX: remove ML code\n# max(accuracy)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 89533
    },
    {
      "raw": "# ALEX: remove ML code\n# min(accuracy)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 87586
    },
    {
      "raw": "X_predict=X.iloc[:,49:59]\ny_result=Y.iloc[:]\n#print(X.iloc[25,7:12])\n# ALEX: remove ML code\n# scaler.fit_transform(X_predict,Y)\n# X_train, X_test, y_train, y_test=train_test_split(X_predict,Y,test_size=.2,random_state=42)\n# lin.fit(X_train,y_train)\n# prediction =lin.predict(X.iloc[:,49:59])\n# #print(mean_absolute_error(y_test,prediction))\n# print(prediction,y_result)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 428784
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.plot(prediction)\n# plt.show()\n# plt.plot(y_result)\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 113507
    },
    {
      "raw": "# ALEX: remove ML code\n# prediction.mean()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 96000
    },
    {
      "raw": "y_result.mean()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 363263
    },
    {
      "raw": "# ALEX: remove ML code\n# col=[]\n# accuracy=[]\nfor j in range(1,X.shape[1]):\n    X_model=X.iloc[:,j:j+1]\n# ALEX: remove ML code\n#     print(\"this model use data start from\",j,\"column to\")\n#     ac=modelfit(X_model,Y,scaler,lin,train_test_split)\n#     print(ac)\n#     accuracy.append(ac)\n#     col.append(j)",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 328502
    },
    {
      "raw": "# ALEX: remove plotting\n# plt.plot(col,accuracy)\n# plt.show()",
      "external_calls": {},
      "all_calls": {},
      "total-ns": 104407
    }
  ],
  "total-time-in-sec": 5.759280292,
  "max-disk-in-mb": 0
}